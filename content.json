{"meta":{"title":"SteveZhang博客","subtitle":"","description":"","author":"张龙","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"Vue - 动画","slug":"Vue-动画","date":"2022-02-02T10:39:12.000Z","updated":"2022-02-06T03:58:29.000Z","comments":true,"path":"2022/02/02/Vue-动画/","link":"","permalink":"http://example.com/2022/02/02/Vue-%E5%8A%A8%E7%94%BB/","excerpt":"","text":"在CSS过渡和动画中自动应用class 可以配合使用第三方CSS动画库，如Animate.css 在过渡钩子函数中使用JavaScript直接操作DOM 可以配合全名用第三方JavaScript动画库，如Velocity.js","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2022-02-02T08:29:10.000Z","updated":"2022-02-02T08:29:10.000Z","comments":true,"path":"2022/02/02/hello-world/","link":"","permalink":"http://example.com/2022/02/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"Kotlin 单例object & Kotlin和 Java 单例模式","slug":"kotlin 单例","date":"2022-02-02T08:29:10.000Z","updated":"2022-02-06T21:15:59.000Z","comments":true,"path":"2022/02/02/kotlin 单例/","link":"","permalink":"http://example.com/2022/02/02/kotlin%20%E5%8D%95%E4%BE%8B/","excerpt":"单例objectobject的定义Java123public class Singleton&#123; public static final Singleton INSTANCE = new Singleton();&#125; Kotlin1object Singleton&#123;&#125;//定义单例，类加载时实例化对象Singleton既是类名也是对象名 饿汉式——类一旦加载就马上初始化","text":"单例objectobject的定义Java123public class Singleton&#123; public static final Singleton INSTANCE = new Singleton();&#125; Kotlin1object Singleton&#123;&#125;//定义单例，类加载时实例化对象Singleton既是类名也是对象名 饿汉式——类一旦加载就马上初始化 访问object的成员Kotlin1234object Singleton&#123; var x:Int = 2 fun y()&#123;...&#125;&#125; 12Singleton.xSingleton.y Java123Singleton.INSTANCE.getX();Singleton.INSTANCE.setX(2);Singleton.INSTANCE.y(); 静态成员 @JvmStatic kotlin中没有静态成员，想要模拟需要@JvmStatic 注解 Kotlin1234object Singleton&#123; @JvmStatic var x:Int = 2 @JvmStatic fun y()&#123;...&#125;&#125; 12Singleton.xSingleton.y() Java123Singleton.getX();Singleton.setX(2);Singleton.y(); object的成员直接按照Java静态成员生成字节码，对Kotlin内部使用无任何影响，Java调用object成员可直接视同调用静态成员一般。 不生成getter&#x2F;setter @JvmFieldKotlin1234object Singleton&#123; @JvmField var x:Int = 2 @JvmField fun y()&#123;...&#125;&#125; 12Singleton.xSingleton.y() 这里object 会生成静态的，如果不是object 其实不会生成静态的 Java12Singleton.x; //属性x不生成getter/setter 访问方式等同于java fieldSingleton.y(); 普通类的静态成员123class Foo&#123; @JvmStatic fun y()&#123;&#125; //Only members in named ojbects and companion objects can be annotated with &#x27;@JvmStatic&#x27;&#125; Kotlin12345class Foo&#123; companion object&#123; @JvmStatic fun y()&#123;&#125; &#125;&#125; Java123public class Foo&#123; public static void y()&#123;&#125;&#125; 123class Foo&#123; @JvmField var x:Int = 2 // 生成非静态的Field 不带getter/setter的写法&#125; Kotlin和 Java 单例模式饿汉式 空间换时间 Java 1234567public class Singleton1Java &#123; public static Singleton1Java INSTANCE = new Singleton1Java(); public static Singleton1Java getInstance()&#123; return INSTANCE; &#125;&#125; Kotlin 1object Singleton1Kotlin &#123;&#125; Kotlin to Java 1234567public final class Singleton1Kotlin &#123; @NotNull public static final Singleton1Kotlin INSTANCE = new Singleton1Kotlin(); private Singleton1Kotlin() &#123; &#125;&#125; 懒汉式 时间换空间","categories":[],"tags":[]}],"categories":[],"tags":[]}