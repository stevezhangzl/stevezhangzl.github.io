<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SteveZhang博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-25T08:23:44.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ELF文件学习-符号表</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E7%AC%A6%E5%8F%B7%E8%A1%A8/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E7%AC%A6%E5%8F%B7%E8%A1%A8/</id>
    <published>2022-07-18T07:49:19.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们常常调试错误说需要<a href="https://so.csdn.net/so/search?q=%E7%AC%A6%E5%8F%B7%E8%A1%A8&spm=1001.2101.3001.7020">符号表</a>，那么符号表是什么？符号表仅仅用来调试？</p><p>符号表本质就是一个映射表，举个例子：某行<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>汇编代码映射到源码第几行。</p><p>符号表的作用：</p><ol><li>调试</li><li>重定位</li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>重定位可以大致分为两种类别<code>动态重定位</code>与<code>静态重定位</code></p><h3 id="静态重定位"><a href="#静态重定位" class="headerlink" title="静态重定位"></a>静态重定位</h3><p>看下面源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainA.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> globalvar=<span class="number">0x123</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mainB.c</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> globalvar;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunB</span><span class="params">()</span></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I am  %d\r\n&quot;</span>,globalvar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们程序有两个源代码，我们知道我编译的时候我们首先先将程序编译成目标文件。</p><p>也就是<code>mainB.o mainA.o</code>，在目标文件中<code>mainB.o</code>不知道test函数和globalvar变量的地址，因此我们需要在链接时修正<code>mainB.o</code>函数调用地址。</p><p>在编译成目标文件时，编译器会把文件中所有的函数与变量地址放入一个符号表中。<br>在链接时把所有目标文件的符号表合成一个，然后利用重定位表和符号表完成函数调用地址修正。</p><p>我们看<code>链接前</code>示意图：</p><p><img src="/../images/image-20220718155420553.png" alt="image-20220718155420553"></p><p>链接后：</p><p><img src="/../images/image-20220718155437037.png" alt="image-20220718155437037"></p><h3 id="动态重定位"><a href="#动态重定位" class="headerlink" title="动态重定位"></a>动态重定位</h3><p>假设A程序需要<code>xxx.so</code>中的<code>yyyy</code>函数那么就需要从<code>xxx.so</code>中的符号表进行读取。</p><p>动态重定位和静态符号表原理都差不多，不过重定位操作延迟到调用时</p><h2 id="静态符号表"><a href="#静态符号表" class="headerlink" title="静态符号表"></a>静态符号表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mystaticVar = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> myglobalvar=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> myglobalvar2=<span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">testfun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *inp= <span class="number">0x00</span>;</span><br><span class="line">        *inp=<span class="number">2</span>;</span><br><span class="line">        testfun();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world %d \r\n&quot;</span>,mystaticVar);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hell</span><span class="params">()</span></span>&#123;</span><br><span class="line">testfun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成目标文件：<br><code>gcc -c -o main.o main.c</code></p><p>首先我们查看对应头表</p><p><img src="/../images/image-20220718160221857.png" alt="image-20220718160221857"></p><p>可以看到一个<code>.symtab</code>这个就是我们符号表数组起始地址</p><p>他的结构如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf32_Wordst_name;</span><br><span class="line">Elf32_Addrst_value;</span><br><span class="line">Elf32_Wordst_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf32_Halfst_shndx;</span><br><span class="line">&#125; Elf32_Sym;<span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf64_Wordst_name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf64_Halfst_shndx;</span><br><span class="line">Elf64_Addrst_value;</span><br><span class="line">Elf64_Xwordst_size;</span><br><span class="line">&#125; Elf64_Sym;<span class="comment">//64位</span></span><br></pre></td></tr></table></figure><p>相应的符号表的用命令查看</p><p><img src="/../images/image-20220718161048429.png" alt="image-20220718161048429"></p><h3 id="st-name"><a href="#st-name" class="headerlink" title="st_name"></a>st_name</h3><p>数值表示该符号字符串位于字符串表(.)中的下标。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们常常调试错误说需要&lt;a href=&quot;https://so.csdn.net/so/search?q=%E7%AC%A6%E5%8F%B7</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ELF文件学习-通过GDB学习PLT和GOT</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E9%80%9A%E8%BF%87GDB%E5%AD%A6%E4%B9%A0PLT%E5%92%8CGOT/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E9%80%9A%E8%BF%87GDB%E5%AD%A6%E4%B9%A0PLT%E5%92%8CGOT/</id>
    <published>2022-07-18T05:37:08.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道<code>printf</code>代码的实现位于<code>libc.so</code>中，而我们知道我们的so是在运行通过加载器进行加载的。</p><p>如下代码所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译指令 gcc -o main2.out main2.c -zlazy  </span></span><br><span class="line"><span class="comment">//zlazy是启用延迟绑定。部分发行版本连接器直接程序加载的时候会进行绑定so函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello %d&quot;</span>,<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd main2.out</span><br></pre></td></tr></table></figure><p>ldd 可以查看程序所需求的动态库</p><p><img src="/../images/image-20220718134312662.png" alt="image-20220718134312662"></p><p>在<code>so</code>编译的时候<code>printf</code>是不知道函数地址的，因为你不知道<code>so</code>中被加载到内存哪个地址。</p><p><img src="/../images/image-20220718134504139.png" alt="image-20220718134504139"></p><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p>我们直接在程序被加载时重写改写所有so的函数调用地址。</p><p>比如如下汇编在编译时的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call xxx1</span><br><span class="line">call xxx2</span><br><span class="line">call xxx3</span><br></pre></td></tr></table></figure><p>加载后修改所有地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call yyy1</span><br><span class="line">cal yyy2</span><br><span class="line">call yyy3</span><br></pre></td></tr></table></figure><p>但是弊端异常明显，假设一个程序需要重定位100万个地址的话，那么程序启动会异常的慢，而且你程序不可能所有指令都会被调用(也许用户刚打开就关闭，你的代码基本没怎么执行却浪费大量的时间在加载时)。</p><h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><p>延迟绑定重定位的地址，也就是我们在调用某条指令的时候再去修改他的调用地址。为了实现延迟绑定ELF推出了两个节 <code>.GOT</code>，<code>PLT</code>.</p><p>首先我們要明白其中的一些格式</p><p><code>.got</code>其实本质是一张表，每一项都是一个地址，也许是变量的地址或者函数的。某个需要重定位的函数被调用后<code>.got</code>表里的与之关联的地址会被改成真正函数地址（未被调用之前got的地址指向plt某个函数）。</p><p><code>.plt</code>存储的是桩代码，负责解析与调用真正的重定位地址函数。</p><p>我们用一个例子举例说明：</p><p>我们原始调用某个函数的汇编指令：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">call</span>   xxxx <span class="meta">#调用&lt;printf&gt;实际所在地址</span></span><br></pre></td></tr></table></figure><p>启用延迟绑定后这个指令会改为调用plt某处代码</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">call</span>   <span class="number">1050</span> <span class="meta">#改为调用plt的某处代码</span></span><br></pre></td></tr></table></figure><p>跳转处plt代码如下所示</p><p><img src="/../images/image-20220718150645957.png" alt="image-20220718150645957"></p><p>0x2fe2 指向.got.plt表中的第二个地址</p><p>0x2fe3 指禹.got.plt表中的第三个地址</p><p>0x2fe2 传入的是link_map结构，可以让我们查找函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> link_map</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* These first few members are part of the protocol with the debugger.</span></span><br><span class="line"><span class="comment">       This is the same format used in SVR4.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">ElfW(Addr)</span> l_addr;<span class="comment">/* Difference between the address in the ELF</span></span><br><span class="line"><span class="comment">   file and the addresses in memory.  */</span></span><br><span class="line">    <span class="built_in">char</span> *l_name;<span class="comment">/* Absolute file name object was found in.  */</span></span><br><span class="line">    <span class="constructor">ElfW(Dyn)</span> *l_ld;<span class="comment">/* Dynamic section of the shared object.  */</span></span><br><span class="line">    <span class="keyword">struct</span> link_map *l_next, *l_prev; <span class="comment">/* Chain of loaded objects.  */</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>而0x2fe3 其实是一个名叫<code>_dl_runtime_resolve</code>函数，他的作用有两个</p><ol><li>根据传入的函数id和link_map修改got表地址为函数地址</li><li>跳转查找的函数地址</li></ol><p>_dl_runtim_resolve 函数执行完了，</p><p>得到目标函数的地址然后写回.got表，然后才执行目标函数，这样就动态的找到了目标函数地址并执行，这时查看.got表中之前的地址，目录函数的地址已经被替换。</p><p>方便理解使有gdb调试进行演示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译指令 gcc -o main2.out main2.c -zlazy  </span></span><br><span class="line"><span class="comment">//zlazy是启用延迟绑定。部分发行版本连接器直接程序加载的时候会进行绑定so函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello %d&quot;</span>,<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先<code>gbd main2.out</code>进入gdb调试界面</p><p><img src="/../images/image-20220718135532983.png" alt="image-20220718135532983"></p><p><code>layout asm</code>打开汇编面板</p><p><img src="/../images/image-20220718135600331.png" alt="image-20220718135600331"></p><p>b main 在main函数上打断点</p><p>r 运行程序</p><p>si 单独调试</p><p>运行到callq 0x1050 &lt;printf@plt&gt;</p><p><img src="/../images/image-20220718135743116.png" alt="image-20220718135743116"></p><p>si 步入 跳到0x555555555050地址</p><p><img src="/../images/image-20220718135938881.png" alt="image-20220718135938881"></p><p>*0x2fbd(%rip) 是got表中的某一项地址，也就是printf地址，但是由于没有重定向，此时got中的地址会指向另一个plt函数地址</p><p>在图中的就是 0x555555558018 这个地址中存储的地址</p><p><img src="/../images/image-20220718140249906.png" alt="image-20220718140249906"></p><p>接着调用 si 去步入 程序跳到 0x555555555030</p><p><img src="/../images/image-20220718140333604.png" alt="image-20220718140333604"></p><p>pushq 0x0 是printf函数的id 这个由编译器&#x2F;连接器决定函数id是什么，这个地址的代码是ptl.sec中的代码，这段代码最后又跳到</p><p>0x555555555020 </p><p>我们接着si 跳转</p><p><img src="/../images/image-20220718140556739.png" alt="image-20220718140556739"></p><p>.got.plt 第二项是link_map</p><p>.got.plt 中第三项是_dl_runtime_resolve函数地址</p><p>ni 跳过pushq </p><p>si 步入到_dl_runtime_resolve函数</p><p><img src="/../images/image-20220718141012315.png" alt="image-20220718141012315"></p><p>ni不停的一步步跳</p><p>最后执行到printf函数</p><p><img src="/../images/image-20220718145545953.png" alt="image-20220718145545953"></p><p>bt看到当前执行栈</p><p><img src="/../images/image-20220718145717029.png" alt="image-20220718145717029"></p><p>执行到printf函数了</p><p>这里我们查看.got表中的地址，已经替换</p><p><img src="/../images/image-20220718145944304.png" alt="image-20220718145944304"></p><p>已经替换成了真实的地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道&lt;code&gt;printf&lt;/code&gt;代码的实现位于&lt;code&gt;libc.so&lt;/code&gt;中，而我们知道我们的so是在运行通过加载</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ELF格式学习-elf头部与节头</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-18T01:11:53.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ELF</code>是<code>linux</code>动态库,可执行文件的格式。可以类比到windows下exe的格式。首先推荐一个写的不错文档<a href="https://refspecs.linuxfoundation.org/elf/gabi4+/">ELF格式</a></p><p>我们知道<code>程序</code>需要加载<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>后才能运行。但是ELF文件加载到内存后布局会变化，和原始ELF文件相比，<code>加载器</code>会将相同的节属性（比如只读）合并一个段。所以<code>ELF</code>也就有了两种视图，一种未加载前静态视图，另一种是加载后的动态视图。</p><p>我们首先了解<code>静态视图</code>下<code>ELF</code>文件格式如下：</p><p><img src="/../images/b285b3b11743431d8141594ad4b3f8de.png" alt="图1"></p><p>你可以把ELF内容大致分为四个部分:</p><p>(1) ELF头部</p><p>(2) 节</p><p>(3) 节表头</p><p>(4) 程序头</p><blockquote><ol><li><code>ELF头部</code>固定在ELF文件开始</li><li>需要留意程序头和节表头可以位于ELF任意位置，他们位置被<code>ELF头部</code>中的属性指定</li><li>节分有很多种格式需要根据节类别区分，比如重定义节 与代码节</li></ol></blockquote><p>本文根据以下代码作为示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mystaticVar = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> myglobalvar=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//函数来自test.so</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">testfun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *inp= <span class="number">0x00</span>;</span><br><span class="line">*inp=<span class="number">2</span>;</span><br><span class="line">testfun();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> myLocalVar1 = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> myUnintLocallvar;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world %d \r\n&quot;</span>,mystaticVar);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hell</span><span class="params">()</span></span>&#123;</span><br><span class="line">testfun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o main.o main.c</span><br></pre></td></tr></table></figure><p>生成目录文件 main.o</p><p>再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main.out main.o</span><br></pre></td></tr></table></figure><p>生成可执行文件main.out</p><h2 id="ELF头部"><a href="#ELF头部" class="headerlink" title="ELF头部"></a>ELF头部</h2><p>在linux系统下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718092450493.png" alt="image-20220718092450493"></p><ul><li>ELF 64-bit 告诉我们这个文件是一个64位系统下的ELF文件</li><li>LSB是least significant bit缩写表示第一个字节是多字节中最低有效位，简而言之就是小端模式</li><li>x86-64 是指该文件运行在那个处理器的ABI下</li><li>version 1(SYSV)是该ELF标准是UNIX_System_V具体参阅SYSV</li><li>not stripped表示该ELF存在符号表</li><li>relocatable 表示该文件是可重定位，因为main.o是目标文件而不是可执行文件，部分代码地址是不确定的</li></ul><p>上面信息其实file程序读取该文件的elf头部得到，我们使用readelf -h文件头查看详细的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -h main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718092719040.png" alt="image-20220718092719040"></p><p>我们通过010Editor查看main.o</p><p><img src="/../images/image-20220718092849857.png" alt="image-20220718092849857"></p><p>数据结构，我们通过查看elf.h头文件，可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_hdr</span>&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[EI_NIDENT];</span><br><span class="line">  Elf32_Halfe_type;</span><br><span class="line">  Elf32_Halfe_machine;</span><br><span class="line">  Elf32_Worde_version;</span><br><span class="line">  Elf32_Addre_entry;  <span class="comment">/* Entry point */</span></span><br><span class="line">  Elf32_Offe_phoff;</span><br><span class="line">  Elf32_Offe_shoff;</span><br><span class="line">  Elf32_Worde_flags;</span><br><span class="line">  Elf32_Halfe_ehsize;</span><br><span class="line">  Elf32_Halfe_phentsize;</span><br><span class="line">  Elf32_Halfe_phnum;</span><br><span class="line">  Elf32_Halfe_shentsize;</span><br><span class="line">  Elf32_Halfe_shnum;</span><br><span class="line">  Elf32_Halfe_shstrndx;</span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf64_hdr</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[<span class="number">16</span>];<span class="comment">/* ELF &quot;magic number&quot; */</span></span><br><span class="line">  Elf64_Half e_type;</span><br><span class="line">  Elf64_Half e_machine;</span><br><span class="line">  Elf64_Word e_version;</span><br><span class="line">  Elf64_Addr e_entry;<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Off e_phoff;<span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Off e_shoff;<span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Word e_flags;</span><br><span class="line">  Elf64_Half e_ehsize;</span><br><span class="line">  Elf64_Half e_phentsize;</span><br><span class="line">  Elf64_Half e_phnum;</span><br><span class="line">  Elf64_Half e_shentsize;</span><br><span class="line">  Elf64_Half e_shnum;</span><br><span class="line">  Elf64_Half e_shstrndx;</span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><h3 id="e-ident"><a href="#e-ident" class="headerlink" title="e_ident"></a>e_ident</h3><p>一个<code>16</code>字节数组大小</p><p><img src="/../images/image-20220718093450294.png" alt="image-20220718093450294"></p><p>在<code>elf.h</code>有<code>EI_XXX</code>表示上面下标位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG00<span class="comment">/* e_ident[] indexes */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_CLASS4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_DATA5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_VERSION6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_PAD7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG00x7f<span class="comment">/* EI_MAG */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG1<span class="meta-string">&#x27;E&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG2<span class="meta-string">&#x27;L&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG3<span class="meta-string">&#x27;F&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG<span class="meta-string">&quot;177ELF&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>SELFMAG4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASSNONE0<span class="comment">/* EI_CLASS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASS321</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASS642</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASSNUM3</span></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718093919418.png" alt="image-20220718093919418"></p><h3 id="e-type"><a href="#e-type" class="headerlink" title="e_type"></a>e_type</h3><p>表示当前ELF文件类型，下面举例常见的类型</p><p><img src="/../images/image-20220718093953767.png" alt="image-20220718093953767"></p><h3 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h3><p>制定当前ELF运行的CPU架构<br>下面举例常见的类型</p><p><img src="/../images/image-20220718094032677.png" alt="image-20220718094032677"></p><h3 id="e-version"><a href="#e-version" class="headerlink" title="e_version"></a>e_version</h3><p>用于指定ELF版本一般都为1</p><h3 id="e-entry"><a href="#e-entry" class="headerlink" title="e_entry"></a>e_entry</h3><p>elf 代码运行的入口</p><h3 id="e-flags"><a href="#e-flags" class="headerlink" title="e_flags"></a>e_flags</h3><p>在e_machine指定的处理器下的一些特性</p><h2 id="节头表相关字段"><a href="#节头表相关字段" class="headerlink" title="节头表相关字段"></a>节头表相关字段</h2><h3 id="e-shoff"><a href="#e-shoff" class="headerlink" title="e_shoff"></a>e_shoff</h3><p>节头表在文件的偏移</p><h3 id="e-shentsize"><a href="#e-shentsize" class="headerlink" title="e_shentsize"></a>e_shentsize</h3><p>节头表中每个条目的大小</p><h3 id="e-shnum"><a href="#e-shnum" class="headerlink" title="e_shnum"></a>e_shnum</h3><p>节头表中条目的数目</p><h2 id="程序头相关字段"><a href="#程序头相关字段" class="headerlink" title="程序头相关字段"></a>程序头相关字段</h2><h3 id="e-phoff"><a href="#e-phoff" class="headerlink" title="e_phoff"></a>e_phoff</h3><p>程序头在文件中的偏移</p><h3 id="e-phentsize"><a href="#e-phentsize" class="headerlink" title="e_phentsize"></a>e_phentsize</h3><p>指定程序头中每个条目的大小</p><h3 id="e-phnum"><a href="#e-phnum" class="headerlink" title="e_phnum"></a>e_phnum</h3><p>指定程序头中每个条目的个数</p><h3 id="e-shstrndx"><a href="#e-shstrndx" class="headerlink" title="e_shstrndx"></a>e_shstrndx</h3><p>每个节头都一个名称，这些名称都存储一个特殊节中。而e_shstrndx 指定这个特殊的节所在节头表的下标</p><p>我们先看看这个程序中所有节如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -S --wide main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718094250408.png" alt="image-20220718094250408"></p><p>一共13个节，其中<code>.shstrtab</code>表示的存储字符串节 。<br><code>.shstrtab</code>是<code>section head string table</code></p><p>我们查看这个节内容如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -x .shstrtab main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718094358146.png" alt="image-20220718094358146"></p><p>大致结构如下：</p><p><img src="/../images/image-20220718094417879.png" alt="image-20220718094417879"></p><h2 id="节头"><a href="#节头" class="headerlink" title="节头"></a>节头</h2><p>依旧使用<code>main.o</code>我们可以到节头表信息如下：</p><p><img src="/../images/image-20220718094852445.png" alt="image-20220718094852445"></p><p><img src="/../images/image-20220718094924806.png" alt="image-20220718094924806"></p><blockquote><p>节头表的第一项固定为空节不存储实际内容</p></blockquote><p>readelf指令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -S --wide main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718095050505.png" alt="image-20220718095050505"></p><p>节头的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Wordsh_name;<span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf64_Wordsh_type;<span class="comment">/* Section type */</span></span><br><span class="line">  Elf64_Xwordsh_flags;<span class="comment">/* Section flags */</span></span><br><span class="line">  Elf64_Addrsh_addr;<span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf64_Offsh_offset;<span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf64_Xwordsh_size;<span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf64_Wordsh_link;<span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf64_Wordsh_info;<span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf64_Xwordsh_addralign;<span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf64_Xwordsh_entsize;<span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure><blockquote><p>elf节头规则详细文档 <a href="https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.sheader.html">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.sheader.html</a></p></blockquote><h3 id="sh-name"><a href="#sh-name" class="headerlink" title="sh_name"></a>sh_name</h3><p>节名在字符串节中下标,本例中字符串节名称为<code>.shstrtab</code>.我们举例其中一个节<code>.text</code></p><p><img src="/../images/image-20220718130046385.png" alt="image-20220718130046385"></p><p>我们看到.text节的sh_name为20h也就是十进制32.我们看下<code>.shstrtab</code>指向的字节数组的32位</p><p><img src="/../images/image-20220718130203341.png" alt="image-20220718130203341"></p><h3 id="sh-type"><a href="#sh-type" class="headerlink" title="sh_type"></a>sh_type</h3><p>这个字段根据节的内容(<strong>content</strong>)和语义(<strong>semantics</strong>)对节进行分类。<br>分类类型有很多种，我们只举例其中比较常见的类型。</p><p><img src="/../images/image-20220718130235147.png" alt="image-20220718130235147"></p><p><img src="/../images/image-20220718130300749.png" alt="image-20220718130300749"></p><p><code>.text</code>与<code>.data</code>一般就是<code>SHT_PROGBITS</code> （text存储代码 data存储数据）<br><code>.shstrtab</code>一般是<code>SHT_STRTAB</code><br><code>.bss</code>一般是<code>SHT_NOBITS</code> (存储全局未初始化数据等)</p><h3 id="sh-flags"><a href="#sh-flags" class="headerlink" title="sh_flags"></a>sh_flags</h3><p>字段标记是否可读可写可执行等，以及是否在内存中分配内存(<code>SHF_ALLOC</code>)<br>下图为枚举值表：</p><p><img src="/../images/image-20220718130358562.png" alt="image-20220718130358562"></p><h3 id="sh-addr"><a href="#sh-addr" class="headerlink" title="sh_addr"></a>sh_addr</h3><p>这个节被加载后对应VA地址</p><h3 id="sh-offset"><a href="#sh-offset" class="headerlink" title="sh_offset"></a>sh_offset</h3><p>这个节在文件中的偏移</p><h3 id="sh-size"><a href="#sh-size" class="headerlink" title="sh_size"></a>sh_size</h3><p>节大小（不是指节头大小哦）</p><h3 id="sh-link"><a href="#sh-link" class="headerlink" title="sh_link"></a>sh_link</h3><p>一般用于关联节所在节头表的数组下标，一般为0<br>举例说明：<br>我们节中有一个专门用于重定位的节如.rela.text 就是用来重定位代码段部分代码的。<br>sh_link表示这个节所使用的的符号表节在节头表的下标<br>sh_info表示哪个节需要重定向。这个值指向在节头表中的索引。</p><p><img src="/../images/image-20220718130534011.png" alt="image-20220718130534011"></p><h3 id="sh-info"><a href="#sh-info" class="headerlink" title="sh_info"></a>sh_info</h3><p>一般用于关联节所在节头表的数组下标，一般为0</p><h3 id="sh-addralign"><a href="#sh-addralign" class="headerlink" title="sh_addralign"></a>sh_addralign</h3><p>对其数值。如果为0或者1表示不对齐。<br>sh_addr必须为0或者对其sh_addralign取模</p><h3 id="sh-entsize"><a href="#sh-entsize" class="headerlink" title="sh_entsize"></a>sh_entsize</h3><p>ent是entry缩写。</p><p>部分节内部存储是固定数据结构条目数组,针对这类别节sh_entsize指代的是每个条目的字节大小。</p><p>举例说明：<br>符号表节名为<code>.symtab</code>,它存储若干固定结构的符号信息。如下图所示</p><p><img src="/../images/image-20220718130746798.png" alt="image-20220718130746798"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf32_Wordst_name;</span><br><span class="line">Elf32_Addrst_value;</span><br><span class="line">Elf32_Wordst_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf32_Halfst_shndx;</span><br><span class="line">&#125; Elf32_Sym;<span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf64_Wordst_name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf64_Halfst_shndx;</span><br><span class="line">Elf64_Addrst_value;</span><br><span class="line">Elf64_Xwordst_size;</span><br><span class="line">&#125; Elf64_Sym;<span class="comment">//64位</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sh_entsize指的就是Elf64_Sym或者Elf32_Sym的大小</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ELF&lt;/code&gt;是&lt;code&gt;linux&lt;/code&gt;动态库,可执行文件的格式。可以类比到windows下exe的格式。首先</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android-VPN学习笔记</title>
    <link href="http://example.com/2022/06/21/Android-VPN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/06/21/Android-VPN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-06-21T02:24:25.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、VpnService-如何将Android网络连接到VPN网关的"><a href="#一、VpnService-如何将Android网络连接到VPN网关的" class="headerlink" title="一、VpnService 如何将Android网络连接到VPN网关的"></a>一、VpnService 如何将Android网络连接到VPN网关的</h2><p><img src="/../images/image-20220621102623859.png" alt="image-20220621102623859"></p><p>Vpnservice是安卓提供给开发者用于开发自己的VPN的服务。开发者继承这个Vpnservice，从而实现VPN。手机本身是有一块网卡，安卓虚拟出一个网卡，然后通过NAT，将真实网卡上的出站流量转发到虚拟网卡上，然后Vpnservice获取这个虚拟网卡上的“流量”，并转发给Vpn的服务端。其实还是挺好理解的。问题在于，上面说的流量，并不是<strong>传输层的tcp&#x2F;udp流量</strong>，而是<strong>ip数据报</strong>。</p><p>现在要处理ip数据报，而且java语言只提供了传输层（tcp&#x2F;udp）的socket传输api。这意味着，开发Vpn必定有一部分需要使用其他语言（C&#x2F;C++）。</p><p>看安卓example的<a href="https://android.googlesource.com/platform/development/+/master/samples/ToyVpn">ToyVpn</a>中server的代码，发现他的代码就是直接open &#x2F;dev下的网卡文件，然后读写来收取ip数据。</p><h2 id="二、解决方案一"><a href="#二、解决方案一" class="headerlink" title="二、解决方案一"></a>二、解决方案一</h2><p>这也是ToyVpn所采用的实现方式，将IP数据包通过UDP发送给vps服务器，vps服务器解包后得到原始的IP数据包，通过C&#x2F;C++写进网卡文件，然后把IP数据包发送出去(为啥不用java,因为java只能操作tcp&#x2F;udp的socket api，无法直接把IP数据包写入网卡，并发送出去)</p><p>通过Udp传输的原因是，Udp（用户数据报）是ip数据报的简单包裹，不像tcp数据包那样，增加了很复杂的东西，也不进行失败重传等操作。要清楚，我们这里传输的是较底层的ip数据报，在ip数据报的上层，可能是UDP，也可能是TCP，不管传输层是什么协议，消息的正确性，失败重传等等，都有人在传输层做过了，我们只要传就好了，所以用UDP是最好的。</p><p>数据报文封包和UDP隧道相对来说还是比较容易理解的概念。试想一个进入隧道的TCP数据包：</p><p><img src="/../images/image-20220621103458154.png" alt="image-20220621103458154"></p><p>这个数据报有正常的IP和TCP头，后面是用户要发送的数据。封包的过程如下：</p><p><img src="/../images/image-20220621103514564.png" alt="image-20220621103514564"></p><p>这样，这个数据包就是一个UDP数据包，里面装的是TCP数据包。系统可以将他想普通的UDP数据包一样发送；在接收端，额外的UDP头部被去掉后，原始的包含tcp消息的ip数据报经修改后（修改源ip地址）继续进入网络堆栈进行处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、VpnService-如何将Android网络连接到VPN网关的&quot;&gt;&lt;a href=&quot;#一、VpnService-如何将Android网络连接到VPN网关的&quot; class=&quot;headerlink&quot; title=&quot;一、VpnService 如何将Android网</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++-类的定义、运算符重载</title>
    <link href="http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-1/"/>
    <id>http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-1/</id>
    <published>2022-06-19T05:15:31.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>class A:[private&#x2F;protected&#x2F;public] B</p><p>默认为private继承 </p><p>A是基类，B称为子类或者派生类 </p></blockquote><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>基类的public、protected成员也是派生类相应的成员，基类的private成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。</td></tr><tr><td>protected</td><td>基类的公有和保护成员将成为派生类的保护成员</td></tr><tr><td>private</td><td>基类的公有和保护成员将成为派生类的私有成员</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span>   Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 调用父类 方法</span></span><br><span class="line">Parent::<span class="built_in">test</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;child&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>多继承</strong></p><blockquote><p>一个子类可以有多个父类，它继承了多个父类的特性。</p><p>class &lt;派生类名&gt;:&lt;继承方式1&gt;&lt;基类名1&gt;,&lt;继承方式2&gt;&lt;基类名2&gt;,…</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p><p>静态多态（静态联编）是指在编译期间就可以确定函数的调用地址，通过<strong>函数重载</strong>和<strong>模版（泛型编程）</strong>实现 </p><p>动态多态（动态联编）是指函数调用的地址不能在编译器期间确定，必须需要在运行时才确定 ,通过<strong>继承+虚函数</strong> 实现</p></blockquote><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;child&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Parent *c = <span class="keyword">new</span> <span class="built_in">Child</span>();</span><br><span class="line"><span class="comment">// 编译期间 确定c 为 parent 调用parent的test方法</span></span><br><span class="line">c-&gt;<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改Parent为virtual 虚函数 动态链接,告诉编译器不要静态链接到该函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态多态 调用Child的test方法</span></span><br><span class="line">c-&gt;<span class="built_in">test</span>();</span><br></pre></td></tr></table></figure><blockquote><p>构造函数任何时候都不可以声明为虚函数</p><p>析构函数一般都是虚函数,释放先执行子类再执行父类</p></blockquote><p><strong>纯虚函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//纯虚函数 继承自这个类需要实现 抽象类型</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote><p>模板是泛型编程的基础</p></blockquote><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><blockquote><p>函数模板能够用来创建一个通用的函数。以支持多种不同的形參。避免重载函数的函数体反复设计。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数的主体</span></span><br><span class="line"><span class="keyword">return</span>  a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代替了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span></span><br></pre></td></tr></table></figure><h3 id="类模板-泛型类"><a href="#类模板-泛型类" class="headerlink" title="类模板(泛型类)"></a>类模板(泛型类)</h3><blockquote><p>为类定义一种模式。使得类中的某些数据成员、默写成员函数的參数、某些成员函数的返回值，能够取随意类型</p><p>常见的 容器比如 向量 vector <int> 或 vector <string> 就是模板类</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">E</span>,<span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">add</span><span class="params">(E e,T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e+t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="keyword">int</span>,<span class="keyword">float</span>&gt; q;</span><br><span class="line">q.<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1.1f</span>) = <span class="number">2.1f</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;class A:[private&amp;#x2F;protected&amp;#x2F;public] B&lt;/p&gt;
&lt;p&gt;默认为</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c++-类的定义、运算符重载</title>
    <link href="http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2022-06-19T04:24:30.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，用户定义的类型。    </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;    <span class="comment">//默认 private</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k):<span class="built_in">i</span>(i),<span class="built_in">j</span>(j),<span class="built_in">k</span>(k);<span class="comment">//构造方法 </span></span><br><span class="line">~<span class="built_in">Student</span>();<span class="comment">//析构方法 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">student</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>; <span class="comment">//调用构造方法 栈</span></span><br><span class="line"><span class="comment">//出方法释放student 调用析构方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态内存(堆)</span></span><br><span class="line">Student *student = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line">student = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行(不需要手动调用)。</p><p>private：可以被该类中的函数、友元函数访问。 不能被任何其他访问，该类的对象也不能访问。 </p><p>protected：可以被该类中的函数、子类的函数、友元函数访问。 但不能被该类的对象访问。</p><p>public：可以被该类中的函数、子类的函数、友元函数访问，也可以被该类的对象访问。 </p></blockquote><p>Student.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现函数，要使用域作用符::</span></span><br><span class="line"><span class="comment">//构造方法  i(i) 前面的是成员属性 后面是传参的i 只有构造函数可以这么写 这是一种给成员属性赋值的方法</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">int</span> i,<span class="keyword">int</span> j):<span class="built_in">i</span>(i),<span class="built_in">j</span>(j) &#123;</span><br><span class="line">  <span class="comment">//由动态申请内存来的，没调用 free会泄漏</span></span><br><span class="line">  <span class="comment">//xx = malloc(100);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以跟java一样，这么给成员属性赋值</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">  <span class="keyword">this</span>-&gt;j = j;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;构造方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于释放动态申请的内存</span></span><br><span class="line">Student::~<span class="built_in">Student</span>() &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;析构方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对应Student的实现，可以直接在h类中，也可以放在cpp中，放在cpp中要注意 使用Student::域作用符加函数名，如果是有返回值的void 的的要在域作用符之前 </p></blockquote><h2 id="常量函数"><a href="#常量函数" class="headerlink" title="常量函数"></a>常量函数</h2><blockquote><p>函数后写上const，表示不会也不允许修改类中的成员。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="comment">// 常量函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span> <span class="keyword">const</span>  </span>&#123;</span><br><span class="line"><span class="comment">//错误 不能修改name 去掉const之后可以</span></span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><blockquote><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员</p><p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p></blockquote><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span>  </span>&#123;</span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//能够使用student中私有的name属性</span></span><br><span class="line">cout &lt;&lt; student-&gt;name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student *student = <span class="keyword">new</span> Student;</span><br><span class="line">student-&gt;<span class="built_in">setName</span>(<span class="string">&quot;Lance&quot;</span>);</span><br><span class="line"><span class="built_in">printName</span>(student);</span><br></pre></td></tr></table></figure><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span>  </span>&#123;</span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span></span>;</span><br><span class="line">    <span class="comment">//友元类</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Student *student)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//能够使用student中私有的name属性</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call:&quot;</span> &lt;&lt; student-&gt;name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><blockquote><p>和Java一样，可以使用static来声明类成员为静态的</p><p>当我们使用静态成员属性或者函数时候 需要使用 域运算符 :: </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instance.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INSTANCE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INSTANCE_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Instance* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> Instance *instance;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Instance.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Instance.h&quot;</span></span></span><br><span class="line">Instance* Instance::instance = <span class="number">0</span>;</span><br><span class="line"><span class="function">Instance* <span class="title">Instance::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//C++11以后，编译器保证内部静态变量的线程安全性</span></span><br><span class="line"><span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h2><blockquote><p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分为<strong>函数重载</strong>和<strong>运算符重载</strong>。 </p></blockquote><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;整数为: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span>  f)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;浮点数为: &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3><blockquote><p>C++允许重定义或重载大部分 C++ 内置的运算符 </p><p>函数名是由关键字 operator 和其后要重载的运算符符号构成的 </p><p>重载运算符可被定义为普通的非成员函数或者被定义为类成员函数 </p></blockquote><p><strong>成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test1</span>()&#123;&#125;</span><br><span class="line"><span class="comment">//定义成员函数进行重载</span></span><br><span class="line">    <span class="comment">//返回对象   调用拷贝构造函数  释放函数内 t 对象</span></span><br><span class="line">    <span class="comment">//引用类型(Test1&amp;) 没有复制对象 返回的是 t 对象本身 t会被释放 所以会出现问题(数据释放不彻底就不一定)</span></span><br><span class="line">    <span class="comment">// 可以输出 t 与 t3 地址查看</span></span><br><span class="line">Test1 <span class="keyword">operator</span>+(<span class="keyword">const</span> Test1&amp; t1) &#123;</span><br><span class="line">Test1 t;</span><br><span class="line">t.i = <span class="keyword">this</span>-&gt;i + t1.i;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//拷贝构造函数 (有默认的) </span></span><br><span class="line">    <span class="built_in">Test1</span>(<span class="keyword">const</span> Test1&amp; t)&#123;</span><br><span class="line">        <span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;i = t.i;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//如果动态申请内存 需要深拷贝</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test1 t1;</span><br><span class="line">Test1 t2;</span><br><span class="line">t1.i = <span class="number">100</span>;</span><br><span class="line">t2.i = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//发生两次拷贝</span></span><br><span class="line"><span class="comment">// C++真正的临时对象是不可见的匿名对象</span></span><br><span class="line"><span class="comment">//1、拷贝构造一个无名的临时对象，并返回这个临时对象</span></span><br><span class="line"><span class="comment">//2、由临时对象拷贝构造对象 t3</span></span><br><span class="line"><span class="comment">//语句结束析构临时对象</span></span><br><span class="line">Test1 t3 = t1 + t2;</span><br><span class="line">cout &lt;&lt; t3.i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><blockquote><p>Xcode上玩，使用的g++编译器会进行 <strong>返回值优化(RVO、NRVO)</strong> 从而看不到拷贝构造函数的调用。</p><p>可以加入 “-fno-elide-constructors” 取消GNU g++优化</p><p><u>对windows vs编译器cl.exe无效，VS Debug执行RVO，Release执行NRVO</u></p><p>RVO（Return Value Optimization）:消除函数返回时创建的临时对象 </p><p>NRVO(Named Return Value Optimization)：属于 RVO 的一种技术, 直接将要初始化的对象替代掉返回的局部对象进行操作。</p></blockquote><p><img src="/../images/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96.jpg" alt="返回值优化"></p><p><strong>非成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义非成员函数进行 + 重载</span></span><br><span class="line">Test2 <span class="keyword">operator</span>+(<span class="keyword">const</span> Test2&amp; t21, <span class="keyword">const</span> Test2&amp; t22) &#123;</span><br><span class="line">Test2 t;</span><br><span class="line">t.i = t21.i + t22.i;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test2 t21;</span><br><span class="line">Test2 t22;</span><br><span class="line">t21.i = <span class="number">100</span>;</span><br><span class="line">t22.i = <span class="number">200</span>;</span><br><span class="line">Test2 t23 = t21 + t22;</span><br><span class="line">cout &lt;&lt; t23.i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><blockquote><p>允许重载的运算符</p></blockquote><table><thead><tr><th>类型</th><th>运算符</th></tr></thead><tbody><tr><td>关系运算符</td><td>&#x3D;&#x3D;(等于)，!&#x3D; (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;&#x3D;(小于等于)，&gt;&#x3D;(大于等于)</td></tr><tr><td>逻辑运算符</td><td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>&#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D; , % &#x3D; , &amp;&#x3D;, |&#x3D;, ^&#x3D;, &lt;&lt;&#x3D;, &gt;&gt;&#x3D;</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td>()(函数调用)，-&gt;(成员访问)，,(逗号)，<a href="%E4%B8%8B%E6%A0%87"></a></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新的new:&quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//释放由p指向的存储空间</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新的delete&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，用户定义的类型。 </summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c++-c++基础</title>
    <link href="http://example.com/2022/06/19/c-c-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/06/19/c-c-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-06-18T23:59:28.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c与c-兼容"><a href="#c与c-兼容" class="headerlink" title="c与c++兼容"></a>c与c++兼容</h2><p><strong>c当中大部分代码都可以在c++中使用</strong></p><p><strong>在c++中调用c代码，要使用extern “C”{}</strong></p><p>为什么？</p><p>写两个一样内容的一个是c文件一个是cpp文件</p><p>a.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a.cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c -o ac.o</span><br><span class="line">gcc a.cpp -o acpp.o</span><br></pre></td></tr></table></figure><p>分别进行编译</p><p>得到ac.o 和acpp.o两个文件</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -A ac.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220619094731846.png" alt="image-20220619094731846"></p><p>我们看到 test编译后的符号表 还是test</p><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -A acpp.o</span><br></pre></td></tr></table></figure><p>看下按cpp的方式编译后的符号</p><p><img src="/../images/image-20220619094852760.png" alt="image-20220619094852760"></p><p>发现cpp会把参数的类型合并到test上 如果有test(int x,int y) 就是 _Z4testii</p><p>那么在cpp中使用c就出现问题了，如图所示</p><p><img src="/../images/image-20220619095933631.png" alt="image-20220619095933631"></p><p>这就是为什么c++中一旦使用c函数，要使用extern “C” 把头文件进行修饰的原因，统一采用C编码方式</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">change</span>(<span class="keyword">int</span>&amp; j)&#123;</span><br><span class="line">  j = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int&amp; 引用类型 和java很像</span></span><br><span class="line"><span class="comment">//10 这个内存地址 给了个别名j</span></span><br><span class="line"><span class="keyword">int</span>&amp; j = i;</span><br><span class="line"><span class="comment">//调用change后 j的内存地址上存的值会改变 和指针很像</span></span><br><span class="line"><span class="built_in">change</span>(j);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="c中的字符串"><a href="#c中的字符串" class="headerlink" title="c中的字符串"></a>c中的字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c 使用NULL \0结尾的一个字符数组</span></span><br><span class="line"><span class="keyword">char</span> str1[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> *str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//默认给我们添加了\0 这两种都可以称为c风格的字符串</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>strcpy(s1, s2);</td><td>复制字符串 s2 到字符串 s1。</td></tr><tr><td>strcat(s1, s2);</td><td>连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td>strlen(s1);</td><td>返回字符串 s1 的长度。</td></tr><tr><td>strcmp(s1, s2);</td><td>如果 s1 和 s2 相同，则返回 0；如果 s1 &lt; s2 则返回小于0；如果 s1&gt;s2 则返回大于0</td></tr><tr><td>strchr(s1, ch);</td><td>返回指向字符串 s1 中字符 ch 的第一次出现的位置的指针。</td></tr><tr><td>strstr(s1, s2);</td><td>返回指向字符串 s1 中字符串 s2 的第一次出现的位置的指针。</td></tr></tbody></table><blockquote><p>说明：strcmp:两个字符串自左向右逐个字符相比（按ASCII值大小相比较） </p></blockquote><h2 id="c-string"><a href="#c-string" class="headerlink" title="c++ string"></a>c++ string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//都会创建一个c++类型的对象</span></span><br><span class="line">string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(str1)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;天之道&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//申请内存 调用 构造方法</span></span><br><span class="line">string *str4 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;88&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">delete</span> str4;</span><br><span class="line">str4 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//malloc = free</span></span><br><span class="line"><span class="comment">//new = delete</span></span><br><span class="line"><span class="comment">//new 数组 = delete[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接字符串</span></span><br><span class="line"><span class="comment">//+ 操作符重载：重新定义 + - * /的行为</span></span><br><span class="line">string str5 = str1 + str3;</span><br><span class="line"><span class="comment">//跟java一样，string是一个对象</span></span><br><span class="line">str1.<span class="built_in">append</span>(str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string是对象 不能直接打印 要先获得c风格的字符串</span></span><br><span class="line">cout &lt;&lt; str1.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">size</span>();</span><br><span class="line">str1.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针就不能用.了 要用-&gt;</span></span><br><span class="line"><span class="comment">//用指针有什么好处</span></span><br><span class="line"><span class="comment">//1.出方法，清理栈</span></span><br><span class="line"><span class="comment">//2.指针 占用字节小 指针是地址 用指针传输效率髚 </span></span><br><span class="line">str4-&gt;<span class="built_in">c_str</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>相当于java的包</p><p>using namespace std;</p><p>不加这个就要</p><p>std::cout 要用域作用名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个自己的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> A&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B&#123;</span><br><span class="line">  <span class="keyword">namespace</span> C&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//::域作用符</span></span><br><span class="line">A::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//就像包名一层层嵌套  using namespace A::B</span></span><br><span class="line">A::B::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ii;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">  ii = <span class="number">11</span>;</span><br><span class="line">  <span class="keyword">int</span> ii = <span class="number">10</span>;</span><br><span class="line">  cout &lt;&lt; ii &lt;&lt; endl;s</span><br><span class="line">  <span class="comment">//操作重名的全局变量的时候 可以使用域作用符</span></span><br><span class="line">  cout &lt;&lt; ::ii &lt;&lt; endl;</span><br><span class="line">  ::ii = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>像java的包名一样，可以避免同名同参数的函数</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c与c-兼容&quot;&gt;&lt;a href=&quot;#c与c-兼容&quot; class=&quot;headerlink&quot; title=&quot;c与c++兼容&quot;&gt;&lt;/a&gt;c与c++兼容&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;c当中大部分代码都可以在c++中使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c语言-结构体、共用体</title>
    <link href="http://example.com/2022/06/19/c%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E5%85%B1%E7%94%A8%E4%BD%93/"/>
    <id>http://example.com/2022/06/19/c%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E5%85%B1%E7%94%A8%E4%BD%93/</id>
    <published>2022-06-18T23:23:02.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>类似于javabean</p><p>结构体当中默认都是public</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct 结构体 java class </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">short</span> j;</span><br><span class="line">&#125;s1,s2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">People</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">&#125;People;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student</span>;</span></span><br><span class="line"></span><br><span class="line">  student.i = <span class="number">10</span>;</span><br><span class="line">  student.j = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  People people;</span><br><span class="line">  people.i = <span class="number">30</span>;</span><br><span class="line">  people.j = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>c++中结构体是一种类型，可以直接 Student student;这么定义，但在c中，要用struct关键字 </p><p>struct Student student;除非使用typedef</p></blockquote><h3 id="结构体字节对齐"><a href="#结构体字节对齐" class="headerlink" title="结构体字节对齐"></a>结构体字节对齐</h3><h4 id="自然对齐："><a href="#自然对齐：" class="headerlink" title="自然对齐："></a>自然对齐：</h4><p>1.某一个变量 保存的内存地址的开始位置需要相对于结构体开始位置的偏移是这个变量字节数的整数倍开发</p><p>比如</p><p>int 4  </p><p>保存4这个int 要以 0x00 0x04 0x08 开始</p><p>2.结构体所占的字节 是结构体中最长变量所占字节的整数倍</p><p>所以就算存出了10个字节的，如果里面有int 10不是4的整数倍，要补齐所以是12</p><h4 id="预处理器设置对齐"><a href="#预处理器设置对齐" class="headerlink" title="预处理器设置对齐"></a>预处理器设置对齐</h4><p>不同平台设置方式不同 只能传的是2的倍数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2) <span class="comment">//windows</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct2</span>&#123;</span></span><br><span class="line"><span class="keyword">short</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">  <span class="keyword">short</span> k;</span><br><span class="line">&#125; __attribut__((aligned(<span class="number">2</span>),packed)) <span class="comment">//这是linux mac上的设置方式</span></span><br></pre></td></tr></table></figure><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p>内存复用，不再使用，节省内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在相同的内存位置存储不同的数据</span></span><br><span class="line"><span class="comment">//共用体 最大成员的字节大小</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">MyUnion</span>&#123;</span></span><br><span class="line">  <span class="keyword">short</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">MyUnion</span> <span class="title">mu</span>;</span></span><br><span class="line">  mu.i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//给j赋值，会覆盖i的值</span></span><br><span class="line">  mu.j = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main i的地址:%#x,j的地址:%#x\n&quot;</span>,&amp;mu.i,&amp;mu.j);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在内存中i和j的地址是一样的，所以  main i的地址:0xe8ee6640,j的地址:0xe8ee6640</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h2&gt;&lt;p&gt;类似于javabean&lt;/p&gt;
&lt;p&gt;结构体当中默认都是public&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>linux-进程创建与进程管理</title>
    <link href="http://example.com/2022/06/19/linux-%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>http://example.com/2022/06/19/linux-%E8%BF%9B%E7%A8%8B%E5%88%9B%E5%BB%BA%E4%B8%8E%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2022-06-18T20:16:51.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PCB进程操作块"><a href="#PCB进程操作块" class="headerlink" title="PCB进程操作块"></a>PCB进程操作块</h2><p>PCB本质就是一个结构体</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span>&#123;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="comment">//进程id</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//文件描述符</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//进程的状态：初始态、就绪态、运行态、挂起态(多个进程切换，同时执行)、终止态</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//进程工作目录</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//信号相关信息资源</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//用户id组id</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a>内存映射</h2><p>用户空间映射时会映射到不同的区域，但会隔离</p><p>pcb 内核空间映射到同一区域不同地方，但没有隔离</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PCB进程操作块&quot;&gt;&lt;a href=&quot;#PCB进程操作块&quot; class=&quot;headerlink&quot; title=&quot;PCB进程操作块&quot;&gt;&lt;/a&gt;PCB进程操作块&lt;/h2&gt;&lt;p&gt;PCB本质就是一个结构体&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>系统调用及文件IO</title>
    <link href="http://example.com/2022/06/18/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/"/>
    <id>http://example.com/2022/06/18/%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8/</id>
    <published>2022-06-18T11:52:54.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么叫系统调用？"><a href="#什么叫系统调用？" class="headerlink" title="什么叫系统调用？"></a>什么叫系统调用？</h2><p>3-4G是内核的空间，这部分是由操作系统来管理，那么如果我们要操作这部分数据，只能借助系统提供的一些函数(系统函数),用户调用这些函数就称之为系统调用。</p><h2 id="系统函数查询"><a href="#系统函数查询" class="headerlink" title="系统函数查询"></a>系统函数查询</h2><p>通过man命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 2 xxx(open)</span><br></pre></td></tr></table></figure><blockquote><p>man 2 查询的是系统函数  如果man 2 查不到就去man 3查询</p></blockquote><h2 id="文件拷贝范例"><a href="#文件拷贝范例" class="headerlink" title="文件拷贝范例"></a>文件拷贝范例</h2><h3 id="使用普通函数"><a href="#使用普通函数" class="headerlink" title="使用普通函数"></a>使用普通函数</h3><p>f_get_put.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">        FILE *rfp = <span class="literal">NULL</span>;</span><br><span class="line">        FILE *wfp = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//open the file</span></span><br><span class="line">        rfp = <span class="built_in">fopen</span>(argv[<span class="number">1</span>],<span class="string">&quot;r&quot;</span>);</span><br><span class="line">        wfp = <span class="built_in">fopen</span>(argv[<span class="number">2</span>],<span class="string">&quot;w&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//check the file is open successfully</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == rfp)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Open the %s is error!\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">NULL</span> == wfp)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Open the %s is error!\n&quot;</span>,argv[<span class="number">1</span>]);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//read the file and save the char to the target file</span></span><br><span class="line">        <span class="comment">//define the char val,use to open and receive file content</span></span><br><span class="line">        <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((ch = <span class="built_in">fgetc</span>(rfp))!=EOF)&#123;</span><br><span class="line">                <span class="built_in">fputc</span>(ch,wfp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;the file copy complete!\n&quot;</span>);</span><br><span class="line">        <span class="comment">//close the file</span></span><br><span class="line">        <span class="built_in">fclose</span>(rfp);</span><br><span class="line">        <span class="built_in">fclose</span>(wfp);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc f_get_put.cpp -o f_get_put</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意argv[1] argv[2] 分别对应两个参数  argv[0] 是f_get_put本身</span></span><br><span class="line">./f_get_put xxx.txt xxx.txt</span><br></pre></td></tr></table></figure><h3 id="使用系统函数"><a href="#使用系统函数" class="headerlink" title="使用系统函数"></a>使用系统函数</h3><p>f_read_write.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">const</span> <span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> fd1,fd2,flag;</span><br><span class="line">        <span class="keyword">char</span> buffer[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        fd1 = <span class="built_in">open</span>(argv[<span class="number">1</span>],O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123; <span class="comment">//open the file fail,return the error</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s:%s\n&quot;</span>,<span class="built_in">strerror</span>(errno),argv[<span class="number">1</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fd2 = <span class="built_in">open</span>(argv[<span class="number">2</span>],O_WRONLY|O_CREAT,S_IRUSR|S_IWUSR);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == fd2)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>((flag = <span class="built_in">read</span>(fd1,buffer,<span class="number">1</span>))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">write</span>(fd2,buffer,flag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">close</span>(fd1);</span><br><span class="line">        <span class="built_in">close</span>(fd2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc f_read_write.cpp -o f_read_write</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意argv[1] argv[2] 分别对应两个参数  argv[0] 是f_get_put本身</span></span><br><span class="line">./f_read_write xxx.txt xxx.txt</span><br></pre></td></tr></table></figure><p>查看具体执行过程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strace ./f_read_write</span><br></pre></td></tr></table></figure><h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;error.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isdir</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fileName)</span></span>&#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">buf</span>;</span></span><br><span class="line">        <span class="built_in">stat</span>(fileName,&amp;buf);</span><br><span class="line">        <span class="keyword">mode_t</span> st_mode = buf.st_mode;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">S_ISDIR</span>(st_mode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//open the dir</span></span><br><span class="line">        DIR *dir = <span class="built_in">opendir</span>(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">if</span>(dir == <span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="built_in">perror</span>(<span class="string">&quot;open dir fail&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span>* <span class="title">dirp</span>;</span></span><br><span class="line">        <span class="keyword">while</span>((dirp = <span class="built_in">readdir</span>(dir)) != <span class="literal">NULL</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s\t is dir ? -&gt; %d\n&quot;</span>,dirp-&gt;d_name,<span class="built_in">isdir</span>(dirp-&gt;d_name));</span><br><span class="line"><span class="comment">//这里可以进行递归的遍历操作，判断是不是文件目录</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么叫系统调用？&quot;&gt;&lt;a href=&quot;#什么叫系统调用？&quot; class=&quot;headerlink&quot; title=&quot;什么叫系统调用？&quot;&gt;&lt;/a&gt;什么叫系统调用？&lt;/h2&gt;&lt;p&gt;3-4G是内核的空间，这部分是由操作系统来管理，那么如果我们要操作这部分数据，只能借助系统提</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>动态库与静态库</title>
    <link href="http://example.com/2022/06/18/%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>http://example.com/2022/06/18/%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93/</id>
    <published>2022-06-18T11:47:25.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><p><strong>静态库</strong>：其实是内容的拷贝，运行阶段没有.a文件也是可以执行的。</p></li><li><p><strong>动态库</strong>：不会拷贝内容，运行阶段起的作用(加载)，生成so的时候要生成与位置无关的的代码。</p></li></ul><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="静态库的生成"><a href="#静态库的生成" class="headerlink" title="静态库的生成"></a>静态库的生成</h3><h4 id="1-将c生成-o-省略4步"><a href="#1-将c生成-o-省略4步" class="headerlink" title="1.将c生成.o(省略4步)"></a>1.将c生成.o(省略4步)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o</span><br></pre></td></tr></table></figure><h4 id="2-使用ar工具制作静态库"><a href="#2-使用ar工具制作静态库" class="headerlink" title="2.使用ar工具制作静态库"></a>2.使用ar工具制作静态库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ar rcs libmath.a add.o sub.o ....</span><br></pre></td></tr></table></figure><h4 id="3-编译静态库到可执行文件"><a href="#3-编译静态库到可执行文件" class="headerlink" title="3.编译静态库到可执行文件"></a>3.编译静态库到可执行文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c libmath.a -o a</span><br></pre></td></tr></table></figure><h3 id="动态库生成"><a href="#动态库生成" class="headerlink" title="动态库生成"></a>动态库生成</h3><h4 id="1-将c生成-o-要生成与位置无关的代码"><a href="#1-将c生成-o-要生成与位置无关的代码" class="headerlink" title="1.将c生成.o(要生成与位置无关的代码)"></a>1.将c生成.o(要生成与位置无关的代码)</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c add.c -o add.o-fPIC </span><br></pre></td></tr></table></figure><h4 id="2-使用gcc-shared制作动态库"><a href="#2-使用gcc-shared制作动态库" class="headerlink" title="2.使用gcc -shared制作动态库"></a>2.使用gcc -shared制作动态库</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libmath.so add.o xxx.o ....</span><br></pre></td></tr></table></figure><h4 id="3-编译动态库到可执行文件，需要指定动态库的名称-l，指定库路径-L"><a href="#3-编译动态库到可执行文件，需要指定动态库的名称-l，指定库路径-L" class="headerlink" title="3.编译动态库到可执行文件，需要指定动态库的名称-l，指定库路径 -L"></a>3.编译动态库到可执行文件，需要指定动态库的名称-l，指定库路径 -L</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c -o a -l 名称 -L 路径</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;静态库&lt;/strong&gt;：其实是内容的拷贝，运行阶段没有.a文件也是可以执行的。&lt;/p&gt;
&lt;/li&gt;
&lt;l</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>gcc编译四个步骤</title>
    <link href="http://example.com/2022/06/18/gcc%E7%BC%96%E8%AF%91%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/"/>
    <id>http://example.com/2022/06/18/gcc%E7%BC%96%E8%AF%91%E5%9B%9B%E4%B8%AA%E6%AD%A5%E9%AA%A4/</id>
    <published>2022-06-18T11:43:15.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="gcc编译步骤"><a href="#gcc编译步骤" class="headerlink" title="gcc编译步骤"></a>gcc编译步骤</h2><p><strong>1.预处理 宏展开 展开include文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E -o a.i a.c</span><br></pre></td></tr></table></figure><p><strong>2.预编译 gcc才会检测代码的规范性，语法是否有错误 gcc 会把代码翻译成汇编</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S -o a.s a.i</span><br></pre></td></tr></table></figure><p><strong>3.汇编阶段 得到汇编的文件</strong></p><p>把.s文件翻译成二进制.o文件(机器的指令) ,文本打开的是乱码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o a.o a.s</span><br></pre></td></tr></table></figure><p><strong>4.链接阶段</strong></p><p>计算逻辑地址，合并数据段 有些函数是在另外一个so  -o 链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o a a.o</span><br></pre></td></tr></table></figure><h2 id="一步编译为可以运行的可执行文件"><a href="#一步编译为可以运行的可执行文件" class="headerlink" title="一步编译为可以运行的可执行文件"></a>一步编译为可以运行的可执行文件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c/a.cpp -o a</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;gcc编译步骤&quot;&gt;&lt;a href=&quot;#gcc编译步骤&quot; class=&quot;headerlink&quot; title=&quot;gcc编译步骤&quot;&gt;&lt;/a&gt;gcc编译步骤&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.预处理 宏展开 展开include文件&lt;/strong&gt;&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    <category term="linux" scheme="http://example.com/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>JNI 如何实现数据传递?</title>
    <link href="http://example.com/2022/06/05/JNI-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/"/>
    <id>http://example.com/2022/06/05/JNI-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%92/</id>
    <published>2022-06-05T08:45:53.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/image-20220605164700518.png" alt="image-20220605164700518"></p><p><img src="/../images/image-20220605164745282.png" alt="image-20220605164745282"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/image-20220605164700518.png&quot; alt=&quot;image-20220605164700518&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../images/image-20220605164745282.png&quot;</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>Java Native 方法与 Native 函数是怎么绑定的</title>
    <link href="http://example.com/2022/06/05/Java-Native-%E6%96%B9%E6%B3%95%E4%B8%8E-Native-%E5%87%BD%E6%95%B0%E6%98%AF%E6%80%8E%E4%B9%88%E7%BB%91%E5%AE%9A%E7%9A%84/"/>
    <id>http://example.com/2022/06/05/Java-Native-%E6%96%B9%E6%B3%95%E4%B8%8E-Native-%E5%87%BD%E6%95%B0%E6%98%AF%E6%80%8E%E4%B9%88%E7%BB%91%E5%AE%9A%E7%9A%84/</id>
    <published>2022-06-05T08:28:04.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>静态绑定：通过命名规则映射</li><li>动态绑定：通过JNI函数的注册</li></ul><p><img src="/../images/image-20220605162943139.png" alt="image-20220605162943139"></p><h2 id="静态绑定"><a href="#静态绑定" class="headerlink" title="静态绑定"></a>静态绑定</h2><p><img src="/../images/image-20220605163312911.png" alt="image-20220605163312911"></p><p>包名——类名——方法名  一一对应</p><p><img src="/../images/image-20220605163533987.png" alt="image-20220605163533987"></p><p>extern “C” 告诉编译器，以c的方式去保留这一名称，这个是要在符号表中直接保留原名，而不是写了什么就是什么，必须在符号表中有对应关系</p><h2 id="动态绑定"><a href="#动态绑定" class="headerlink" title="动态绑定"></a>动态绑定</h2><p><img src="/../images/image-20220605163933044.png" alt="image-20220605163933044"></p><ul><li>一般动态绑定在JNi_onLoad里触发</li><li>动态绑定可以在任何时刻触发</li><li>动态绑定之前根据静态规则查找Native函数</li><li>动态绑定可以在绑定后的任意时刻取消</li></ul><h2 id="动态绑定与静态绑定对比"><a href="#动态绑定与静态绑定对比" class="headerlink" title="动态绑定与静态绑定对比"></a>动态绑定与静态绑定对比</h2><p><img src="/../images/image-20220605164152912.png" alt="image-20220605164152912"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;静态绑定：通过命名规则映射&lt;/li&gt;
&lt;li&gt;动态绑定：通过JNI函数的注册&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;/../images/image-20220605162943139.png&quot; alt=&quot;image-20220605162943139</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>CPU架构适配需要注意哪些问题</title>
    <link href="http://example.com/2022/06/05/CPU%E6%9E%B6%E6%9E%84%E9%80%82%E9%85%8D%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/06/05/CPU%E6%9E%B6%E6%9E%84%E9%80%82%E9%85%8D%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E9%97%AE%E9%A2%98/</id>
    <published>2022-06-05T08:04:16.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常见的CPU的架构都有哪些"><a href="#常见的CPU的架构都有哪些" class="headerlink" title="常见的CPU的架构都有哪些"></a>常见的CPU的架构都有哪些</h2><ul><li><p>mips64</p></li><li><p>mips</p></li><li><p>x86_64</p></li><li><p>x86</p></li><li><p>arm64-v8a</p></li><li><p>armeabi-v7a</p></li><li><p>armeabi</p></li></ul><p><img src="/../images/image-20220605160541265.png" alt="image-20220605160541265"></p><p>其中mips64 mips不常见，已经被废弃，最常见的就是arm64-v8a、armeabi-v7a、armeabi 这三种</p><h2 id="CPU的架构的兼容性"><a href="#CPU的架构的兼容性" class="headerlink" title="CPU的架构的兼容性"></a>CPU的架构的兼容性</h2><p><img src="/../images/image-20220605160804095.png" alt="image-20220605160804095"></p><p>这个图的意思是armeabi 可以在armeabi-v7a 和 arm64-v8a上的机器上跑，它的兼容性最好，同时armeabi也可以在x86及x86_64的机器上跑，</p><p>而armeabi-v7a可以在arm64-v8a的机器上跑。</p><h2 id="Native库加载"><a href="#Native库加载" class="headerlink" title="Native库加载"></a>Native库加载</h2><p>一个arm64-v8a的机器上加载so库怎么加载，优先去自己的arm64-v8a上加载</p><p><img src="/../images/image-20220605161132759.png" alt="image-20220605161132759"></p><p>如果没有libui.so 而只有libmath.so 会发生什么呢？</p><p>它还是会去arm64-v8a下面找，没找到会报错，没错，是报错，而不是去它兼容的上一级去找，所以提供so的时候一定是一套，而不能缺少，要不就一个都不提供，那它才会去对应的次一级平台文件中建找</p><p><img src="/../images/image-20220605161347483.png" alt="image-20220605161347483"></p><p><img src="/../images/image-20220605161421666.png" alt="image-20220605161421666"></p><blockquote><p>可以动态的根据平台去加载某个库是v8a 而把它们全放在v7a的目录下，这样有一些库性能不敏感可以只加载v7a的，如果性能敏感就加载v8a的，微信就是这么干的</p></blockquote><p><img src="/../images/image-20220605161924758.png" alt="image-20220605161924758"></p><h2 id="动态加载Native库"><a href="#动态加载Native库" class="headerlink" title="动态加载Native库"></a>动态加载Native库</h2><p>非启动的加载库可云端下发</p><p><img src="/../images/image-20220605162116235.png" alt="image-20220605162116235"></p><h2 id="优化so体积"><a href="#优化so体积" class="headerlink" title="优化so体积"></a>优化so体积</h2><p><img src="/../images/image-20220605162231427.png" alt="image-20220605162231427"></p><h2 id="构建时分包"><a href="#构建时分包" class="headerlink" title="构建时分包"></a>构建时分包</h2><p><img src="/../images/image-20220605162318324.png" alt="image-20220605162318324"></p><h2 id="sdk开发者注意什么"><a href="#sdk开发者注意什么" class="headerlink" title="sdk开发者注意什么"></a>sdk开发者注意什么</h2><p><img src="/../images/image-20220605162434326.png" alt="image-20220605162434326"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="/../images/image-20220605162706767.png" alt="image-20220605162706767"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常见的CPU的架构都有哪些&quot;&gt;&lt;a href=&quot;#常见的CPU的架构都有哪些&quot; class=&quot;headerlink&quot; title=&quot;常见的CPU的架构都有哪些&quot;&gt;&lt;/a&gt;常见的CPU的架构都有哪些&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;mips64&lt;/p&gt;
&lt;/li&gt;
</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>基于RecyclerViewDiffUtilsDatabinding-Starter应用，学习DiffUtils和Databinding的使用</title>
    <link href="http://example.com/2022/05/25/%E5%9F%BA%E4%BA%8ERecyclerViewDiffUtilsDatabinding-Starter%E5%BA%94%E7%94%A8%EF%BC%8C%E5%AD%A6%E4%B9%A0DiffUtils%E5%92%8CDatabinding%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://example.com/2022/05/25/%E5%9F%BA%E4%BA%8ERecyclerViewDiffUtilsDatabinding-Starter%E5%BA%94%E7%94%A8%EF%BC%8C%E5%AD%A6%E4%B9%A0DiffUtils%E5%92%8CDatabinding%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2022-05-25T05:24:47.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="开始学习"><a href="#开始学习" class="headerlink" title="开始学习"></a>开始学习</h2><p>看下<code>SleepNightAdapter.kt</code>文件</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepNightAdapter</span>: <span class="type">RecyclerView.Adapter</span>&lt;<span class="type">SleepNightAdapter.ViewHolder</span>&gt;</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">data</span> =  listOf&lt;SleepNight&gt;()</span><br><span class="line">        <span class="keyword">set</span>(value) &#123;</span><br><span class="line">            field = value</span><br><span class="line">            notifyDataSetChanged()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemCount</span><span class="params">()</span></span> = <span class="keyword">data</span>.size</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> item = <span class="keyword">data</span>[position]</span><br><span class="line">        holder.bind(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">        <span class="keyword">return</span> ViewHolder.from(parent)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(itemView: View) : RecyclerView.ViewHolder(itemView)&#123;</span><br><span class="line">        <span class="keyword">val</span> sleepLength: TextView = itemView.findViewById(R.id.sleep_length)</span><br><span class="line">        <span class="keyword">val</span> quality: TextView = itemView.findViewById(R.id.quality_string)</span><br><span class="line">        <span class="keyword">val</span> qualityImage: ImageView = itemView.findViewById(R.id.quality_image)</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(item: <span class="type">SleepNight</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">val</span> res = itemView.context.resources</span><br><span class="line">            sleepLength.text = convertDurationToFormatted(item.startTimeMilli, item.endTimeMilli, res)</span><br><span class="line">            quality.text = convertNumericQualityToString(item.sleepQuality, res)</span><br><span class="line">            qualityImage.setImageResource(<span class="keyword">when</span> (item.sleepQuality) &#123;</span><br><span class="line">                <span class="number">0</span> -&gt; R.drawable.ic_sleep_0</span><br><span class="line">                <span class="number">1</span> -&gt; R.drawable.ic_sleep_1</span><br><span class="line">                <span class="number">2</span> -&gt; R.drawable.ic_sleep_2</span><br><span class="line">                <span class="number">3</span> -&gt; R.drawable.ic_sleep_3</span><br><span class="line">                <span class="number">4</span> -&gt; R.drawable.ic_sleep_4</span><br><span class="line">                <span class="number">5</span> -&gt; R.drawable.ic_sleep_5</span><br><span class="line">                <span class="keyword">else</span> -&gt; R.drawable.ic_sleep_active</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">            <span class="function"><span class="keyword">fun</span> <span class="title">from</span><span class="params">(parent: <span class="type">ViewGroup</span>)</span></span>: ViewHolder &#123;</span><br><span class="line">                <span class="keyword">val</span> layoutInflater = LayoutInflater.from(parent.context)</span><br><span class="line">                <span class="keyword">val</span> view = layoutInflater</span><br><span class="line">                        .inflate(R.layout.list_item_sleep_night, parent, <span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> ViewHolder(view)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220525132631228.png" alt="image-20220525132631228"></p><ul><li>应用根据用户输入创建 <code>SleepNight</code> 对象列表。每个 <code>SleepNight</code> 对象表示一个夜晚以及用户该晚睡眠的时长和质量。</li><li><code>SleepNightAdapter</code> 会将 <code>SleepNight</code> 对象的列表调整为 <code>RecyclerView</code> 可以使用和显示的内容。</li><li><code>SleepNightAdapter</code> 适配器会生成 <code>ViewHolders</code>，其中包含 RecyclerView 用于显示数据的视图、数据和元数据信息。</li><li><code>RecyclerView</code> 使用 <code>SleepNightAdapter</code> 来确定要显示的项数 (<code>getItemCount()</code>)。<code>RecyclerView</code> 使用 <code>onCreateViewHolder()</code> 和 <code>onBindViewHolder()</code> 获取与要显示的数据绑定的 ViewHolder。</li></ul><h3 id="notifyDataSetChanged-方法效率低下"><a href="#notifyDataSetChanged-方法效率低下" class="headerlink" title="notifyDataSetChanged() 方法效率低下"></a>notifyDataSetChanged() 方法效率低下</h3><p>为了告知 <code>RecyclerView</code> 列表中的某个项已更改且需要更新，当前代码会在 <code>SleepNightAdapter</code> 中调用 <a href="https://developer.android.com/reference/android/widget/BaseAdapter"><code>notifyDataSetChanged()</code></a>，如下所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">data</span> =  listOf&lt;SleepNight&gt;()</span><br><span class="line">   <span class="keyword">set</span>(value) &#123;</span><br><span class="line">       field = value</span><br><span class="line">       notifyDataSetChanged()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>但是，<code>notifyDataSetChanged()</code> 会告知 <code>RecyclerView</code> 整个列表可能无效。因此，<code>RecyclerView</code> 会重新绑定并重新绘制列表中的每个项，<strong>包括屏幕上看不到的项</strong>。这是一项既繁重又不必要的工作。对于较大或复杂的列表，这个过程可能需要较长时间，<strong>以至于在用户滚动浏览列表时，屏幕会闪烁或卡顿。</strong></p><p>要解决此问题，您可以确切地告诉 <code>RecyclerView</code> 发生了什么更改。然后，<code>RecyclerView</code> 便可仅更新屏幕上已经发生更改的视图。</p><p><code>RecyclerView</code> 拥有一个用于更新单个元素的功能丰富的 API。您可以使用 <a href="https://developer.android.com/reference/android/support/v7/widget/RecyclerView.Adapter#notifyitemchanged"><code>notifyItemChanged()</code></a> 告知 <code>RecyclerView</code> 某个项发生了更改，并且您可以对添加、移除或移动的项使用类似的函数。您可以全部手动完成，但这样任务就会很繁重，并且可能需要使用大量代码。</p><p>幸运的是，我们有一个更好的办法。</p><h3 id="DiffUtil-很高效并可为您完成繁重工作"><a href="#DiffUtil-很高效并可为您完成繁重工作" class="headerlink" title="DiffUtil 很高效并可为您完成繁重工作"></a>DiffUtil 很高效并可为您完成繁重工作</h3><p><code>RecyclerView</code> 有一个名为 <code>DiffUtil</code> 的类，用于计算两个列表之间的差异。<code>DiffUtil</code> 会接受一个旧列表和一个新列表，并确定二者有何不同。它会查找已添加、移除或更改的项。然后，它会使用一种算法（名为 <a href="https://en.wikipedia.org/wiki/Diff">Eugene W. Myers 差分算法</a>），来确定要生成新列表，需要对旧列表做出的最小更改量。</p><p>在 <code>DiffUtil</code> 确定了更改内容后，<code>RecyclerView</code> 可以根据这些信息仅更新已更改、添加、移除或移动的项，这比重做整个列表要高效得多。</p><h2 id="使用DiffUtil刷新列表内容"><a href="#使用DiffUtil刷新列表内容" class="headerlink" title="使用DiffUtil刷新列表内容"></a>使用DiffUtil刷新列表内容</h2><h3 id="第-1-步：实现-SleepNightDiffCallback"><a href="#第-1-步：实现-SleepNightDiffCallback" class="headerlink" title="第 1 步：实现 SleepNightDiffCallback"></a>第 1 步：实现 SleepNightDiffCallback</h3><p>为了使用 <code>DiffUtil</code> 类的功能，请扩展 <code>DiffUtil.ItemCallback</code>。</p><p>1.打开 <code>SleepNightAdapter.kt</code>。</p><p>2.在 <code>SleepNightAdapter</code> 的完整类定义下方，创建一个名为 <code>SleepNightDiffCallback</code> 的新顶级类，用于扩展 <code>DiffUtil.ItemCallback</code>。以通用参数的形式传递 <code>SleepNight</code>。</p><p>3.将光标放在 <code>SleepNightDiffCallback</code> 类名称上。</p><p>4.<code>Alt+Enter</code>（在 Mac 上，按 <code>Option+Enter</code>）并选择 <strong>Implement Members</strong>。</p><p>5.在打开的对话框中，按住 Shift 键并点击鼠标左键以选择 <code>areItemsTheSame()</code> 和 <code>areContentsTheSame()</code> 方法，然后点击 <strong>OK</strong>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepNightDiffCallback</span> : <span class="type">DiffUtil.ItemCallback</span>&lt;<span class="type">SleepNight</span>&gt;</span>() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此操作会针对这两个方法在 <code>SleepNightDiffCallback</code> 中生成桩，如下所示。<code>DiffUtil</code> 使用这两种方法来确定列表和项的具体更改。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    TODO(<span class="string">&quot;not implemented&quot;</span>) <span class="comment">//To change body of created functions use File | Settings | File Templates.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">areContentsTheSame</span><span class="params">(oldItem: <span class="type">SleepNight</span>, newItem: <span class="type">SleepNight</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">    TODO(<span class="string">&quot;not implemented&quot;</span>) <span class="comment">//To change body of created functions use File | Settings | File Templates.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.在 <code>areItemsTheSame()</code> 中，将 <code>TODO</code> 替换为用于测试两个传入 <code>SleepNight</code> 项 <code>oldItem</code> 和 <code>newItem</code> 是否相同的代码。如果这两个项具有相同的 <code>nightId</code>，则表明它们是相同的，因此返回 <code>true</code>。否则返回 <code>false</code>。<code>DiffUtil</code> 使用此测试来帮助发现是否已添加、移除或移动某个项。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">areItemsTheSame</span><span class="params">(oldItem: <span class="type">SleepNight</span>, newItem: <span class="type">SleepNight</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> oldItem.nightId == newItem.nightId</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.在 <code>areContentsTheSame()</code> 中，检查 <code>oldItem</code> 和 <code>newItem</code> 是否包含相同的数据；即判断它们是否相等。由于 <code>SleepNight</code> 是一个数据类，<strong>此相等性检查将检查所有字段</strong>。<code>Data</code> 类会自动为您定义 <code>equals</code> 和一些其他方法。如果 <code>oldItem</code> 和 <code>newItem</code> 之间存在差异，此代码会告知 <code>DiffUtil</code> 相应项已更新。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">areContentsTheSame</span><span class="params">(oldItem: <span class="type">SleepNight</span>, newItem: <span class="type">SleepNight</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> oldItem == newItem</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用ListAdapter管理列表"><a href="#使用ListAdapter管理列表" class="headerlink" title="使用ListAdapter管理列表"></a>使用ListAdapter管理列表</h2><p>通常使用 <code>RecyclerView</code> 来显示会发生变化的列表。<code>RecyclerView</code> 提供适配器类 <code>ListAdapter</code>，可帮助您构建由列表支持的 <code>RecyclerView</code> 适配器。</p><p><code>ListAdapter</code> 会为您跟踪列表，并在列表更新时通知适配器。</p><p>1.在 <code>SleepNightAdapter.kt</code> 文件中，更改 <code>SleepNightAdapter</code> 的类签名以扩展 <code>ListAdapter</code>。</p><p>2.如果出现提示，请导入 <code>androidx.recyclerview.widget.ListAdapter</code>。</p><p>3.将 <code>SleepNight</code> 作为第一个参数添加到 <code>ListAdapter</code> 中 <code>SleepNightAdapter.ViewHolder</code> 之前。</p><p>4.将 <code>SleepNightDiffCallback()</code> 作为参数添加到构造函数中。<code>ListAdapter</code> 将利用此参数确定列表中的更改内容。完成后的 <code>SleepNightAdapter</code> 类签名应如下所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SleepNightAdapter</span> : <span class="type">ListAdapter</span>&lt;<span class="type">SleepNight, SleepNightAdapter.ViewHolder</span>&gt;</span>(SleepNightDiffCallback()) &#123;</span><br></pre></td></tr></table></figure><p>5.在 <code>SleepNightAdapter</code> 类中，删除 <code>data</code> 字段，包括 setter。您已不再需要它，因为 <code>ListAdapter</code> 会为您跟踪列表。</p><p>6.删除 <code>getItemCount()</code> 的替换方法，因为 <code>ListAdapter</code> 为您实现了此方法。</p><p>7.如需消除 <code>onBindViewHolder()</code> 中的错误，请更改 <code>item</code> 变量。调用 <code>ListAdapter</code> 提供的 <code>getItem(position)</code> 方法，而不要使用 <code>data</code> 来获取 <code>item</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> item = getItem(position)</span><br></pre></td></tr></table></figure><h3 id="第-2-步：使用-submitList-及时更新列表"><a href="#第-2-步：使用-submitList-及时更新列表" class="headerlink" title="第 2 步：使用 submitList() 及时更新列表"></a>第 2 步：使用 submitList() 及时更新列表</h3><p>在有已更改的列表时，您的代码需要告知 <code>ListAdapter</code>。<code>ListAdapter</code> 提供了一个名为 <code>submitList()</code> 的方法，用于告知 <code>ListAdapter</code> 列表有新版本。调用此方法时，<code>ListAdapter</code> 会将新列表与旧列表进行差异比较，并检测已添加、移除、移动或更改的项。然后，<code>ListAdapter</code> 会更新 <code>RecyclerView</code> 所显示的项。</p><p>1.打开 <code>SleepTrackerFragment.kt</code>。</p><p>2.在 <code>sleepTrackerViewModel</code> 内的观察器上，在 <code>onCreateView()</code> 中找到引用您已删除的 <code>data</code> 变量的错误。</p><p>3.将 <code>adapter.data = it</code> 替换为对 <code>adapter.submitList(it)</code> 的调用。更新后的代码如下所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sleepTrackerViewModel.nights.observe(viewLifecycleOwner, Observer &#123;</span><br><span class="line">   it?.let &#123;</span><br><span class="line">       adapter.submitList(it)</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>4.运行您的应用。您可能需要导入 findNavController。您可能会注意到，您的应用运行速度变快了，然而如果列表太小，这个变化可能不明显。</p><h2 id="将DataBinding与RecyclerView搭配使用"><a href="#将DataBinding与RecyclerView搭配使用" class="headerlink" title="将DataBinding与RecyclerView搭配使用"></a>将DataBinding与RecyclerView搭配使用</h2><p>在此任务中，您需要使用与之前 Codelab 相同的方法来设置数据绑定，并消除对 <code>findViewById()</code> 的调用。</p><h3 id="第-1-步：向布局文件添加数据绑定"><a href="#第-1-步：向布局文件添加数据绑定" class="headerlink" title="第 1 步：向布局文件添加数据绑定"></a>第 1 步：向布局文件添加数据绑定</h3><p>1.在 <strong>Code</strong> 标签页中打开 <code>list_item_sleep_night.xml</code> 布局文件。</p><p>2.将光标放在 <code>ConstraintLayout</code> 标签上，然后按 <code>Alt+Enter</code>（在 Mac 上，按 <code>Option+Enter</code>）。系统随即会打开 intent 菜单（“quick fix”菜单）。</p><p>3.选择 <strong>Convert to data binding layout</strong>。这会将布局封装到 <code>&lt;layout&gt;</code> 中，并在其中添加 <code>&lt;data&gt;</code> 标签。</p><p>4.根据需要滚动回顶部，并在 <code>&lt;data&gt;</code> 标签内声明一个名为 <code>sleep</code> 的变量。</p><p>5.将其 <code>type</code> 设为 <code>SleepNight</code> 的完全限定名称 <code>com.example.android.trackmysleepquality.database.SleepNight</code>。完成后的 <code>&lt;data&gt;</code> 标签应如下所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">data</span>&gt;</span><br><span class="line">     &lt;variable</span><br><span class="line">         name=<span class="string">&quot;sleep&quot;</span></span><br><span class="line">         type=<span class="string">&quot;com.example.android.trackmysleepquality.database.SleepNight&quot;</span>/&gt;</span><br><span class="line"> &lt;/<span class="keyword">data</span>&gt;</span><br></pre></td></tr></table></figure><p>6.如需强制创建 <code>Binding</code> 对象，请依次选择 <strong>Build &gt; Clean Project</strong>，然后依次选择 <strong>Build &gt; Rebuild Project</strong>。（如果仍然存在问题，请依次选择 <strong>File &gt; Invalidate Caches &#x2F; Restart</strong>。）<code>ListItemSleepNightBinding</code> 绑定对象以及相关代码会添加到项目生成的文件中。</p><h3 id="第-2-步：使用数据绑定膨胀项布局"><a href="#第-2-步：使用数据绑定膨胀项布局" class="headerlink" title="第 2 步：使用数据绑定膨胀项布局"></a>第 2 步：使用数据绑定膨胀项布局</h3><p>1.打开 <code>SleepNightAdapter.kt</code>。</p><p>2.在 <code>companion object</code> 中，找到 <code>from(parent: ViewGroup)</code> 函数。</p><p>3.删除 <code>view</code> 变量的声明。</p><p>要<strong>删除</strong>的代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> view = layoutInflater</span><br><span class="line">       .inflate(R.layout.list_item_sleep_night, parent, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>4.在 <code>view</code> 变量所在的位置，定义一个名为 <code>binding</code> 的新变量，以膨胀 <code>ListItemSleepNightBinding</code> 绑定对象，如下所示。根据需要导入绑定对象。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> binding =</span><br><span class="line">ListItemSleepNightBinding.inflate(layoutInflater, parent, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>5.在函数结尾，不要返回 <code>view</code>，而应返回 <code>binding</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> ViewHolder(binding)</span><br></pre></td></tr></table></figure><p>6.要消除 <code>binding</code> 上的错误，请将光标放在 <code>binding</code> 一词上。按 <code>Alt+Enter</code>（在 Mac 上，按 <code>Option+Enter</code>）打开 intent 菜单。</p><p>7.选择 **Change parameter ‘itemView’ type of primary constructor of class ‘ViewHolder’ to ‘ListItemSleepNightBinding’**。这将更新 <code>ViewHolder</code> 类的参数类型。</p><p><img src="/../images/image-20220525135714938.png" alt="image-20220525135714938"></p><p>8.向上滚动到 <code>ViewHolder</code> 的类定义，以查看签名中的更改。您会看到 <code>itemView</code> 的错误，因为您在 <code>from()</code> 方法中将 <code>itemView</code> 更改为了 <code>binding</code>。</p><p>在 <code>ViewHolder</code> 类定义中，右键点击 <code>itemView</code> 的一个发生实例，然后依次选择 <strong>Refactor</strong> &gt; <strong>Rename</strong>。将名称更改为 <code>binding</code>。</p><p>9.为构造函数参数 <code>binding</code> 添加 <code>val</code> 前缀，使其成为属性。</p><p>10.在对父类 <code>RecyclerView.ViewHolder</code> 的调用中，将参数从 <code>binding</code> 更改为 <code>binding.root</code>。您需要传递 <code>View</code>，并且将 <code>binding.root</code> 作为项布局中的根 <code>ConstraintLayout</code>。</p><p>11.完成后的类声明应如以下代码所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>(<span class="keyword">val</span> binding: ListItemSleepNightBinding) : RecyclerView.ViewHolder(binding.root)&#123;</span><br></pre></td></tr></table></figure><p>您还会看到对 <code>findViewById().</code> 的调用的错误。您将在下一部分中修复这些错误。</p><h3 id="第-3-步：替换-findViewById"><a href="#第-3-步：替换-findViewById" class="headerlink" title="第 3 步：替换 findViewById()"></a>第 3 步：替换 findViewById()</h3><p>您现在可以更新 <code>sleepLength</code>、<code>quality</code> 和 <code>qualityImage</code> 属性，以使用 <code>binding</code> 对象代替 <code>findViewById()</code>。</p><p>1.将 <code>sleepLength</code>、<code>qualityString</code> 和 <code>qualityImage</code> 的初始化更改为使用 <code>binding</code> 对象的视图，如下所示。此后，您的代码应该不会再显示任何错误。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> sleepLength: TextView = binding.sleepLength</span><br><span class="line"><span class="keyword">val</span> quality: TextView = binding.qualityString</span><br><span class="line"><span class="keyword">val</span> qualityImage: ImageView = binding.qualityImage</span><br></pre></td></tr></table></figure><p>绑定对象就位后，您根本不需要定义 <code>sleepLength</code>、<code>quality</code> 和 <code>qualityImage</code> 属性。<code>DataBinding</code> 将缓存查询，因此无需声明这些属性。</p><p>2.右键点击 <code>sleepLength</code>、<code>quality</code> 和 <code>qualityImage</code> 属性名称。对于每个属性，依次选择 <strong>Refactor &gt; Inline</strong>，或按 <code>Ctrl+Alt+N</code>（在 Mac 上按 <code>Option+Command+N</code>）。</p><p><img src="/../images/image-20220525135903462.png" alt="image-20220525135903462"></p><p>3.运行您的应用。（如果项目出现错误，您可能需要<strong>清理</strong>并<strong>重建</strong>项目。）</p><h2 id="创建绑定适配器"><a href="#创建绑定适配器" class="headerlink" title="创建绑定适配器"></a>创建绑定适配器</h2><p>在此任务中，您需要升级应用，将数据绑定与绑定适配器结合使用，在视图中设置数据。</p><p>在上一个 Codelab 中，您使用了 <a href="https://developer.android.com/reference/android/arch/lifecycle/Transformations"><code>Transformations</code></a> 类来获取 <code>LiveData</code> 并生成要在文本视图中显示的格式化字符串。但是，如果您需要绑定不同类型或复杂类型的数据，您可以提供绑定适配器来帮助数据绑定功能使用这些类型。绑定适配器会获取您的数据，并将其调整为可供数据绑定功能用于绑定视图（例如文本或图片）的内容。</p><p>您需要实现三个绑定适配器，一个用于高质量图片，另外两个分别用于一个文本字段。总而言之，如需声明绑定适配器，您需要定义一种获取项和视图的方法，并用 <code>@BindingAdapter</code> 进行注解。在该方法的正文中，您可以实现转换。在 Kotlin 中，您可以在接收数据的视图类上将绑定适配器编写为扩展函数。</p><h3 id="第-1-步：创建绑定适配器"><a href="#第-1-步：创建绑定适配器" class="headerlink" title="第 1 步：创建绑定适配器"></a>第 1 步：创建绑定适配器</h3><p>请注意，您必须在此步骤中导入很多类。</p><p>1.打开 <code>SleepNightAdapter.kt</code>。</p><p>2.在 <code>ViewHolder</code> 类中，找到 <code>bind()</code> 方法并注意该方法的用途。您需要获取用于计算 <code>binding.sleepLength</code>、<code>binding.quality</code> 和 <code>binding.qualityImage</code> 的值的代码，并在适配器中改用该代码。（目前不要更改代码，您需要在后续步骤中移动代码。）</p><p>3.在 <code>sleeptracker</code> 软件包中，创建一个名为 <code>BindingUtils.kt</code> 的新文件并打开此文件。</p><p>4.删除 <code>BindingUtils</code> 类中的所有内容，因为您接下来要创建静态函数。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BindingUtils</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>5.在 <code>TextView</code> 上声明一个名为 <code>setSleepDurationFormatted</code> 的扩展函数，并传入 <code>SleepNight</code>。此函数将作为适配器，用于计算和格式化睡眠时长。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setSleepDurationFormatted</span><span class="params">(item: <span class="type">SleepNight</span>)</span></span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>6.在 <code>setSleepDurationFormatted</code> 的正文中，将数据绑定到视图，如在 <code>ViewHolder.bind()</code> 中一样。调用 <code>convertDurationToFormatted()</code>，然后将 <code>TextView</code> 的 <code>text</code> 设置为格式化文本。（由于这是 <code>TextView</code> 上的扩展函数，您可以直接访问 <code>text</code> 属性。）</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text = convertDurationToFormatted(item.startTimeMilli, item.endTimeMilli, context.resources)</span><br></pre></td></tr></table></figure><p>7.如需向数据绑定功能告知此绑定适配器，请使用 <code>@BindingAdapter</code> 为该函数添加注解。</p><p>8.此函数是用于 <code>sleepDurationFormatted</code> 属性的适配器，因此请将 <code>sleepDurationFormatted</code> 作为参数传递给 <code>@BindingAdapter</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">&quot;sleepDurationFormatted&quot;</span>)</span></span><br></pre></td></tr></table></figure><p>9.第二个适配器根据 <code>SleepNight</code> 对象中的值设置睡眠质量。在 <code>TextView</code> 上再创建一个名为 <code>setSleepQualityString()</code> 的扩展函数，并传入 <code>SleepNight</code>。</p><p>10.在正文中，将数据绑定到视图，如在 <code>ViewHolder.bind()</code> 中一样。调用 <code>convertNumericQualityToString</code> 并设置 <code>text</code>。</p><p>11.使用 <code>@BindingAdapter(&quot;sleepQualityString&quot;)</code> 为该函数添加注解。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">&quot;sleepQualityString&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> TextView.<span class="title">setSleepQualityString</span><span class="params">(item: <span class="type">SleepNight</span>)</span></span> &#123;</span><br><span class="line">   text = convertNumericQualityToString(item.sleepQuality, context.resources)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.我们需要第三个绑定适配器，用于在图片视图上设置图片。在 <code>ImageView</code> 上创建第三个扩展函数，调用 <code>setSleepImage</code>，并使用 <code>ViewHolder.bind()</code> 中的代码，如下所示。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@BindingAdapter(<span class="meta-string">&quot;sleepImage&quot;</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> ImageView.<span class="title">setSleepImage</span><span class="params">(item: <span class="type">SleepNight</span>)</span></span> &#123;</span><br><span class="line">   setImageResource(<span class="keyword">when</span> (item.sleepQuality) &#123;</span><br><span class="line">       <span class="number">0</span> -&gt; R.drawable.ic_sleep_0</span><br><span class="line">       <span class="number">1</span> -&gt; R.drawable.ic_sleep_1</span><br><span class="line">       <span class="number">2</span> -&gt; R.drawable.ic_sleep_2</span><br><span class="line">       <span class="number">3</span> -&gt; R.drawable.ic_sleep_3</span><br><span class="line">       <span class="number">4</span> -&gt; R.drawable.ic_sleep_4</span><br><span class="line">       <span class="number">5</span> -&gt; R.drawable.ic_sleep_5</span><br><span class="line">       <span class="keyword">else</span> -&gt; R.drawable.ic_sleep_active</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您可能需要导入 convertDurationToFormatted 和 convertNumericQualityToString。</p><h3 id="第-2-步：更新-SleepNightAdapter"><a href="#第-2-步：更新-SleepNightAdapter" class="headerlink" title="第 2 步：更新 SleepNightAdapter"></a>第 2 步：更新 SleepNightAdapter</h3><p>1.打开 <code>SleepNightAdapter.kt</code>。</p><p>2.删除 <code>bind()</code> 方法中的所有内容，因为您现在可以使用数据绑定和新的适配器来为您执行这项操作。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">bind</span><span class="params">(item: <span class="type">SleepNight</span>)</span></span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.在 <code>bind()</code> 中，为 <code>item</code> 分配 sleep，因为您需要告知绑定对象您的新 <code>SleepNight</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binding.sleep = item</span><br></pre></td></tr></table></figure><p>4.在该行的下方，添加 <code>binding.executePendingBindings()</code>。此调用是一种优化，用于要求数据绑定功能立即执行任何待处理的绑定。当您在 <code>RecyclerView</code> 中使用绑定适配器时，最好调用 <code>executePendingBindings()</code>，因为它可以略微加快调整视图大小的过程。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">binding.executePendingBindings()</span><br></pre></td></tr></table></figure><h2 id="第-3-步：向-XML-布局添加绑定"><a href="#第-3-步：向-XML-布局添加绑定" class="headerlink" title="第 3 步：向 XML 布局添加绑定"></a>第 3 步：向 XML 布局添加绑定</h2><p>1.打开 <code>list_item_sleep_night.xml</code>。</p><p>2.在 <code>ImageView</code> 中，添加与设置图片的绑定适配器同名的 <code>app</code> 属性。传入 <code>sleep</code> 变量，如下所示。</p><p>此属性通过适配器建立视图与绑定对象之间的连接。每当引用 <code>sleepImage</code> 时，适配器都会调整 <code>SleepNight</code> 中的数据。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app:sleepImage=<span class="string">&quot;@&#123;sleep&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>3.现在，为 <code>sleep_length</code> 和 <code>quality_string</code> 文本视图添加类似的应用属性。每当引用 <code>sleepDurationFormatted</code> 或 <code>sleepQualityString</code> 时，适配器都会调整来自 <code>SleepNight</code> 中的数据。请务必将每个属性分别放入其各自的 <code>TextView.</code> 中</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">app:sleepDurationFormatted=<span class="string">&quot;@&#123;sleep&#125;&quot;</span></span><br><span class="line">app:sleepQualityString=<span class="string">&quot;@&#123;sleep&#125;&quot;</span></span><br></pre></td></tr></table></figure><p>4.运行您的应用，其运行情况与之前完全一样。绑定适配器负责处理随着数据变化而格式化和更新视图的所有工作，从而简化 <code>ViewHolder</code> 并为代码提供比之前更好的结构。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;开始学习&quot;&gt;&lt;a href=&quot;#开始学习&quot; class=&quot;headerlink&quot; title=&quot;开始学习&quot;&gt;&lt;/a&gt;开始学习&lt;/h2&gt;&lt;p&gt;看下&lt;code&gt;SleepNightAdapter.kt&lt;/code&gt;文件&lt;/p&gt;
&lt;figure class=&quot;highl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Lifecycle 官方文档[转](更新中)</title>
    <link href="http://example.com/2022/05/20/Lifecycle-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E8%BD%AC-%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <id>http://example.com/2022/05/20/Lifecycle-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3-%E8%BD%AC-%E6%9B%B4%E6%96%B0%E4%B8%AD/</id>
    <published>2022-05-19T21:56:29.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用生命周期感知型组件处理生命周期"><a href="#使用生命周期感知型组件处理生命周期" class="headerlink" title="使用生命周期感知型组件处理生命周期"></a>使用生命周期感知型组件处理生命周期</h2><p>生命周期感知型组件可执行操作来响应另一个组件（如 <code>Activity</code> 和 <code>Fragment</code>）的生命周期状态的变化。这些组件有助于您编写出更有条理且往往更精简的代码，此类代码更易于维护。</p><p>一种常见的模式是在 Activity 和 Fragment 的生命周期方法中实现依赖组件的操作。但是，这种模式会导致代码条理性很差而且会扩散错误。通过使用生命周期感知型组件，您可以将依赖组件的代码从生命周期方法移入组件本身中。</p><p><a href="https://developer.android.com/reference/androidx/lifecycle/package-summary?hl=zh-cn"><code>androidx.lifecycle</code></a> 软件包提供了可用于构建生命周期感知型组件的类和接口 - 这些组件可以根据 Activity 或 Fragment 的当前生命周期状态自动调整其行为。</p><blockquote><p><strong>注意</strong>：如需将 <a href="https://developer.android.com/reference/androidx/lifecycle/package-summary?hl=zh-cn"><code>androidx.lifecycle</code></a>导入 Android 项目，请参阅 <a href="https://developer.android.com/jetpack/androidx/releases/lifecycle?hl=zh-cn#declaring_dependencies">Lifecycle 版本说明</a>中关于声明依赖项的说明。</p></blockquote><p>在 Android 框架中定义的大多数应用组件都存在生命周期。生命周期由操作系统或进程中运行的框架代码管理。它们是 Android 工作原理的核心，应用必须遵循它们。如果不这样做，可能会引发内存泄漏甚至应用崩溃。</p><p>假设我们有一个在屏幕上显示设备位置的 Activity。常见的实现可能如下所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">MyLocationListener</span></span>(</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> context: Context,</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">val</span> callback: (Location) -&gt; <span class="built_in">Unit</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// connect to system location service</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// disconnect from system location service</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> myLocationListener: MyLocationListener</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(...)</span></span> &#123;</span><br><span class="line">        myLocationListener = MyLocationListener(<span class="keyword">this</span>) &#123; location -&gt;</span><br><span class="line">            <span class="comment">// update UI</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart()</span><br><span class="line">        myLocationListener.start()</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStop</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onStop()</span><br><span class="line">        myLocationListener.stop()</span><br><span class="line">        <span class="comment">// manage other components that need to respond</span></span><br><span class="line">        <span class="comment">// to the activity lifecycle</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h2><p><a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn"><code>Lifecycle</code></a> 是一个类，用于存储有关组件（如 Activity 或 Fragment）的生命周期状态的信息，并允许其他对象观察此状态。</p><p><a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn"><code>Lifecycle</code></a> 使用两种主要枚举跟踪其关联组件的生命周期状态：</p><ul><li><p>事件</p><p>从框架和 <a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn"><code>Lifecycle</code></a> 类分派的生命周期事件。这些事件映射到 Activity 和 Fragment 中的回调事件。</p></li><li><p>状态</p><p>由 <a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn"><code>Lifecycle</code></a> 对象跟踪的组件的当前状态。</p></li></ul><p><img src="/../images/image-20220520060137800.png" alt="image-20220520060137800"></p><p>您可以将状态看作图中的节点，将事件看作这些节点之间的边。</p><p>类可以通过实现 <a href="https://developer.android.com/reference/androidx/lifecycle/DefaultLifecycleObserver?hl=zh-cn"><code>DefaultLifecycleObserver</code></a> 并替换相应的方法（如 <code>onCreate</code> 和 <code>onStart</code> 等）来监控组件的生命周期状态。然后，您可以通过调用 <a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn"><code>Lifecycle</code></a> 类的 <a href="https://developer.android.com/reference/androidx/lifecycle/Lifecycle?hl=zh-cn#addObserver(androidx.lifecycle.LifecycleObserver)"><code>addObserver()</code></a> 方法并传递观察器的实例来添加观察器，如下例所示：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyObserver</span> : <span class="type">DefaultLifecycleObserver &#123;</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResume</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        connect()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onPause</span><span class="params">(owner: <span class="type">LifecycleOwner</span>)</span></span> &#123;</span><br><span class="line">        disconnect()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">myLifecycleOwner.getLifecycle().addObserver(MyObserver())</span><br></pre></td></tr></table></figure><p>在上面的示例中，<code>myLifecycleOwner</code> 对象实现了 <a href="https://developer.android.com/reference/androidx/lifecycle/LifecycleOwner?hl=zh-cn"><code>LifecycleOwner</code></a> 接口，我们将在接下来的部分中对该接口进行说明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用生命周期感知型组件处理生命周期&quot;&gt;&lt;a href=&quot;#使用生命周期感知型组件处理生命周期&quot; class=&quot;headerlink&quot; title=&quot;使用生命周期感知型组件处理生命周期&quot;&gt;&lt;/a&gt;使用生命周期感知型组件处理生命周期&lt;/h2&gt;&lt;p&gt;生命周期感知型组件可</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android8.0以上系统应用如何保活[转]</title>
    <link href="http://example.com/2022/05/17/Android8-0%E4%BB%A5%E4%B8%8A%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E5%A6%82%E4%BD%95%E4%BF%9D%E6%B4%BB-%E8%BD%AC/"/>
    <id>http://example.com/2022/05/17/Android8-0%E4%BB%A5%E4%B8%8A%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8%E5%A6%82%E4%BD%95%E4%BF%9D%E6%B4%BB-%E8%BD%AC/</id>
    <published>2022-05-17T04:59:09.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-8-0以上系统应用如何保活"><a href="#Android-8-0以上系统应用如何保活" class="headerlink" title="Android 8.0以上系统应用如何保活"></a><a href="https://segmentfault.com/a/1190000020159573">Android 8.0以上系统应用如何保活</a></h1><p>最近在做一个埋点的sdk，由于埋点是分批上传的，不是每次都上传，所以会有个进程保活的机制，这也是自研推送的实现技术之一：如何保证Android进程的存活。</p><p>对于Android来说，保活主要有以下一些方法：</p><ul><li>开启前台Service（效果好，推荐）</li><li>Service中循环播放一段无声音频（效果较好，但耗电量高，谨慎使用）</li><li>双进程守护（Android 5.0前有效）</li><li>JobScheduler（Android 5.0后引入，8.0后失效）</li><li>1 像素activity保活方案（不推荐）</li><li>广播锁屏、自定义锁屏（不推荐）</li><li>第三方推送SDK唤醒（效果好，缺点是第三方接入）</li></ul><p>下面是具体的实现方案：</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Android-8-0以上系统应用如何保活&quot;&gt;&lt;a href=&quot;#Android-8-0以上系统应用如何保活&quot; class=&quot;headerlink&quot; title=&quot;Android 8.0以上系统应用如何保活&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://segmen</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>WorkManager相关(更新中)</title>
    <link href="http://example.com/2022/05/17/WorkManager%E7%9B%B8%E5%85%B3-%E6%9B%B4%E6%96%B0%E4%B8%AD/"/>
    <id>http://example.com/2022/05/17/WorkManager%E7%9B%B8%E5%85%B3-%E6%9B%B4%E6%96%B0%E4%B8%AD/</id>
    <published>2022-05-17T04:08:53.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h2><ul><li><p>WorkManager</p><ul><li>WorkManager可以自动维护后台任务的执行时机，执行顺序，执行状态。</li><li>执行时机：我们创建一个任务可以指定它在什么时机执行，比如立刻执行，还是必须要等到设备空闲的时候执行，还是要等到设备的充电量必须要满足的时候执行，还是必须在wifi下才能执行，还是设备必须在存储空间足够的情况下执行。</li><li>执行顺序：指任务在执行过程中，是允许有依赖的关系，比如a执行完成才能执行任务b，任务b完成才能执行任务c,允许他们之间有相互的依赖关系。</li><li>执行状态：指任务执行的每个状态都会回调给我们，比如队列任务执行中，取消，成功，失败，结束等等。</li></ul><p>相比于后台任务service,intentservice workmanager更加的轻量，更加的省电，理论上service能做的东西，workmaanager都能做。但是workmanager可以用于支持异步场景。</p></li><li><p>依赖添加</p><ul><li>implementation ‘androidx.work:work-runtime:2.2.0’</li></ul></li></ul><h2 id="使用WorkManager来构建任务"><a href="#使用WorkManager来构建任务" class="headerlink" title="使用WorkManager来构建任务"></a>使用WorkManager来构建任务</h2><p><img src="/../images/image-20220517121757299.png" alt="image-20220517121757299"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WorkContinuation left,right;</span><br><span class="line">left = workManager.beginWith(A).then(B);</span><br><span class="line">right = workManager.beginWith(C).then(D);</span><br><span class="line">WorkContinuatioin.combine(Arrays.asList(left,right)).then(E).Enqueue();</span><br></pre></td></tr></table></figure><ul><li>任务A执行完才能执行B</li><li>任务C执行完才能执行任务D</li><li>BD都执行完才能执行E</li></ul><p>之前使用service还要做线程间的同步，我们看workmanager怎么实现相同的效果？</p><ul><li>beginWith(A).then(B) 指任务A执行完，才执行任务B，beginWith就可以使得两个任务串行依赖</li><li>WorkContinuation left right 分别创建出左侧的任务队列，右侧的任务队列</li><li>WorkContinuation 就是可以支持任务之间相互的串联，相互的依赖的对象</li><li>combine后，调用Enqueu()加入任务队列</li></ul><h2 id="WorkManager（状态通知）"><a href="#WorkManager（状态通知）" class="headerlink" title="WorkManager（状态通知）"></a>WorkManager（状态通知）</h2><p><img src="/../images/image-20220517122315734.png" alt="image-20220517122315734"></p><h2 id="WorkManager（任务控制）"><a href="#WorkManager（任务控制）" class="headerlink" title="WorkManager（任务控制）"></a>WorkManager（任务控制）</h2><p><img src="/../images/image-20220517122359574.png" alt="image-20220517122359574"></p><p>UUID是我们创建work的时候返回的</p><p>我们创建任务的时候，可以给任务打上一组标签tag</p><h2 id="WorkManager-类关系"><a href="#WorkManager-类关系" class="headerlink" title="WorkManager(类关系)"></a>WorkManager(类关系)</h2><p><img src="/../images/image-20220517122546929.png" alt="image-20220517122546929"></p><p>OneTimeWorkRequest 一次性</p><p>PeriodicWorkRequest 定时执行任务 ，定时任务最小的周期是15分钟，所以保活就不行了</p><h2 id="WorkManager的使用"><a href="#WorkManager的使用" class="headerlink" title="WorkManager的使用"></a>WorkManager的使用</h2><p>1.创建任务 2.输入参数 3.创建workRequest 4.加入队列 5.监听结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.编写一个UploadFileWorker.class 继承自Worker</span></span><br><span class="line"><span class="comment">//2.创建输入参数</span></span><br><span class="line">Data inputData = <span class="keyword">new</span> Data.Builder()</span><br><span class="line">  .putString(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>)</span><br><span class="line">  .putBoolean(<span class="string">&quot;key1&quot;</span>,<span class="keyword">false</span>)</span><br><span class="line">  .putStringArray(<span class="string">&quot;key2&quot;</span>,<span class="keyword">new</span> String[]&#123;&#125;)</span><br><span class="line">  .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.创建workrequest  构建任务</span></span><br><span class="line">OneTimeWorkRequest request = <span class="keyword">new</span> OneTimeWorkRequest.Builder(UploadFileWorker.class)</span><br><span class="line">  <span class="comment">//传入参</span></span><br><span class="line">  .setInputData(inputData)</span><br><span class="line">  <span class="comment">//...其他许许多多约束</span></span><br><span class="line">  .build();</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.加入队列</span></span><br><span class="line">WorkContinuation continuation = WorkManager.getInstance().beginWith(list).enqueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//5.观察执行状态及结果</span></span><br><span class="line">continuation.getWorkInfosLiveData().observe(<span class="keyword">this</span>,<span class="keyword">new</span> Observer&lt;List&lt;WorkInfo&gt;&gt;()&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(List&lt;WorkInfo&gt; workInfos)</span></span>&#123;</span><br><span class="line">    <span class="comment">//监听任务执行的结果</span></span><br><span class="line">    <span class="comment">//所以我们在创建work的时候需要work的UUID,用于观察这里是哪个work执行完成了</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本介绍&quot;&gt;&lt;a href=&quot;#基本介绍&quot; class=&quot;headerlink&quot; title=&quot;基本介绍&quot;&gt;&lt;/a&gt;基本介绍&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WorkManager&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;WorkManager可以自动维护后台任务的执行时机，执</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>MVVM及Databinding使用及原理解析</title>
    <link href="http://example.com/2022/05/16/MVVM%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/05/16/MVVM%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-15T22:35:47.000Z</published>
    <updated>2022-07-25T08:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h2><ul><li>双向绑定。数据变更<code>UI</code>会自动刷新，<code>UI</code>变化了数据也会自动同步到最新的值</li><li>数据驱动UI：比如<code>User</code>中的字段，数据变化了，可以做到自动刷新UI。</li><li>UI同步数据：比如<code>EditText</code>、<code>CheckBox</code>、<code>ToggleButton</code>具有状态的<code>View</code>，当状态变化后，数据模型中与之关联的字段的值也会自动同步最新状态</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启databinding</span></span><br><span class="line">android&#123;</span><br><span class="line">dataBinding&#123;</span><br><span class="line">enable = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传统的MVVM"><a href="#传统的MVVM" class="headerlink" title="传统的MVVM"></a>传统的MVVM</h3><p><img src="/../images/image-20220516064045932.png" alt="image-20220516064045932"></p><ul><li><p>此时<code>view</code>层的定义比较广泛，可以指<code>Activity/Fragment/xml</code>实例化出来的<code>view</code>对象或者自定义<code>view</code>对象</p></li><li><p><code>VM</code>就是这里的<code>viewmodel</code>,但是这并不是<code>Jetpack</code>组件里的<code>viewmodel</code>,18年，<code>livedata</code>和<code>viewmodel</code>没有出来前，这里的<code>viewmodel</code>只是一个普通的类，用于从<code>model</code>中获取数据，从<code>Model</code>中获取数据成功后会通过<code>callback</code>回传给<code>viewmodel</code>，而<code>viewmodel</code>中的数据更新后，并不是通过<code>view</code>接口(区别于<code>MVP</code>)回传给<code>view</code>更新的，而是通过<code>Databinding</code>，利用它观察者的特性，实现<code>UI</code>的更新</p></li></ul><p>定义<code>ViewModel</code>用于处理数据相关的业务逻辑。并通过<code>ObserverableField</code> 观察者把结果回传出去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObservableField&lt;User&gt; userField = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.nickName = <span class="string">&quot;nickName&quot;</span>;</span><br><span class="line">        user.address = <span class="string">&quot;address&quot;</span>;</span><br><span class="line">        <span class="comment">//自动通知与之关联的观察者</span></span><br><span class="line">        userField.set(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>注意一定要给<code>userField.set(user)</code> 把对象set给<code>userField</code> 这步不调用，是无法从<code>userField</code>中取数据的，会报NPE</p></blockquote><p>基于<code>DataBinding</code>在xml中进行数据绑定，可以实现数据&amp;UI双向绑定&#x3D;&gt;数据变更ui自动刷新，UI变动自动同步数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;viewModel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.HomeViewModel&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;viewModel.userField.nickName&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@=&#123;viewModel.userField.address&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要<code>userField</code>中的<code>nickName</code>发生变化，UI会刷新，这是单向的</p><p>编写完<code>xml</code>后<code>rebuild</code>一个项目</p><p><code>Activity</code>控制数据的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> <span class="meta">@org</span>.jetbrains.annotations.Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      </span><br><span class="line">        ActivityHomeBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_home);</span><br><span class="line"></span><br><span class="line">        HomeViewModel vm = <span class="keyword">new</span> HomeViewModel();</span><br><span class="line">        binding.setViewModel(vm);</span><br><span class="line">      </span><br><span class="line">      model.queryUserInfo();</span><br><span class="line"></span><br><span class="line">        binding.editAddress.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//当输入框文本变更后，userField的address数据会自动更新，变成输入框输入的内容</span></span><br><span class="line">                Log.e(<span class="string">&quot;zzl&quot;</span>,<span class="string">&quot;after:&quot;</span> + vm.userField.get().address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>DataBindingUtil.setContentView</code>完成<code>Activity</code>和xml布局文件的绑定工作，返回一个<code>Databinding</code>对象，这个<code>databinding</code>对象是根据xml的名称在编译阶段生成的，我们可以直接拿来使用。</li><li>把vm通过<code>setViewModel</code>设置给<code>databinding</code></li><li>然后在<code>Activity</code>中调用 <code>model.queryUserInfo()</code>去获取数据，可能是网络上的数据，然后<code>activity</code>就不管数据获取后UI的更新了</li></ul><p>这就是传统的MVVM，它着重利用了<code>Databinding</code>的能力，大部分的数据都是在xml中进行绑定，当然也会根据场景，具体问题具体分析。如果需要用户交互复杂的逻辑控制，可能还是需要在<code>activity</code>中进行控制更为方便。</p><p>但是这种写法已经过时了，后面出现了<code>Jetpack</code>，在<code>Jetpack</code>模式下，我们通常会利用<code>VieModel + LiveData</code>的组件结合。</p><p>这样做的目的是既能保证数据不会无缘无故丢失，还能<strong>自动关联宿主的生命周期</strong>，避免空指针的问题。<code>Activity</code>，<code>Fragment UI</code>逻辑和用户交互控制就可以了。数据的绑定可以交给<code>Databindging</code></p><h3 id="Jetpack-Viewmodel-livedata使用"><a href="#Jetpack-Viewmodel-livedata使用" class="headerlink" title="Jetpack Viewmodel + livedata使用"></a>Jetpack Viewmodel + livedata使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData <span class="title">getUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MutableLiveData&lt;User&gt; liveData = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.nickName = <span class="string">&quot;zzl&quot;</span>;</span><br><span class="line">        user.address = <span class="string">&quot;changchun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        liveData.postValue(user);</span><br><span class="line">        <span class="keyword">return</span> liveData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>注意这里既不是使用观察者<code>ObservableField</code>包裹对象，也不是使用<code>view</code>的接口回调<code>callback</code>去回传数据，而是使用了<code>livedata</code>，通过<code>liveData.postValue(user)</code>并返回<code>liveData</code>，去通知观察者</li></ul><p>下面看下xml文件的变化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.User&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.nickName&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@=&#123;user.address&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里注意绑定的对象不再是<code>viewmodel</code>而直接是<code>user</code>对象</li><li>直接使用<code>user.nickName</code>  <code>user.address</code>访问对象的值</li></ul><p>看下<code>Activity</code>里的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity3</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> <span class="meta">@org</span>.jetbrains.annotations.Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityHome2Binding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_home2);</span><br><span class="line">        ViewModelProvider provider = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> ViewModelProvider.NewInstanceFactory());</span><br><span class="line">        HomeViewModel vm = provider.get(HomeViewModel.class);</span><br><span class="line"></span><br><span class="line">        vm.getUserInfo().observe(<span class="keyword">this</span>, (Observer&lt;User&gt;) user -&gt; &#123;</span><br><span class="line">            binding.setUser(user);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jetpack里的api使用会有一点点不同</p><ul><li><code>DataBindingUtil.setContentView</code>把xml和<code>activity</code>进行绑定，生成<code>databinding</code></li><li>通过<code>ViewModelProvider</code>获取具体的<code>HomeViewModel</code>对象</li><li>通过vm获取发送数据的<code>liveData</code>，注册观察者，在回调里进行<code>binding.setUser(user);</code>绑定</li></ul><h2 id="DataBinding的高频用法及注意事项"><a href="#DataBinding的高频用法及注意事项" class="headerlink" title="DataBinding的高频用法及注意事项"></a>DataBinding的高频用法及注意事项</h2><h3 id="什么是dataBinding"><a href="#什么是dataBinding" class="headerlink" title="什么是dataBinding?"></a>什么是dataBinding?</h3><ul><li>可以理解为<code>dataBinding</code>只是一种工具，它解决了view和数据之间的双向绑定</li></ul><h3 id="dataBinding的优势？"><a href="#dataBinding的优势？" class="headerlink" title="dataBinding的优势？"></a>dataBinding的优势？</h3><ul><li>双向数据绑定 数据发生改变后，自动通知刷新UI页面，不再需要人工绑定最新数据到view上。UI改变后也能同步给数据。</li><li>减少模板代码 有了dataBinding，从此不用再写<code>findViewById</code>,<code>setOnClickListener</code>等枯燥生硬的代码，大大提高工作效率。从此<code>Butterknife</code>靠边站。</li><li>释放<code>Activitty/Fragment</code>压力 我们可以直接在xml布局文件中完成数据，事件绑定工作。<code>Activity</code>,<code>Fragment</code>让它更加只关注核心业务。</li><li>数据绑定空安全 在xml中绑定数据它是空安全的，因为<code>dataBinding</code>在数据绑定上会自动装箱和空判断，所以大大减少了数据绑定带来的<code>NPE</code>问题</li></ul><h3 id="dataBinding如何使用？"><a href="#dataBinding如何使用？" class="headerlink" title="dataBinding如何使用？"></a>dataBinding如何使用？</h3><ul><li>在布局文件中，选中根布局的标签，按住 <code>alt + 回车</code> ，点击<code>convert to data binding layout</code> 即可转换成<code>dataBinding</code>布局。</li><li>转换后的布局，最外层变成了<code>layout</code>标签，里面包裹了<code>data</code>标签和常规的布局元素。data元素用来声明在此布局使用到的变量和变量类型，以及类引用。最不是所有的属性都能用<code>dataBinding</code>来绑定呢？当然不是！如果一个属性<code>xxx</code>，在该类中有<code>setXXX</code>方法，我们才能使用<code>dataBinding</code>来绑定。比如<code>android:layout_width</code>，<code>android_height</code>就不能使用<code>dataBinding</code>来绑定值，而<code>android:paddingLeft</code>，<code>android:textSize</code>都是可以的。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.User&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.UserManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>  //不能使用<span class="attr">dataBinding</span>动态绑定</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.name&#125;&quot;</span> //单向绑定数据变更自动通知<span class="attr">UI</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@&#123;@dimen/16sp&#125;&quot;</span> //资源引用</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.nickName + @string/suffix&#125;&quot;</span> //字符串拼接需要引用资源</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;UserManager.getUserName()&#125;&quot;</span> //调用静态方法，类必须先导入</span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;UserManager.login()&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>android:text=&quot;@&#123;user.name&#125;&quot;</code>等价于<code>tvName.text = user.name</code>这样就将数据和<code>view</code>相关联了。那么如何实现<code>view</code>和数据的双向绑定呢？我们除了上面提到的让<code>ObservableField</code>持有外，还可以让实体类<code>User</code>继承<code>BaseObservable</code>。当user中字段发生变更，只需要调用<code>user.notifyPropertyChanged</code>就可以让<code>UI刷新</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当使用name字段发生变更后，若想UI自动刷新，我们需要给它写个get方法并且标记为Bindable注解</span></span><br><span class="line">    <span class="comment">//最后调用 notifyPropertyChanged方法即可</span></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        notifyPropertyChanged(BR.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dataBinding</code> 也支持在布局文件中使用<code>数组、List、Set和Map</code>，且在布局文件中都可以通过<code>list[index]</code>的形式来获取元素，因为xml的特性，在声明<code>List&lt;String&gt;</code>之类的类型时，需要使用尖括号的<code>转义字符</code>，如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.List&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Set&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Map&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;android.util.SparseArray&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;array&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String[]&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List&lt;String&gt; 需要转义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;List<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Map&lt;String&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;Map<span class="symbol">&amp;lt;</span>String,String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Set&lt;Strin&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;set&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;Set<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SparseArray&lt;String&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;sparse&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;SparseArray<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;key&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;array[1]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;sparse[index]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;list[index]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;map[key]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&#x27;@&#123;map[&quot;移动端架构师&quot;]&#125;&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&#x27;@&#123;set.contains(&quot;xxx&quot;)?&quot;移动端架构师&quot;:key&#125;&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>dataBinding</code>在xml中数据绑定支持的语法表达式也是非常丰富的，支持在布局文件中使用以下运算符、表达式和关键字</li></ul><p><img src="/../images/image-20220516091030481.png" alt="image-20220516091030481"></p><p><img src="/../images/image-20220516091050642.png" alt="image-20220516091050642"></p><ul><li>dataBinding 拓展view属性</li></ul><p>我们知道，以前想要给ImageView增加几个属性，必须要写个自定义的ImageView在构造函数中一顿解析。那看看使用dataBinding如何拓展view属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindingAdapter(value = &#123;&quot;image_url&quot;,&quot;isCircle&quot;,&quot;radius&quot;&#125;,requireAll = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(ImageView view,String imageUrl,<span class="keyword">boolean</span> isCircle,<span class="keyword">int</span> radius)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要定义成<code>public static</code> 使用<code>BindingAdapter</code>注解并标记</li><li><code>value</code>中的字段随意添加和方法参数一一对应即可。</li><li>requirAll &#x3D; false代表是否以下三个属性在xml中同时使用才会调用该方法，为<code>flase</code>的话，只要有一个属性被使用就能调用到该方法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.steve.mvvmdemo.jetpackmvvm.HiImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:image_url</span>=<span class="string">&quot;@&#123;user.avatar&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:radius</span>=<span class="string">&quot;@&#123;50&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在布局文件中如下使用，便能实现图片圆角和资源url绑定的功能</li></ul><h3 id="dataBinding使用建议"><a href="#dataBinding使用建议" class="headerlink" title="dataBinding使用建议"></a>dataBinding使用建议</h3><ul><li>不建议在列表中乱用，因为dataBinding数据绑定是延迟一帧的，如果列表中的ItemView的宽高需要计算后才能正确展示，或者显隐控制，不建议使用databinding操作，否则会看到列表itemview有可能撑开的动画，体验不好。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRebind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContainingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContainingBinding.requestRebind();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> LifecycleOwner owner = <span class="keyword">this</span>.mLifecycleOwner;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Lifecycle.State state = owner.getLifecycle().getCurrentState();</span><br><span class="line">            <span class="keyword">if</span> (!state.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// wait until lifecycle owner is started</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPendingRebind) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingRebind = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//这里下一次屏幕绘制才会进行绑定</span></span><br><span class="line">        <span class="keyword">if</span> (USE_CHOREOGRAPHER) &#123;</span><br><span class="line">            mChoreographer.postFrameCallback(mFrameCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mUIThreadHandler.post(mRebindRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SDK_INT&gt;&#x3D;16 都会执行这里，在下一次绘制时，才会重新绑定数据</p></blockquote><ul><li>如fragment_layout_my.xml布局，在编译时会生成FragmentLayoutMyImpl.class我们可以搜索这种类debug跟进解决问题。</li></ul><p>build&#x2F;intermediates&#x2F;javac&#x2F;debug&#x2F;clasees&#x2F;org&#x2F;…&#x2F;databinding&#x2F;FragmentLayoutMyImpl.class</p><h2 id="dataBinding与ViewBinding的区别"><a href="#dataBinding与ViewBinding的区别" class="headerlink" title="dataBinding与ViewBinding的区别"></a>dataBinding与ViewBinding的区别</h2><ul><li>viewbinding可以看做是一个databinding的一部分功能 最主要的表现就是可以通过绑定后不用findviewbyid了，但不能进行双向绑定</li><li>相对来说databinding的功能更强大一些，不只是可以直接获取控件对象，并且可以通过数据绑定的形式实时更新页面UI</li><li>从编译效率来讲viewBinding的效率更快一些，databinding的效率要慢一些</li><li>viewbinding优点也是明显的不需要对原有的xml文件进行侵入</li></ul><h2 id="DataBinding原理与编译时绑定布局对象"><a href="#DataBinding原理与编译时绑定布局对象" class="headerlink" title="DataBinding原理与编译时绑定布局对象"></a>DataBinding原理与编译时绑定布局对象</h2><p><img src="/../images/image-20220516120558811.png" alt="image-20220516120558811"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>1.通过源码我们要知道<code>databinding</code>如何实现<code>M-V V-M</code>的<code>双向刷新机制</code></li><li>2.<code>databinding</code>内存开销过大的原因是什么？</li></ul><p>1.<code>rebuild</code>后，生成两个<code>xml</code>文件</p><p><img src="/../images/image-20220516122044224.png" alt="image-20220516122044224"></p><p>这两个xml文件分别有各自的用处 <code>xxx-layout</code> 用于Databinding处理，正常的xml文件中也会有tag</p><p><code>activity_home-layout.xml</code>文件的路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="regexp">/build/i</span>ntermediates<span class="regexp">/data_binding_layout_info_type_merge/</span>debug<span class="regexp">/out/</span>activity_home-layout.xml</span><br></pre></td></tr></table></figure><p><code>activity_home.xml</code>文件的路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="regexp">/build/i</span>ntermediates<span class="regexp">/incremental/m</span>ergeDebugResources<span class="regexp">/stripped.dir/</span>layout/activity_home.xml</span><br></pre></td></tr></table></figure><p>我们看下<code>acitivty_home-layout.xml</code>文件的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span> <span class="attr">directory</span>=<span class="string">&quot;layout&quot;</span> <span class="attr">filePath</span>=<span class="string">&quot;app/src/main/res/layout/activity_home.xml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">isBindingData</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isMerge</span>=<span class="string">&quot;false&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;activity_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">modulePackage</span>=<span class="string">&quot;com.steve.mvvmdemo&quot;</span> <span class="attr">rootNodeType</span>=<span class="string">&quot;android.widget.LinearLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">tag</span>=<span class="string">&quot;layout/activity_home_0&quot;</span> <span class="attr">view</span>=<span class="string">&quot;LinearLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;30&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;18&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;10&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">id</span>=<span class="string">&quot;@+id/nick_name&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;binding_1&quot;</span> <span class="attr">view</span>=<span class="string">&quot;TextView&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Expression</span> <span class="attr">attribute</span>=<span class="string">&quot;android:text&quot;</span> <span class="attr">text</span>=<span class="string">&quot;viewModel.userField.nickName&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Location</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;57&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TwoWay</span>&gt;</span>false<span class="tag">&lt;/<span class="name">TwoWay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ValueLocation</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;55&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;28&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Expression</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Expressions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;59&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;16&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">id</span>=<span class="string">&quot;@+id/edit_address&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;binding_2&quot;</span> <span class="attr">view</span>=<span class="string">&quot;EditText&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Expression</span> <span class="attr">attribute</span>=<span class="string">&quot;android:text&quot;</span> <span class="attr">text</span>=<span class="string">&quot;viewModel.userField.address&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Location</span> <span class="attr">endLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;57&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TwoWay</span>&gt;</span>true<span class="tag">&lt;/<span class="name">TwoWay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ValueLocation</span> <span class="attr">endLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;55&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Expression</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Expressions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;28&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;13&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;23&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Variables</span> <span class="attr">name</span>=<span class="string">&quot;viewModel&quot;</span> <span class="attr">declared</span>=<span class="string">&quot;true&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.HomeViewModel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;6&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;58&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;4&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Variables</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再看下<code>activity_home.xml</code>文件的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line">                                                                   </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">                 </span><br><span class="line">                            </span><br><span class="line">                                                           </span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:tag</span>=<span class="string">&quot;layout/activity_home_0&quot;</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:tag</span>=<span class="string">&quot;binding_1&quot;</span>                       /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:tag</span>=<span class="string">&quot;binding_2&quot;</span>                       </span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">         </span><br></pre></td></tr></table></figure><ul><li>它会把<code>layout</code>标签去掉，然后在每个标签下打上<code>tag</code></li></ul><p><code>rebuild</code>后发生了啥</p><p><img src="/../images/image-20220516122508848.png" alt="image-20220516122508848"></p><p>2.从<code>setContentView</code>开始看源码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.必须先ReBuilder 2.书写代码绑定</span></span><br><span class="line"><span class="keyword">val</span> contentView = DataBindingUtil.setContentView&lt;ActivityLoginBinding&gt;(<span class="keyword">this</span>, R.layout.activity_login)</span><br></pre></td></tr></table></figure><p><code>Databinding</code>为什么还要去<code>setContentView</code></p><p><img src="file://../images/image-20220516122354494.png?lastModify=1652754461" alt="image-20220516122354494"></p><p>因为需要<code>activity</code>去获取根布局<code>root</code> 这样<code>binding</code>才能去更改布局刷新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> layoutId, <span class="meta">@Nullable</span> DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">    activity.setContentView(layoutId);</span><br><span class="line">    View decorView = activity.getWindow().getDecorView();</span><br><span class="line">    ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">    <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>activity.getWindow().getDecorView()</code> 获取根布局<code>view</code> 由<code>decorView</code> 获取<code>contentView</code> 然后发生<code>bind</code>绑定，执行<code>bindToAddedViews</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span></span></span><br><span class="line"><span class="params"><span class="function">        ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">    <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>所有的<code>view</code>子<code>view</code>都会执行<code>bind</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bind</span><span class="params">(DataBindingComponent bindingComponent, View[] roots,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) sMapper.getDataBinder(bindingComponent, roots, layoutId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getDataBinder</code> 是一个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int</span> layoutId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent bindingComponent,</span></span></span><br><span class="line"><span class="params"><span class="function">            View[] view, <span class="keyword">int</span> layoutId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看它具体的实现类<code>DataBinderMapperImpl</code> 注意要找自己包名下的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinderMapperImpl</span> <span class="keyword">extends</span> <span class="title">DataBinderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent component, View view, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);</span><br><span class="line">    <span class="keyword">if</span>(localizedLayoutId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> Object tag = view.getTag();</span><br><span class="line">      <span class="keyword">if</span>(tag == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;view must have a tag&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span>(localizedLayoutId) &#123;</span><br><span class="line">        <span class="keyword">case</span>  LAYOUT_ACTIVITYHOME: &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">&quot;layout/activity_home_0&quot;</span>.equals(tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActivityHomeBindingImpl(component, view);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The tag for activity_home is invalid. Received: &quot;</span> + tag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span>  LAYOUT_ACTIVITYLOGIN: &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">&quot;layout/activity_login_0&quot;</span>.equals(tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActivityLoginBindingImpl(component, view);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The tag for activity_login is invalid. Received: &quot;</span> + tag);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前说把所有的<code>view</code>都打上了<code>tag</code> 这里通过获取<code>tag</code> 开始匹配不同的<code>bindingimpl</code>，<code>layout/activity_home_0</code> 和之前的<code>xml</code>中的<code>LineanerLayout</code>标签的<code>tag</code>对应上了，走<code>ActivityHomeBindingImpl</code>的构造方法的逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(<span class="meta">@Nullable</span> androidx.databinding.DataBindingComponent bindingComponent, <span class="meta">@NonNull</span> View root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(bindingComponent, root, mapBindings(bindingComponent, root, <span class="number">3</span>, sIncludes, sViewsWithIds));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(androidx.databinding.DataBindingComponent bindingComponent, View root, Object[] bindings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(bindingComponent, root, <span class="number">1</span></span><br><span class="line">        , (android.widget.EditText) bindings[<span class="number">2</span>]</span><br><span class="line">        , (android.widget.TextView) bindings[<span class="number">1</span>]</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">this</span>.editAddress.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.mboundView0 = (android.widget.LinearLayout) bindings[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.mboundView0.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.nickName.setTag(<span class="keyword">null</span>);</span><br><span class="line">    setRootTag(root);</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>第一个内存占用过高的原因来了</code>，注意看</p></li><li><p><code>Object[]</code> 这个对象数组缓存了控件，这块内存是额外的，通过执行<code>mapBindings</code>方法传入，我们看<code>mapBindings</code>怎么填充的这个对象数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapBindings</span><span class="params">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class="line"><span class="params"><span class="function">        Object[] bindings, IncludedLayouts includes, SparseIntArray viewsWithIds,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">boolean</span> isRoot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> indexInIncludes;</span><br><span class="line">    <span class="keyword">final</span> ViewDataBinding existingBinding = getBinding(view);</span><br><span class="line">    <span class="keyword">if</span> (existingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Object objTag = view.getTag();</span><br><span class="line">    <span class="keyword">final</span> String tag = (objTag <span class="keyword">instanceof</span> String) ? (String) objTag : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isBound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (isRoot &amp;&amp; tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(<span class="string">&quot;layout&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> underscoreIndex = tag.lastIndexOf(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (underscoreIndex &gt; <span class="number">0</span> &amp;&amp; isNumeric(tag, underscoreIndex + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = parseTagInt(tag, underscoreIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (bindings[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bindings[index] = view;</span><br><span class="line">            &#125;</span><br><span class="line">            indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : index;</span><br><span class="line">            isBound = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(BINDING_TAG_PREFIX)) &#123;</span><br><span class="line">        <span class="keyword">int</span> tagIndex = parseTagInt(tag, BINDING_NUMBER_START);</span><br><span class="line">        <span class="keyword">if</span> (bindings[tagIndex] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bindings[tagIndex] = view;</span><br><span class="line">        &#125;</span><br><span class="line">        isBound = <span class="keyword">true</span>;</span><br><span class="line">        indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : tagIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Not a bound view</span></span><br><span class="line">        indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isBound) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> id = view.getId();</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">if</span> (viewsWithIds != <span class="keyword">null</span> &amp;&amp; (index = viewsWithIds.get(id, -<span class="number">1</span>)) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    bindings[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bindings[index] = view;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span>  ViewGroup) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewGroup viewGroup = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = viewGroup.getChildCount();</span><br><span class="line">        <span class="keyword">int</span> minInclude = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = viewGroup.getChildAt(i);</span><br><span class="line">            <span class="keyword">boolean</span> isInclude = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (indexInIncludes &gt;= <span class="number">0</span> &amp;&amp; child.getTag() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String childTag = (String) child.getTag();</span><br><span class="line">                <span class="keyword">if</span> (childTag.endsWith(<span class="string">&quot;_0&quot;</span>) &amp;&amp;</span><br><span class="line">                        childTag.startsWith(<span class="string">&quot;layout&quot;</span>) &amp;&amp; childTag.indexOf(<span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// This *could* be an include. Test against the expected includes.</span></span><br><span class="line">                    <span class="keyword">int</span> includeIndex = findIncludeIndex(childTag, minInclude,</span><br><span class="line">                            includes, indexInIncludes);</span><br><span class="line">                    <span class="keyword">if</span> (includeIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        isInclude = <span class="keyword">true</span>;</span><br><span class="line">                        minInclude = includeIndex + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> index = includes.indexes[indexInIncludes][includeIndex];</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> layoutId = includes.layoutIds[indexInIncludes][includeIndex];</span><br><span class="line">                        <span class="keyword">int</span> lastMatchingIndex = findLastMatching(viewGroup, i);</span><br><span class="line">                        <span class="keyword">if</span> (lastMatchingIndex == i) &#123;</span><br><span class="line">                            bindings[index] = DataBindingUtil.bind(bindingComponent, child,</span><br><span class="line">                                    layoutId);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> includeCount =  lastMatchingIndex - i + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">final</span> View[] included = <span class="keyword">new</span> View[includeCount];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; includeCount; j++) &#123;</span><br><span class="line">                                included[j] = viewGroup.getChildAt(i + j);</span><br><span class="line">                            &#125;</span><br><span class="line">                            bindings[index] = DataBindingUtil.bind(bindingComponent, included,</span><br><span class="line">                                    layoutId);</span><br><span class="line">                            i += includeCount - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isInclude) &#123;</span><br><span class="line">                mapBindings(bindingComponent, child, bindings, includes, viewsWithIds, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对标签进行了解析，以<code>layout</code>开头的，以<code>binding</code>开头的 把<code>view</code>填充到<code>object[]</code>数组里</p></li><li><p>这样内存中就了<code>textview</code> <code>edittext</code>的副本，这是内存的额外开销</p></li></ul><p><code>这是第一个为什么内存大的原因</code></p><p><strong>我们来看看M-V V-M更新的机制</strong></p><p><code>ActivityHomeBinding</code>继承自<code>ViewDataBinding</code> ，看下<code>ViewDataBinding</code>的<code>static</code>静态代码块初始都做了啥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &lt; VERSION_CODES.KITKAT) &#123;</span><br><span class="line">        ROOT_REATTACHED_LISTENER = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ROOT_REATTACHED_LISTENER = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</span><br><span class="line">            <span class="meta">@TargetApi(VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// execute the pending bindings.</span></span><br><span class="line">                <span class="keyword">final</span> ViewDataBinding binding = getBinding(v);</span><br><span class="line">                binding.mRebindRunnable.run();</span><br><span class="line">                v.removeOnAttachStateChangeListener(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始就注册了一个对view attachtowindow的监听</p><p><code>binding.mRebindRunnable</code>是个的Runnable</p><p>这是第二个为什么占内存的原因，因为每一个使用了<code>databinding</code>的界面都会生成一个这个<code>Runnable</code>，同时数据的双向绑定也是在这里完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mRebindRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mPendingRebind = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        processReferenceQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            <span class="comment">// Nested so that we don&#x27;t get a lint warning in IntelliJ</span></span><br><span class="line">            <span class="keyword">if</span> (!mRoot.isAttachedToWindow()) &#123;</span><br><span class="line">                <span class="comment">// Don&#x27;t execute the pending bindings until the View</span></span><br><span class="line">                <span class="comment">// is attached again.</span></span><br><span class="line">                mRoot.removeOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                mRoot.addOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        executePendingBindings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>看下<code>executePendingBindings</code>最后会执行到<code>protected abstract void executeBindings()</code> 这是一个抽象类，我们看它在<code>ActivityHomeBindingImpl</code>的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="comment">// batch finished</span></span><br><span class="line">    <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x7L</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.editAddress, viewModelUserFieldAddress);</span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.nickName, viewModelUserFieldNickName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x4L</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setTextWatcher(<span class="keyword">this</span>.editAddress, (androidx.databinding.adapters.TextViewBindingAdapter.BeforeTextChanged)<span class="keyword">null</span>, (androidx.databinding.adapters.TextViewBindingAdapter.OnTextChanged)<span class="keyword">null</span>, (androidx.databinding.adapters.TextViewBindingAdapter.AfterTextChanged)<span class="keyword">null</span>, editAddressandroidTextAttrChanged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看到这里应该就明白了，<code>UI和data是怎么双向绑定的</code></li></ul><p>那么还有一个内存过大的原因，我们看<code>ActivityHomeBindingImpl</code>的构造中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(androidx.databinding.DataBindingComponent bindingComponent, View root, Object[] bindings)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个<code>invalidateAll</code>会执行<code>requestRebind</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRebind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContainingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContainingBinding.requestRebind();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> LifecycleOwner owner = <span class="keyword">this</span>.mLifecycleOwner;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Lifecycle.State state = owner.getLifecycle().getCurrentState();</span><br><span class="line">            <span class="keyword">if</span> (!state.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// wait until lifecycle owner is started</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPendingRebind) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingRebind = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (USE_CHOREOGRAPHER) &#123;</span><br><span class="line">            mChoreographer.postFrameCallback(mFrameCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mUIThreadHandler.post(mRebindRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这里给主线程发送消息,这也是内存开销之一</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是MVVM&quot;&gt;&lt;a href=&quot;#什么是MVVM&quot; class=&quot;headerlink&quot; title=&quot;什么是MVVM&quot;&gt;&lt;/a&gt;什么是MVVM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;双向绑定。数据变更&lt;code&gt;UI&lt;/code&gt;会自动刷新，&lt;code&gt;UI&lt;/code</summary>
      
    
    
    
    
  </entry>
  
</feed>
