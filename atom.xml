<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SteveZhang博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-09T22:20:05.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jetpack系列—底部导航路由BottomNavigationView原理</title>
    <link href="http://example.com/2022/02/09/Jetpack%E7%B3%BB%E5%88%97%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/02/09/Jetpack%E7%B3%BB%E5%88%97%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</id>
    <published>2022-02-09T02:49:29.000Z</published>
    <updated>2022-02-09T22:20:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍BottomNavigationView及其实现原理</p><span id="more"></span><p>bottom_nav_menu.xml 配置底部item的显示内容和个数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_host_fragment_activity_main&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/nav_view&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/mobile_navigation&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>defaultNavHost=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>是否和系统的返回键相关联</p><p>如果相关联，如果回退栈中有fragment 那么就会拦截返回键  如果没有的话就执行返回键的默认行为</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>navGraph=<span class="string">&quot;@navigation/mobile_navigation&quot;</span></span><br></pre></td></tr></table></figure><p>底部路由结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/mobile_navigation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@+id/navigation_home&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;--节点所配置的fragment --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.home.HomeFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_home&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_dashboard&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.dashboard.DashboardFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_dashboard&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_dashboard&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_notifications&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.notifications.NotificationsFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_notifications&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_notifications&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>startDestination=<span class="string">&quot;@+id/navigation_home&quot;</span></span><br></pre></td></tr></table></figure><p>默认要显示的页面是哪一个</p><p>通过可视化界面配置fragment</p><p><img src="/../images/image-20220209110225072.png" alt="image-20220209110225072"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.home.HomeFragment&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/title_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_home&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 当前fragment跳转到下一页的动作，所以必须指定目标页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/id_action&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:destination</span>=<span class="string">&quot;@id/navigation_dashboard&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指的是创建当前fragment时需要传递的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;arg1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:argType</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--通过url拉起页面，隐式意图  就是页面路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">deepLink</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/deepLink&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:uri</span>=<span class="string">&quot;www.imooc.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看承载的Fragment的实现逻辑</p><p>NavHostFragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">final</span> Context context = requireContext();</span><br><span class="line"><span class="comment">//切换fragment的能力委托给NavHostController</span></span><br><span class="line">    mNavController = <span class="keyword">new</span> NavHostController(context);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加了两个导航器</span></span><br><span class="line">    onCreateNavController(mNavController);</span><br><span class="line"></span><br><span class="line">    Bundle navState = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        navState = savedInstanceState.getBundle(KEY_NAV_CONTROLLER_STATE);</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            mDefaultNavHost = <span class="keyword">true</span>;</span><br><span class="line">            getParentFragmentManager().beginTransaction()</span><br><span class="line">                    .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                    .commit();</span><br><span class="line">        &#125;</span><br><span class="line">        mGraphId = savedInstanceState.getInt(KEY_GRAPH_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (navState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Navigation controller state overrides arguments</span></span><br><span class="line">        mNavController.restoreState(navState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mGraphId != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Set from onInflate()</span></span><br><span class="line">        mNavController.setGraph(mGraphId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// See if it was set by NavHostFragment.create()</span></span><br><span class="line">        <span class="keyword">final</span> Bundle args = getArguments();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> graphId = args != <span class="keyword">null</span> ? args.getInt(KEY_GRAPH_ID) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> Bundle startDestinationArgs = args != <span class="keyword">null</span></span><br><span class="line">                ? args.getBundle(KEY_START_DESTINATION_ARGS)</span><br><span class="line">                : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">            mNavController.setGraph(graphId, startDestinationArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onCreateNavController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreateNavController</span><span class="params">(<span class="meta">@NonNull</span> NavController navController)</span> </span>&#123;</span><br><span class="line">    navController.getNavigatorProvider().addNavigator(</span><br><span class="line">      <span class="comment">//第一个，给dialogframgent提供跳转，切换的能力</span></span><br><span class="line">            <span class="keyword">new</span> DialogFragmentNavigator(requireContext(), getChildFragmentManager()));</span><br><span class="line">  <span class="comment">//第二个，是给fragment提供跳转</span></span><br><span class="line">    navController.getNavigatorProvider().addNavigator(createFragmentNavigator());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，还在NavController的构造函数里添加了两个默认的navigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavController</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    <span class="keyword">while</span> (context <span class="keyword">instanceof</span> ContextWrapper) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            mActivity = (Activity) context;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context = ((ContextWrapper) context).getBaseContext();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这个导航器的作用是配置的默认启动的页面，启动后会跳转，唯一被用到的地方</span></span><br><span class="line">    mNavigatorProvider.addNavigator(<span class="keyword">new</span> NavGraphNavigator(mNavigatorProvider));</span><br><span class="line">    <span class="comment">//为activity跳转提供支持</span></span><br><span class="line">    mNavigatorProvider.addNavigator(<span class="keyword">new</span> ActivityNavigator(mContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么把navigator添加到provider里呢？</p><p>privoder本质是一个hashmap，存储导航器的实例</p><p>这4个导航器有什么相同点有什么不同点？</p><p>都继承自Navigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型必须继承NavDestination 而NavDestination就是dialog activity fragment 之所以这么设计泛型，是需要activity的navigator只能创建activity的navigator 而fragment只能创建fragment的导航器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Navigator</span>&lt;<span class="title">D</span> <span class="keyword">extends</span> <span class="title">NavDestination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//1.每一个navigator的子类都必须标注一个Name的注解，只有这样，才会把它添加到provider里，我们之前说provider是一个hashmap 它的key就是我们标注的name的名字，value是navigator的实例本身</span></span><br><span class="line">  <span class="comment">//2.navigator在创建destination的时候,它会解析navigator上的name，以此来得到导航器的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Name &#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建Destination  看下面Destination的构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> D <span class="title">createDestination</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//跳转逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> D destination, <span class="meta">@Nullable</span> Bundle args,<span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//是否拦截系统的返回键，实现回退栈的操作</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">popBackStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="comment">//空接口，实现用来做额外的事情，比如过渡元素，转场动画</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Extras</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入一个navigator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavDestination</span><span class="params">(<span class="meta">@NonNull</span> Navigator&lt;? extends NavDestination&gt; navigator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(NavigatorProvider.getNameForNavigator(navigator.getClass()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入一个navigatorName 这个name就是通过标注在navigator上面的name的注解得到的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavDestination</span><span class="params">(<span class="meta">@NonNull</span> String navigatorName)</span> </span>&#123;</span><br><span class="line">    mNavigatorName = navigatorName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么要传入navigatorName呢？</p><p>NavDestination就是我们跳转的一个个页面，我们通过传入的navigatorName在provider这个hashmap中得到destination实例，就是这么得到我们的跳转的实例的</p><p>我们接着看Navigator中的navigate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> D destination, <span class="meta">@Nullable</span> Bundle args,<span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span></span>;</span><br></pre></td></tr></table></figure><p>由于activity fragment dialog的具体跳转方法都不一样，所以，不会交由父类来实现，所以这里是抽象的，使用了模板方法</p><p>Navigator父类了解后，我们来了了解其子类的实现</p><p>ActivityNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//provider中的key的名字就是activity</span></span><br><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;activity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">ActivityNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">      mIntent = intent;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setTargetPackage</span><span class="params">(<span class="meta">@Nullable</span> String packageName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mIntent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">      &#125;</span><br><span class="line">      mIntent.setPackage(packageName);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">setData</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">setComponentName</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面这些类都是为了构造或传入Intent对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line">    <span class="comment">//核心方法navigate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//1.获取跳转Intent</span></span><br><span class="line">        <span class="keyword">if</span> (destination.getIntent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Destination &quot;</span> + destination.getId()</span><br><span class="line">                    + <span class="string">&quot; does not have an Intent set.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(destination.getIntent());</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.putExtras(args);</span><br><span class="line">            String dataPattern = destination.getDataPattern();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(dataPattern)) &#123;</span><br><span class="line">                <span class="comment">// Fill in the data pattern with the args to build a valid URI</span></span><br><span class="line">                StringBuffer data = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                Pattern fillInPattern = Pattern.compile(<span class="string">&quot;\\&#123;(.+?)\\&#125;&quot;</span>);</span><br><span class="line">                Matcher matcher = fillInPattern.matcher(dataPattern);</span><br><span class="line">                <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                    String argName = matcher.group(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (args.containsKey(argName)) &#123;</span><br><span class="line">                        matcher.appendReplacement(data, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="comment">//noinspection ConstantConditions</span></span><br><span class="line">                        data.append(Uri.encode(args.get(argName).toString()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Could not find &quot;</span> + argName + <span class="string">&quot; in &quot;</span></span><br><span class="line">                                + args + <span class="string">&quot; to fill data pattern &quot;</span> + dataPattern);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                matcher.appendTail(data);</span><br><span class="line">                intent.setData(Uri.parse(data.toString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// extra 获取额外的flag</span></span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            intent.addFlags(extras.getFlags());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//设置intent的跳转的flag</span></span><br><span class="line">        <span class="keyword">if</span> (!(mContext <span class="keyword">instanceof</span> Activity)) &#123;</span><br><span class="line">            <span class="comment">// If we&#x27;re not launching from an Activity context we have to launch in a new task.</span></span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span> &amp;&amp; navOptions.shouldLaunchSingleTop()) &#123;</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//设置跳转的当前页面的hostid 用来做页面溯源</span></span><br><span class="line">        <span class="keyword">if</span> (mHostActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Intent hostIntent = mHostActivity.getIntent();</span><br><span class="line">            <span class="keyword">if</span> (hostIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> hostCurrentId = hostIntent.getIntExtra(EXTRA_NAV_CURRENT, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (hostCurrentId != <span class="number">0</span>) &#123;</span><br><span class="line">                    intent.putExtra(EXTRA_NAV_SOURCE, hostCurrentId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> destId = destination.getId();</span><br><span class="line">        intent.putExtra(EXTRA_NAV_CURRENT, destId);</span><br><span class="line">      <span class="comment">//设置跳转的动画</span></span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// For use in applyPopAnimationsToPendingTransition()</span></span><br><span class="line">            intent.putExtra(EXTRA_POP_ENTER_ANIM, navOptions.getPopEnterAnim());</span><br><span class="line">            intent.putExtra(EXTRA_POP_EXIT_ANIM, navOptions.getPopExitAnim());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//使用context.startActivity来进行真正的跳转</span></span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            ActivityOptionsCompat activityOptions = extras.getActivityOptions();</span><br><span class="line">            <span class="keyword">if</span> (activityOptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ActivityCompat.startActivity(mContext, intent, activityOptions.toBundle());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mContext.startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span> &amp;&amp; mHostActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> enterAnim = navOptions.getEnterAnim();</span><br><span class="line">            <span class="keyword">int</span> exitAnim = navOptions.getExitAnim();</span><br><span class="line">            <span class="keyword">if</span> (enterAnim != -<span class="number">1</span> || exitAnim != -<span class="number">1</span>) &#123;</span><br><span class="line">                enterAnim = enterAnim != -<span class="number">1</span> ? enterAnim : <span class="number">0</span>;</span><br><span class="line">                exitAnim = exitAnim != -<span class="number">1</span> ? exitAnim : <span class="number">0</span>;</span><br><span class="line">                mHostActivity.overridePendingTransition(enterAnim, exitAnim);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来DialogFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;dialog&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogFragmentNavigator</span> <span class="keyword">extends</span>  <span class="title">Navigator</span>&lt;<span class="title">DialogFragmentNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//同样的创建，传入navigator通过navigator来取出它的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//设置className</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setClassName</span><span class="params">(<span class="meta">@NonNull</span> String className)</span> </span>&#123;</span><br><span class="line">      mClassName = className;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//核心跳转navigate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFragmentManager.isStateSaved()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Ignoring navigate() call: FragmentManager has already&quot;</span></span><br><span class="line">                    + <span class="string">&quot; saved its state&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String className = destination.getClassName();</span><br><span class="line">      <span class="comment">//1.获取classname 全类名</span></span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            className = mContext.getPackageName() + className;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//2.通过classname 反射构造一个fragment的对象  instantiate这个方法</span></span><br><span class="line">        <span class="keyword">final</span> Fragment frag = mFragmentManager.getFragmentFactory().instantiate(</span><br><span class="line">                mContext.getClassLoader(), className);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//3.如果不是dialogfragment的子类，就抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (!DialogFragment.class.isAssignableFrom(frag.getClass())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Dialog destination &quot;</span> + destination.getClassName()</span><br><span class="line">                    + <span class="string">&quot; is not an instance of DialogFragment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//4.强转成DialogFragment</span></span><br><span class="line">        <span class="keyword">final</span> DialogFragment dialogFragment = (DialogFragment) frag;</span><br><span class="line">        dialogFragment.setArguments(args);</span><br><span class="line">        dialogFragment.getLifecycle().addObserver(mObserver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5.通过show方法就把dialogfragment展示出来</span></span><br><span class="line">        dialogFragment.show(mFragmentManager, DIALOG_TAG + mDialogCount++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看FragmentNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;fragment&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">FragmentNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@NavDestination</span>.ClassType(Fragment.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> <span class="keyword">extends</span> <span class="title">NavDestination</span> </span>&#123;</span><br><span class="line">      <span class="comment">//同上，设置全类名</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setClassName</span><span class="params">(<span class="meta">@NonNull</span> String className)</span> </span>&#123;</span><br><span class="line">            mClassName = className;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFragmentManager.isStateSaved()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Ignoring navigate() call: FragmentManager has already&quot;</span></span><br><span class="line">                    + <span class="string">&quot; saved its state&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//1.通过destination获取classname 全类名</span></span><br><span class="line">        String className = destination.getClassName();</span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            className = mContext.getPackageName() + className;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//2.实例化一个fragment对象，并设置arguments</span></span><br><span class="line">        <span class="keyword">final</span> Fragment frag = instantiateFragment(mContext, mFragmentManager,</span><br><span class="line">                className, args);</span><br><span class="line">        frag.setArguments(args);</span><br><span class="line">      <span class="comment">//3.得到Transaction对象</span></span><br><span class="line">        <span class="keyword">final</span> FragmentTransaction ft = mFragmentManager.beginTransaction();</span><br><span class="line"><span class="comment">//跳转动画</span></span><br><span class="line">        <span class="keyword">int</span> enterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> exitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popEnterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popExitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (enterAnim != -<span class="number">1</span> || exitAnim != -<span class="number">1</span> || popEnterAnim != -<span class="number">1</span> || popExitAnim != -<span class="number">1</span>) &#123;</span><br><span class="line">            enterAnim = enterAnim != -<span class="number">1</span> ? enterAnim : <span class="number">0</span>;</span><br><span class="line">            exitAnim = exitAnim != -<span class="number">1</span> ? exitAnim : <span class="number">0</span>;</span><br><span class="line">            popEnterAnim = popEnterAnim != -<span class="number">1</span> ? popEnterAnim : <span class="number">0</span>;</span><br><span class="line">            popExitAnim = popExitAnim != -<span class="number">1</span> ? popExitAnim : <span class="number">0</span>;</span><br><span class="line">            ft.setCustomAnimations(enterAnim, exitAnim, popEnterAnim, popExitAnim);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.通过replace跳转，这种方式不好，会告诉页面生命周期重启，需要自己再构建一个使用hide和show的FragmentNavigator</span></span><br><span class="line">        ft.replace(mContainerId, frag);</span><br><span class="line">        ft.setPrimaryNavigationFragment(frag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="meta">@IdRes</span> <span class="keyword">int</span> destId = destination.getId();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> initialNavigation = mBackStack.isEmpty();</span><br><span class="line">        <span class="comment">// TODO Build first class singleTop behavior for fragments</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTopReplacement = navOptions != <span class="keyword">null</span> &amp;&amp; !initialNavigation</span><br><span class="line">                &amp;&amp; navOptions.shouldLaunchSingleTop()</span><br><span class="line">                &amp;&amp; mBackStack.peekLast() == destId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isAdded;</span><br><span class="line">        <span class="keyword">if</span> (initialNavigation) &#123;</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSingleTopReplacement) &#123;</span><br><span class="line">            <span class="comment">// Single Top means we only want one instance on the back stack</span></span><br><span class="line">            <span class="keyword">if</span> (mBackStack.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// If the Fragment to be replaced is on the FragmentManager&#x27;s</span></span><br><span class="line">                <span class="comment">// back stack, a simple replace() isn&#x27;t enough so we</span></span><br><span class="line">                <span class="comment">// remove it from the back stack and put our replacement</span></span><br><span class="line">                <span class="comment">// on the back stack in its place</span></span><br><span class="line">                mFragmentManager.popBackStack(</span><br><span class="line">                        generateBackStackName(mBackStack.size(), mBackStack.peekLast()),</span><br><span class="line">                        FragmentManager.POP_BACK_STACK_INCLUSIVE);</span><br><span class="line">                ft.addToBackStack(generateBackStackName(mBackStack.size(), destId));</span><br><span class="line">            &#125;</span><br><span class="line">            isAdded = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ft.addToBackStack(generateBackStackName(mBackStack.size() + <span class="number">1</span>, destId));</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;View, String&gt; sharedElement : extras.getSharedElements().entrySet()) &#123;</span><br><span class="line">                ft.addSharedElement(sharedElement.getKey(), sharedElement.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ft.setReorderingAllowed(<span class="keyword">true</span>);</span><br><span class="line">        ft.commit();</span><br><span class="line">        <span class="comment">// The commit succeeded, update our view of the world</span></span><br><span class="line">        <span class="keyword">if</span> (isAdded) &#123;</span><br><span class="line">            mBackStack.add(destId);</span><br><span class="line">            <span class="keyword">return</span> destination;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后来看NavGraphNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;navigation&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavGraphNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">NavGraph</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里没有new Destination对象，而是new了一个NavGraph,传入Navigator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavGraph <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NavGraph(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NavGraph.java</p><p>是NavDestination的子类，是特殊的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavGraph</span> <span class="keyword">extends</span> <span class="title">NavDestination</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">NavDestination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//node数组，这里就是存储了一个个跳转节点的的实例，也就是我们在 mobile_navigation.xml中声明的一个个fragment activity实例，都会被存储到mNodes中</span></span><br><span class="line">    <span class="keyword">final</span> SparseArrayCompat&lt;NavDestination&gt; mNodes = <span class="keyword">new</span> SparseArrayCompat&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个就是对应mobile_navigation.xml中指定的app:startDestination=&quot;@+id/navigation_dashboard&quot; 而一旦xml被解析，这里就获取到我们指定的页面id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStartDestId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么又是在哪里解析的，什么时候解析的呢？</p><p>还记得我们上面的宿主fragment NavHostFragment 我们在oncreate中创建了NavHostController</p><p>我们看下Controller中的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId)</span> </span>&#123;</span><br><span class="line">        setGraph(graphResId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId, <span class="meta">@Nullable</span> Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//调用navinflater的inflate方法来解析xml文件</span></span><br><span class="line">        setGraph(getNavInflater().inflate(graphResId), startDestinationArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个inflate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> NavGraph <span class="title">inflate</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId)</span> </span>&#123;</span><br><span class="line">    Resources res = mContext.getResources();</span><br><span class="line">  <span class="comment">//1.获取xml parser来解析xml文件</span></span><br><span class="line">    XmlResourceParser parser = res.getXml(graphResId);</span><br><span class="line">  <span class="comment">//2.获取属性</span></span><br><span class="line">    <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG</span><br><span class="line">                &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">            <span class="comment">// Empty loop</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> XmlPullParserException(<span class="string">&quot;No start tag found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String rootElement = parser.getName();</span><br><span class="line">      <span class="comment">//3.实际上是另一个inflate方法来解析构造出的具体的NavDestion对象  这里主要通过parser获取标签名，再通过name 在provider中拿到navigator 再通过navigator来创建各自的navigation</span></span><br><span class="line">        NavDestination destination = inflate(res, parser, attrs, graphResId);</span><br><span class="line">        <span class="keyword">if</span> (!(destination <span class="keyword">instanceof</span> NavGraph)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Root element &lt;&quot;</span> + rootElement + <span class="string">&quot;&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; did not inflate into a NavGraph&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (NavGraph) destination;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="comment">//也就是说我们在编写mobile_navigation.xml中的根节点必须是navigation 否则解析后会抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Exception inflating &quot;</span></span><br><span class="line">                + res.getResourceName(graphResId) + <span class="string">&quot; line &quot;</span></span><br><span class="line">                + parser.getLineNumber(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过navigator来创建具体的跳转navigation实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> NavDestination <span class="title">inflate</span><span class="params">(<span class="meta">@NonNull</span> Resources res, <span class="meta">@NonNull</span> XmlResourceParser parser,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@NonNull</span> AttributeSet attrs, <span class="keyword">int</span> graphResId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//1.通过provider获取具体的navigator对象 parser.getName 得到的就是标签的名fragment dialog activity</span></span><br><span class="line">    Navigator&lt;?&gt; navigator = mNavigatorProvider.getNavigator(parser.getName());</span><br><span class="line">  <span class="comment">//2.得到navigator后，就通过调用 createDestination方法来得到创建NavDestination 最后也是返回的是这个dest</span></span><br><span class="line">    <span class="keyword">final</span> NavDestination dest = navigator.createDestination();</span><br><span class="line"></span><br><span class="line">    dest.onInflate(mContext, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> innerDepth = parser.getDepth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; ((depth = parser.getDepth()) &gt;= innerDepth</span><br><span class="line">            || type != XmlPullParser.END_TAG)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (depth &gt; innerDepth) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">      <span class="comment">//3.中间解析各个子标签</span></span><br><span class="line">      <span class="comment">//如查是argument标签，就把argument数据inflate到destination中</span></span><br><span class="line">        <span class="keyword">if</span> (TAG_ARGUMENT.equals(name)) &#123;</span><br><span class="line">            inflateArgumentForDestination(res, dest, attrs, graphResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_DEEP_LINK.equals(name)) &#123;</span><br><span class="line">          <span class="comment">//如果是deeplink 就把信息inflate到destination</span></span><br><span class="line">            inflateDeepLink(res, dest, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_ACTION.equals(name)) &#123;</span><br><span class="line">          <span class="comment">//如果是action就把信息infalte到destinatioin中的actioin中</span></span><br><span class="line">            inflateAction(res, dest, attrs, parser, graphResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_INCLUDE.equals(name) &amp;&amp; dest <span class="keyword">instanceof</span> NavGraph) &#123;</span><br><span class="line">            <span class="keyword">final</span> TypedArray a = res.obtainAttributes(</span><br><span class="line">                    attrs, androidx.navigation.R.styleable.NavInclude);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> id = a.getResourceId(</span><br><span class="line">                    androidx.navigation.R.styleable.NavInclude_graph, <span class="number">0</span>);</span><br><span class="line">            ((NavGraph) dest).addDestination(inflate(id));</span><br><span class="line">            a.recycle();</span><br><span class="line">          <span class="comment">//如查是NavGraph </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dest <span class="keyword">instanceof</span> NavGraph) &#123;</span><br><span class="line">          <span class="comment">//就递归去调用 inflate解析子标签，然后把子标签生成的destinatioin加入到NavGraph的mNodes中去</span></span><br><span class="line">            ((NavGraph) dest).addDestination(inflate(res, parser, attrs, graphResId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析完Navgraph后，把graph和controller相关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NonNull</span> NavGraph graph, <span class="meta">@Nullable</span> Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mGraph != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Pop everything from the old graph off the back stack</span></span><br><span class="line">        popBackStackInternal(mGraph.getId(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//把graph 赋值给controller中的mGraph变量</span></span><br><span class="line">    mGraph = graph;</span><br><span class="line">  <span class="comment">//这里就会把默认显示的页面给打开</span></span><br><span class="line">    onGraphCreated(startDestinationArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回头看看NavGraphNavigator.java 的navigate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> NavGraph destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//拿到默认展示页面的id</span></span><br><span class="line">    <span class="keyword">int</span> startId = destination.getStartDestination();</span><br><span class="line">    <span class="keyword">if</span> (startId == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;no start destination defined via&quot;</span></span><br><span class="line">                + <span class="string">&quot; app:startDestination for &quot;</span></span><br><span class="line">                + destination.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//有这个id后，就能拿到默认展示页面的destination对象</span></span><br><span class="line">    NavDestination startDestination = destination.findNode(startId, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (startDestination == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> String dest = destination.getStartDestDisplayName();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;navigation destination &quot;</span> + dest</span><br><span class="line">                + <span class="string">&quot; is not a direct child of this NavGraph&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//然后通过name在provider中拿到navigator 这个navigator可能是fragmentnavigator activitynavigator dialognavigator</span></span><br><span class="line">    Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(</span><br><span class="line">            startDestination.getNavigatorName());</span><br><span class="line">  <span class="comment">//执行具体的navigator的naigate方法把默认页面启动起来</span></span><br><span class="line">    <span class="keyword">return</span> navigator.navigate(startDestination, startDestination.addInDefaultArgs(args),</span><br><span class="line">            navOptions, navigatorExtras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Navigation各类之间的关系</p><p><img src="/../images/image-20220209144442113.png" alt="image-20220209144442113"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要介绍BottomNavigationView及其实现原理&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Gradle基础</title>
    <link href="http://example.com/2022/02/09/Gradle%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/02/09/Gradle%E5%9F%BA%E7%A1%80/</id>
    <published>2022-02-08T20:40:17.000Z</published>
    <updated>2022-02-09T22:21:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>讲解Gradle基础知识，语法及生命周期</p><span id="more"></span><h2 id="Gradle-基础"><a href="#Gradle-基础" class="headerlink" title="Gradle 基础"></a>Gradle 基础</h2><p>使用 .&#x2F;gradlew clean -q 来过滤只显示我们的自己的输出日志</p><h3 id="一-语法"><a href="#一-语法" class="headerlink" title="一 语法"></a>一 语法</h3><h4 id="1-1-基础语法"><a href="#1-1-基础语法" class="headerlink" title="1.1 基础语法"></a>1.1 基础语法</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;Hello,&quot;</span> + <span class="string">&quot;World&quot;</span></span><br><span class="line">String str2 = str.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="keyword">def</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">array.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">array.each&#123;<span class="comment">//闭包特性，只有一个参数默认为it 可以省略 it -&gt; 不写</span></span><br><span class="line">  println(<span class="string">&quot;each item is $it&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射表</span></span><br><span class="line"><span class="keyword">def</span> map = [<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mooc&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;100&quot;</span>]</span><br><span class="line">println(<span class="string">&quot;age is $&#123;map[&quot;</span>age<span class="string">&quot;]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  println(<span class="string">&quot;i is $i&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">def</span> hello(String name)&#123;</span><br><span class="line">  println(<span class="string">&quot;Hello, $name&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-DSL"><a href="#1-2-DSL" class="headerlink" title="1.2 DSL"></a>1.2 DSL</h4><ul><li>Domain Specific Language</li><li>领域专用语言</li></ul><p>只能用于构建，不能干别的，所以说是领域专用语言</p><p>这个是android build.gradle 的DSL</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">30</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;30.0.3&quot;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.steve.gradle_study&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-闭包"><a href="#1-3-闭包" class="headerlink" title="1.3 闭包"></a>1.3 闭包</h4><p>DSL的实现是基于groovy中的闭包实现的</p><ul><li>开放匿名的代码块，可以接受参数，具有返回值，也可以被分配给变量</li><li>定义规则:<em>{ [params -&gt; ] statements }</em></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> c = &#123;</span><br><span class="line">    println(<span class="string">&quot;hello closure&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c2 = &#123; it  -&gt; println (<span class="string">&quot;it is $it&quot;</span>)&#125;</span><br><span class="line">c2(<span class="string">&quot;yt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c3 = &#123;  println (<span class="string">&quot;it is $it&quot;</span>)&#125;</span><br><span class="line">c3(<span class="string">&quot;yt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c4 = &#123; name,age -&gt;</span><br><span class="line">    println (<span class="string">&quot;name is $name&quot;</span>)</span><br><span class="line">    println (<span class="string">&quot;age is $age&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">c4(<span class="string">&quot;wwww&quot;</span>,<span class="number">33</span>)</span><br></pre></td></tr></table></figure><h4 id="1-4-实现自己的DSL"><a href="#1-4-实现自己的DSL" class="headerlink" title="1.4 实现自己的DSL"></a>1.4 实现自己的DSL</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户配置成这样，我们怎么能取到对应的配置的值，使用对象关联起来</p><p>里面的defaultconfig 闭包对应的对象</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefalutConfig</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> String versionName</span><br><span class="line">    <span class="keyword">def</span> versionName(String versionName)&#123;</span><br><span class="line">        <span class="built_in">this</span>.versionName = versionName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外面的android 闭包对应的对象</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Android</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> compileSdkVersion</span><br><span class="line">    <span class="keyword">private</span> DefalutConfig defalutConfig</span><br><span class="line"></span><br><span class="line">    Android()&#123;</span><br><span class="line">        <span class="built_in">this</span>.defalutConfig = <span class="keyword">new</span> DefalutConfig()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> compileSdkVersion(<span class="keyword">int</span> compileSdkVersion)&#123;</span><br><span class="line">        <span class="built_in">this</span>.compileSdkVersion =compileSdkVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//传入一个闭包，接收到闭包后跟我们的DefaultConfig成员变量关联起来</span></span><br><span class="line">    <span class="keyword">def</span> defaultConfig(Closure closure)&#123;</span><br><span class="line">      <span class="comment">//关联之后，对象就获到到闭包中对应同名的值了</span></span><br><span class="line">        closure.setDelegate(defalutConfig)</span><br><span class="line">        closure.call()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> myAndroid = &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Android a = <span class="keyword">new</span> Android()</span><br><span class="line"><span class="comment">//将闭包与具体对象关联起来，这样在闭包中设置的值就到了对象a中了，我们可以打印a 获取a中的值</span></span><br><span class="line">myAndroid.delegate = a</span><br><span class="line">myAndroid.call()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./graldew clean -q</span><br></pre></td></tr></table></figure><h3 id="二-Gradle构建脚本基础"><a href="#二-Gradle构建脚本基础" class="headerlink" title="二 Gradle构建脚本基础"></a>二 Gradle构建脚本基础</h3><p>几个关键的文件</p><ul><li><strong>settings.gradle</strong>—定义全局参与构建的模块</li><li><strong>build.gradle</strong>—有两类build.gradle文件，一个是全局的定义共用参数，各个单独的定义自己的配置 </li><li><strong>gradle.properties</strong>—定义开关型参数的文件</li></ul><h3 id="三-Gradle构建的生命周期"><a href="#三-Gradle构建的生命周期" class="headerlink" title="三 Gradle构建的生命周期"></a>三 Gradle构建的生命周期</h3><ul><li><strong>初始化阶段</strong>—收集所有要参与构建的子工程，创建一个项目层次结构，并且为每一个项目创建一个project实例，和这个阶段关系最大的就是我们的settings.gradle文件</li><li>配置阶段—执行各个子工程自己的build.gradle，对project进行配置，并且根据配置形成一个任务依赖链，以便在下一个阶段执行阶段，方便执行任务</li><li>执行阶段—执行上一阶段的tasks</li></ul><p>我们在settings.gradle中添加生命周期的监听函数</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加构建的生命周期</span></span><br><span class="line">gradle.addBuildListener(<span class="keyword">new</span> BuildAdapter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> settingsEvaluated(Settings settings) &#123;</span><br><span class="line">        <span class="built_in">super</span>.settingsEvaluated(settings)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 初始化阶段完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> projectsEvaluated(Gradle gradle) &#123;</span><br><span class="line">        <span class="built_in">super</span>.projectsEvaluated(gradle)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 配置阶段完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> buildFinished(BuildResult result) &#123;</span><br><span class="line">        <span class="built_in">super</span>.buildFinished(result)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 构建结束&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><p><img src="/../images/image-20220209051751641.png" alt="image-20220209051751641"></p><p>几个主要角色</p><ul><li><strong>初始化阶段</strong>-root project</li><li><strong>配置阶段</strong>-project</li><li><strong>执行阶段</strong>-task</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;讲解Gradle基础知识，语法及生命周期&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Kotlin 委托属性</title>
    <link href="http://example.com/2022/02/07/Kotlin-%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/"/>
    <id>http://example.com/2022/02/07/Kotlin-%E5%A7%94%E6%89%98%E5%B1%9E%E6%80%A7/</id>
    <published>2022-02-06T22:06:04.000Z</published>
    <updated>2022-02-09T00:14:15.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Kotlin委托属性"><a href="#Kotlin委托属性" class="headerlink" title="Kotlin委托属性"></a>Kotlin委托属性</h2><p>Kotlin常见的委托属性包括两种：延迟属性(lazy properties) 与可观察属性(observable properties)。</p><h3 id="委托属性的语法"><a href="#委托属性的语法" class="headerlink" title="委托属性的语法"></a>委托属性的语法</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>/<span class="keyword">val</span> &lt;属性名&gt;:&lt;类型&gt; <span class="keyword">by</span> &lt;表达式&gt;</span><br></pre></td></tr></table></figure><h3 id="用例"><a href="#用例" class="headerlink" title="用例"></a>用例</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> INSTANCE:Singleton <span class="keyword">by</span> lazy(mode = LazyThreadSafetyMode.SYNCHRONIZED)&#123;</span><br><span class="line"> Singleton()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里所说的委托就是在by 后面的表达式；</li><li>属性对应的get()（与set()）会被委托给它的getValue()与setValue()函数；</li><li>属性的委托需要提供一个getValue函数；</li></ul><p>接下来我们重点介绍下上文中我们用到的延迟属性lazy:</p><p>在Lazy.kt 文件中，声明了Lazy接口的getValue扩展函数，所以最终赋值的时候会调用该函数：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@kotlin</span> .interal.InlineOnly</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">inline</span> <span class="keyword">operator</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> Lazy<span class="type">&lt;T&gt;</span>.<span class="title">getValue</span><span class="params">(thieRef:<span class="type">Any</span>?,property:<span class="type">KProperty</span>&lt;*&gt;)</span></span>:T = value</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Kotlin委托属性&quot;&gt;&lt;a href=&quot;#Kotlin委托属性&quot; class=&quot;headerlink&quot; title=&quot;Kotlin委托属性&quot;&gt;&lt;/a&gt;Kotlin委托属性&lt;/h2&gt;&lt;p&gt;Kotlin常见的委托属性</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Vue - 动画</title>
    <link href="http://example.com/2022/02/02/Vue-%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2022/02/02/Vue-%E5%8A%A8%E7%94%BB/</id>
    <published>2022-02-02T10:39:12.000Z</published>
    <updated>2022-02-06T03:58:29.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在CSS过渡和动画中自动应用class</li><li>可以配合使用第三方CSS动画库，如Animate.css</li><li>在过渡钩子函数中使用JavaScript直接操作DOM</li><li>可以配合全名用第三方JavaScript动画库，如Velocity.js</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;在CSS过渡和动画中自动应用class&lt;/li&gt;
&lt;li&gt;可以配合使用第三方CSS动画库，如Animate.css&lt;/li&gt;
&lt;li&gt;在过渡钩子函数中使用JavaScript直接操作DOM&lt;/li&gt;
&lt;li&gt;可以配合全名用第三方JavaScript动画库，如Ve</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Kotlin 单例object &amp; Kotlin和 Java 单例模式</title>
    <link href="http://example.com/2022/02/02/kotlin%20%E5%8D%95%E4%BE%8B/"/>
    <id>http://example.com/2022/02/02/kotlin%20%E5%8D%95%E4%BE%8B/</id>
    <published>2022-02-02T08:29:10.000Z</published>
    <updated>2022-02-09T00:14:06.000Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="单例object"><a href="#单例object" class="headerlink" title="单例object"></a>单例object</h2><h3 id="object的定义"><a href="#object的定义" class="headerlink" title="object的定义"></a>object的定义</h3><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Kotlin"><a href="#Kotlin" class="headerlink" title="Kotlin"></a>Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton&#123;&#125;<span class="comment">//定义单例，类加载时实例化对象Singleton既是类名也是对象名  饿汉式——类一旦加载就马上初始化</span></span><br></pre></td></tr></table></figure><h3 id="访问object的成员"><a href="#访问object的成员" class="headerlink" title="访问object的成员"></a>访问object的成员</h3><h4 id="Kotlin-1"><a href="#Kotlin-1" class="headerlink" title="Kotlin"></a>Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton&#123;</span><br><span class="line"> <span class="keyword">var</span> x:<span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">y</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Singleton.x</span><br><span class="line">Singleton.y</span><br></pre></td></tr></table></figure><h4 id="Java-1"><a href="#Java-1" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Singleton.INSTANCE.getX();</span><br><span class="line">Singleton.INSTANCE.setX(<span class="number">2</span>);</span><br><span class="line">Singleton.INSTANCE.y();</span><br></pre></td></tr></table></figure><h3 id="静态成员-JvmStatic"><a href="#静态成员-JvmStatic" class="headerlink" title="静态成员 @JvmStatic"></a>静态成员 @JvmStatic</h3><blockquote><p>kotlin中没有静态成员，想要模拟需要@JvmStatic 注解</p></blockquote><h4 id="Kotlin-2"><a href="#Kotlin-2" class="headerlink" title="Kotlin"></a>Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton&#123;</span><br><span class="line"> <span class="meta">@JvmStatic</span> <span class="keyword">var</span> x:<span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"> <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">y</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Singleton.x</span><br><span class="line">Singleton.y()</span><br></pre></td></tr></table></figure><h4 id="Java-2"><a href="#Java-2" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Singleton.getX();</span><br><span class="line">Singleton.setX(<span class="number">2</span>);</span><br><span class="line">Singleton.y();</span><br></pre></td></tr></table></figure><blockquote><p>object的成员直接按照Java静态成员生成字节码，对Kotlin内部使用无任何影响，Java调用object成员可直接视同调用静态成员一般。</p></blockquote><h3 id="不生成getter-x2F-setter-JvmField"><a href="#不生成getter-x2F-setter-JvmField" class="headerlink" title="不生成getter&#x2F;setter @JvmField"></a>不生成getter&#x2F;setter @JvmField</h3><h4 id="Kotlin-3"><a href="#Kotlin-3" class="headerlink" title="Kotlin"></a>Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton&#123;</span><br><span class="line"> <span class="meta">@JvmField</span> <span class="keyword">var</span> x:<span class="built_in">Int</span> = <span class="number">2</span></span><br><span class="line"> <span class="meta">@JvmField</span> <span class="function"><span class="keyword">fun</span> <span class="title">y</span><span class="params">()</span></span>&#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Singleton.x</span><br><span class="line">Singleton.y()</span><br></pre></td></tr></table></figure><blockquote><p>这里object 会生成静态的，如果不是object 其实不会生成静态的</p></blockquote><h4 id="Java-3"><a href="#Java-3" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Singleton.x; <span class="comment">//属性x不生成getter/setter 访问方式等同于java field</span></span><br><span class="line">Singleton.y();</span><br></pre></td></tr></table></figure><h3 id="普通类的静态成员"><a href="#普通类的静态成员" class="headerlink" title="普通类的静态成员"></a>普通类的静态成员</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line"> <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">y</span><span class="params">()</span></span>&#123;&#125; <span class="comment">//Only members in named ojbects and companion objects can be annotated with &#x27;@JvmStatic&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Kotlin-4"><a href="#Kotlin-4" class="headerlink" title="Kotlin"></a>Kotlin</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line"> <span class="keyword">companion</span> <span class="keyword">object</span>&#123;</span><br><span class="line">  <span class="meta">@JvmStatic</span> <span class="function"><span class="keyword">fun</span> <span class="title">y</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Java-4"><a href="#Java-4" class="headerlink" title="Java"></a>Java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">y</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span></span>&#123;</span><br><span class="line">  <span class="meta">@JvmField</span> <span class="keyword">var</span> x:<span class="built_in">Int</span> = <span class="number">2</span> <span class="comment">// 生成非静态的Field  不带getter/setter的写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kotlin和-Java-单例模式"><a href="#Kotlin和-Java-单例模式" class="headerlink" title="Kotlin和 Java 单例模式"></a>Kotlin和 Java 单例模式</h2><p>饿汉式</p><p>空间换时间</p><p>Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1Java</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1Java INSTANCE = <span class="keyword">new</span> Singleton1Java();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1Java <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Kotlin</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">object</span> Singleton1Kotlin &#123;&#125;</span><br></pre></td></tr></table></figure><p>Kotlin to Java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1Kotlin</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton1Kotlin INSTANCE = <span class="keyword">new</span> Singleton1Kotlin();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton1Kotlin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>懒汉式</p><p>时间换空间</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;单例object&quot;&gt;&lt;a href=&quot;#单例object&quot; class=&quot;headerlink&quot; title=&quot;单例object&quot;&gt;&lt;/a&gt;单例object&lt;/h2&gt;&lt;h3 id=&quot;object的定义&quot;&gt;&lt;a hr</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>借助v2ray,记一次VPN内网穿透实践</title>
    <link href="http://example.com/2022/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1vpn%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2022/02/02/%E8%AE%B0%E4%B8%80%E6%AC%A1vpn%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-02-02T08:29:10.000Z</published>
    <updated>2022-02-09T00:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了一天搞了下公司的内网穿透，先给出参考的链接原文及原理，再给出自己的实践记录，可以直接拷贝，换下端口和你们阿里云(或者自己使用的云，这里都以阿里云做例子)的外网IP就OK了</p><span id="more"></span><p><a href="https://toutyrater.github.io/app/reverse2.html">反向代理&#x2F;内网穿透</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>简单点说，就是，最终实现了，你在家里，通过阿里云服务器，通过公司的局域网服务器来访问公司的局域网资源，这个特别适用于，你个人没法使用公司外网IP做内网映射，局域网服务器(或者在公司的某一台电脑)可以访问外网的情况。当然更习惯于用远程的当我没说。原理就是，两个服务器都部署v2ray，然后公司的局域网连接阿里云服务器，再反向代理回来，最终客户机通过客户端连接阿里云服务器，最终通过公司的服务器访问内网。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-阿里云服务器"><a href="#1-阿里云服务器" class="headerlink" title="1.阿里云服务器"></a>1.阿里云服务器</h4><p>先配置中间的阿里云服务器，别忘了阿里云服务器要保证你的vpn服务的端口要设置为开放状态，因为本来是要客户机和内网的服务器走两个inbounds的，但还需要让领导再开一个端口就没好意思提，这里用同一个vemess inbound 来接收来自两端的请求，做简化处理也是可行的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;reverse&quot;</span>:&#123;<span class="comment">//反向代理设置，正常搭vpn不需要</span></span><br><span class="line">    <span class="attr">&quot;portals&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;portal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:<span class="string">&quot;private.cloud.com&quot;</span>  <span class="comment">//这个域名可以随便取，但要和下面保持一致    </span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;interconn&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">10086</span>, <span class="comment">//开放的端口</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;clients&quot;</span>: [<span class="comment">//设置访问账户的id 可随机生成 但要注意对应</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span>: <span class="number">64</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>:&#123;   </span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>:[  </span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;external&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;portal&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;tunnel&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;full:private.cloud.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;portal&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为公司阿里云服务器是windows服务器，所以也学习了下windows版本的v2ray服务器的部署，其实非常简单。</p><p>网上下载v2ray-windows-64</p><ul><li>v2ray.exe执行就是把控制台显示出来并启动v2ray，它会自动使用当前目录下的config配置，可以看到访问的ip</li><li>wv2ray.exe也是启动v2ray，但是它是后台启动，能在任务进程中看到及关闭该进程服务</li></ul><p><img src="/../images/image-20220208052556734.png" alt="image-20220208052556734"></p><h4 id="2-内网服务器"><a href="#2-内网服务器" class="headerlink" title="2.内网服务器"></a>2.内网服务器</h4><p>因为一直拉取github的内容拉不下来，自动安装一直不成功，所以内网的linux服务器是手动部署的，其实效果是一样的，就是稍微麻烦些</p><p><a href="https://yearliny.com/v2ray-complete-tutorial/">v2ray完全使用教程 2-2手动安装</a></p><p>我这里是通过自己的电脑下载下来v2ray-linux-64.zip 然后scp到服务器上解压，然后进行手动部署的</p><p>然后把各个文件mv到相应的目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/v2ray /usr/bin/v2ray /var/log/v2ray # 创建目录</span><br><span class="line">sudo chmod +x v2ray v2ctl # 赋予可执行权限</span><br><span class="line">sudo mv v2ray v2ctl geoip.dat geosite.dat -t /usr/bin/v2ray # 移动文件</span><br><span class="line">touch /etc/v2ray/config.json # 仅创建配置文件的空文件</span><br><span class="line">sudo mv systemd/v2ray.service /etc/systemd/system/</span><br><span class="line">sudo systemctl enable v2ray # 用于程序开机启动并且崩溃时自动重启程序</span><br></pre></td></tr></table></figure><p>但要注意对应的目录，而且要看下v2ray.service中的配置，执行的命令的v2ray相应的文件是否存在，在这里卡了好久，一直启不起来服务，结果发现是v2ray和config.json相应的目录不对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启用和禁用</span></span><br><span class="line">sudo systemctl enable v2ray</span><br><span class="line">sudo systemctl disable v2ray</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动、停止、重启v2ray</span></span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line">sudo systemctl stop v2ray</span><br><span class="line">sudo systemctl restart v2ray</span><br></pre></td></tr></table></figure><p>下面给出内网服务器的配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">&quot;reverse&quot;</span>:&#123; </span><br><span class="line">    <span class="attr">&quot;bridges&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;bridge&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:<span class="string">&quot;private.cloud.com&quot;</span> <span class="comment">// A 和 B 反向代理通信的域名，可以自己取一个，可以不是自己购买的域名，但必须跟上面 阿里云 中的 reverse 配置的域名一致</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>:[</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="comment">//内网连接阿里云的outbound  </span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;tunnel&quot;</span>, </span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>:&#123;  </span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span>:[  </span><br><span class="line">          &#123;  </span><br><span class="line">            <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;serveraddr.com&quot;</span>, <span class="comment">// 阿里云外网 地址，IP 或 实际的域名</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span>:<span class="number">10086</span>,</span><br><span class="line">            <span class="attr">&quot;users&quot;</span>:[  </span><br><span class="line">              &#123;  </span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span>:<span class="number">64</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 另一个 outbound，最终连接私有网盘    </span></span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>:&#123;  </span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;out&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>:&#123;  </span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">      <span class="comment">// 配置 A 主动连接 B 的路由规则</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;bridge&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;full:private.cloud.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;tunnel&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;  </span><br><span class="line">      <span class="comment">// 反向连接访问私有网盘的规则</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;bridge&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;out&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3.客户端配置"></a>3.客户端配置</h4><p>看你使用的系统，我的是客户端设置完后自动生成json的，没啥特殊要说的，可以自己生成，也可以直接使用这个配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;all_to_main&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span> : <span class="string">&quot;AsIs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span> : <span class="string">&quot;ip_60&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span> : <span class="string">&quot;0-65535&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;auth&quot;</span> : <span class="string">&quot;noauth&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span> : <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;socksinbound&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span> : <span class="number">1081</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;http&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span> : <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;httpinbound&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span> : <span class="number">8001</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;servers&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span> : <span class="string">&quot;info&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;sendThrough&quot;</span> : <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mux&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;concurrency&quot;</span> : <span class="number">8</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span> : <span class="string">&quot;serveraddr.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;users&quot;</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span> : <span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span> : <span class="number">64</span>,</span><br><span class="line">                <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;level&quot;</span> : <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;port&quot;</span> : <span class="number">10086</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;ip_60&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;headers&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;quicSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;tlsSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;allowInsecure&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;alpn&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;http\/1.1&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;serverName&quot;</span> : <span class="string">&quot;server.cc&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;allowInsecureCiphers&quot;</span> : <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;httpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;kcpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;mtu&quot;</span> : <span class="number">1350</span>,</span><br><span class="line">          <span class="attr">&quot;congestion&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;tti&quot;</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">&quot;uplinkCapacity&quot;</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;writeBufferSize&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;readBufferSize&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;downlinkCapacity&quot;</span> : <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;tcpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;network&quot;</span> : <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;花了一天搞了下公司的内网穿透，先给出参考的链接原文及原理，再给出自己的实践记录，可以直接拷贝，换下端口和你们阿里云(或者自己使用的云，这里都以阿里云做例子)的外网IP就OK了&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
