<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SteveZhang博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-17T03:58:11.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>okhttp网络框架原理</title>
    <link href="http://example.com/2022/05/17/okhttp%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81(kotlin)/"/>
    <id>http://example.com/2022/05/17/okhttp%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81(kotlin)/</id>
    <published>2022-05-17T03:58:11.000Z</published>
    <updated>2022-05-17T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>okhttp网络框架原理</p><span id="more"></span><h2 id="okhttp-网络框架原理"><a href="#okhttp-网络框架原理" class="headerlink" title="okhttp 网络框架原理"></a>okhttp 网络框架原理</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">constructor</span></span>() &#123;<span class="comment">//空参数构造函数</span></span><br><span class="line">  <span class="comment">//成员变量的默认初始化</span></span><br><span class="line">  <span class="comment">//分发器——重点 主要处理异步请求网络 缓存等分发流程</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> dispatcher: Dispatcher = Dispatcher()</span><br><span class="line">  <span class="comment">//连接池，每一个连接进入连接池，1.同样url会连接复用 2.哪些连接打开 哪些复用 的策略</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> connectionPool: ConnectionPool = ConnectionPool()</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">val</span> interceptors: MutableList&lt;Interceptor&gt; = mutableListOf()</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">val</span> networkInterceptors: MutableList&lt;Interceptor&gt; = mutableListOf()</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> eventListenerFactory: EventListener.Factory = EventListener.NONE.asFactory()</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> retryOnConnectionFailure = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> authenticator: Authenticator = Authenticator.NONE</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> followRedirects = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> followSslRedirects = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> cookieJar: CookieJar = CookieJar.NO_COOKIES</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> cache: Cache? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> dns: Dns = Dns.SYSTEM</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> proxy: Proxy? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> proxySelector: ProxySelector? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> proxyAuthenticator: Authenticator = Authenticator.NONE</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> socketFactory: SocketFactory = SocketFactory.getDefault()</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> sslSocketFactoryOrNull: SSLSocketFactory? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> x509TrustManagerOrNull: X509TrustManager? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> connectionSpecs: List&lt;ConnectionSpec&gt; = DEFAULT_CONNECTION_SPECS</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> protocols: List&lt;Protocol&gt; = DEFAULT_PROTOCOLS</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> hostnameVerifier: HostnameVerifier = OkHostnameVerifier</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> certificatePinner: CertificatePinner = CertificatePinner.DEFAULT</span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> certificateChainCleaner: CertificateChainCleaner? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> callTimeout = <span class="number">0</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> connectTimeout = <span class="number">10_000</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> readTimeout = <span class="number">10_000</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> writeTimeout = <span class="number">10_000</span></span><br><span class="line">  <span class="keyword">internal</span> <span class="keyword">var</span> pingInterval = <span class="number">0</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//设置方法，直接使用apply 作用域函数 apply </span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">readTimeout</span><span class="params">(duration: <span class="type">Duration</span>)</span></span> = apply &#123;</span><br><span class="line">      readTimeout = checkDuration(<span class="string">&quot;timeout&quot;</span>, duration.toMillis(), TimeUnit.MILLISECONDS)</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>kotlin 知识点补充</p><p>internal —— 能见到类声明的  本模块内 的任何客户端都可见其interanl成员</p><p> 作用域函数——是在对象的上下文中执行代码块。当对一个对象调用这样的函数并提供一个 lambda 表达式时，它会形成一个临时作用域。在此作用域中，可以访问该对象而无需其名称。共有以下五种：<code>let</code>、<code>run</code>、<code>with</code>、<code>apply</code> 以及 <code>also</code>。</p><p>每个作用域函数之间有两个主要区别：</p><ul><li>引用上下文对象的方式 this 和 it</li><li>返回值</li></ul><p>apply 这里 使用this 但可以省略  另外使用it的是let和also</p><p>apply 和also 返回上下文对象本身。因此，它们可以作为辅助步骤包含在调用链中：你可以继续在同一个对象上进行链式函数调用。有返回值，返回的就是对象本身。</p><p>let、run和with返回lambda表达式的结果。所以可以给一个变量赋值。</p><p>val numbers &#x3D; mutableListOf(“one”, “two”, “three”)<br>val countEndsWithE &#x3D; numbers.run {<br>    add(“four”)<br>    add(“five”)<br>    count { it.endsWith(“e”) }&#x2F;&#x2F;返回的的此表达式的结果，所以是count是Int<br>}<br>println(“There are $countEndsWithE elements that end with e.”)</p><p>此外，还可以忽略返回值，仅使用作用域函数为变量创建一个临时作用域。</p><p>val numbers &#x3D; mutableListOf(“one”, “two”, “three”)<br>with(numbers) {<br>    val firstItem &#x3D; first()<br>    val lastItem &#x3D; last()<br>    println(“First item: $firstItem, last item: $lastItem”)<br>}</p><p>不返回东西，而是限制在with作用域内操作的是numbers对象，省略了this</p></blockquote><p>okhttp的调用流程图</p><p><img src="/../images/image-20220213084413472.png" alt="image-20220213084413472"></p><p>核心是getResponseWithInterceptorChain方法，拦截器链的实现，主要请求也是在这里完成的</p><p>同步是excute 异步 equeue</p><blockquote><p>BuIld设计模式</p><p>要构造的对象参数很多，可以参考okttp的build模式，可以大大简化，构建的步骤和传参，方便使用链式操作来设置单独的属性。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;okhttp网络框架原理&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>借助v2ray,记一次VPN内网穿透实践</title>
    <link href="http://example.com/2022/05/17/%E8%AE%B0%E4%B8%80%E6%AC%A1vpn%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E8%B7%B5/"/>
    <id>http://example.com/2022/05/17/%E8%AE%B0%E4%B8%80%E6%AC%A1vpn%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E5%AE%9E%E8%B7%B5/</id>
    <published>2022-05-17T03:58:11.000Z</published>
    <updated>2022-05-17T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>花了一天搞了下公司的内网穿透，先给出参考的链接原文及原理，再给出自己的实践记录，可以直接拷贝，换下端口和你们阿里云(或者自己使用的云，这里都以阿里云做例子)的外网IP就OK了</p><span id="more"></span><p><a href="https://toutyrater.github.io/app/reverse2.html">反向代理&#x2F;内网穿透</a></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>简单点说，就是，最终实现了，你在家里，通过阿里云服务器，通过公司的局域网服务器来访问公司的局域网资源，这个特别适用于，你个人没法使用公司外网IP做内网映射，局域网服务器(或者在公司的某一台电脑)可以访问外网的情况。当然更习惯于用远程的当我没说。原理就是，两个服务器都部署v2ray，然后公司的局域网连接阿里云服务器，再反向代理回来，最终客户机通过客户端连接阿里云服务器，最终通过公司的服务器访问内网。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="1-阿里云服务器"><a href="#1-阿里云服务器" class="headerlink" title="1.阿里云服务器"></a>1.阿里云服务器</h4><p>先配置中间的阿里云服务器，别忘了阿里云服务器要保证你的vpn服务的端口要设置为开放状态，因为本来是要客户机和内网的服务器走两个inbounds的，但还需要让领导再开一个端口就没好意思提，这里用同一个vemess inbound 来接收来自两端的请求，做简化处理也是可行的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">&quot;reverse&quot;</span>:&#123;<span class="comment">//反向代理设置，正常搭vpn不需要</span></span><br><span class="line">    <span class="attr">&quot;portals&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;portal&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:<span class="string">&quot;private.cloud.com&quot;</span>  <span class="comment">//这个域名可以随便取，但要和下面保持一致    </span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;access&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;error&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span>: <span class="string">&quot;warning&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;interconn&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span>: <span class="number">10086</span>, <span class="comment">//开放的端口</span></span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>: <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;clients&quot;</span>: [<span class="comment">//设置访问账户的id 可随机生成 但要注意对应</span></span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;id&quot;</span>: <span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;alterId&quot;</span>: <span class="number">64</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>:&#123;   </span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>:[  </span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;external&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;portal&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123; </span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;tunnel&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;full:private.cloud.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;portal&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为公司阿里云服务器是windows服务器，所以也学习了下windows版本的v2ray服务器的部署，其实非常简单。</p><p>网上下载v2ray-windows-64</p><ul><li>v2ray.exe执行就是把控制台显示出来并启动v2ray，它会自动使用当前目录下的config配置，可以看到访问的ip</li><li>wv2ray.exe也是启动v2ray，但是它是后台启动，能在任务进程中看到及关闭该进程服务</li></ul><p><img src="/../images/image-20220208052556734.png" alt="image-20220208052556734"></p><h4 id="2-内网服务器"><a href="#2-内网服务器" class="headerlink" title="2.内网服务器"></a>2.内网服务器</h4><p>因为一直拉取github的内容拉不下来，自动安装一直不成功，所以内网的linux服务器是手动部署的，其实效果是一样的，就是稍微麻烦些</p><p><a href="https://yearliny.com/v2ray-complete-tutorial/">v2ray完全使用教程 2-2手动安装</a></p><p>我这里是通过自己的电脑下载下来v2ray-linux-64.zip 然后scp到服务器上解压，然后进行手动部署的</p><p>然后把各个文件mv到相应的目录中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir /etc/v2ray /usr/bin/v2ray /var/log/v2ray # 创建目录</span><br><span class="line">sudo chmod +x v2ray v2ctl # 赋予可执行权限</span><br><span class="line">sudo mv v2ray v2ctl geoip.dat geosite.dat -t /usr/bin/v2ray # 移动文件</span><br><span class="line">touch /etc/v2ray/config.json # 仅创建配置文件的空文件</span><br><span class="line">sudo mv systemd/v2ray.service /etc/systemd/system/</span><br><span class="line">sudo systemctl enable v2ray # 用于程序开机启动并且崩溃时自动重启程序</span><br></pre></td></tr></table></figure><p>但要注意对应的目录，而且要看下v2ray.service中的配置，执行的命令的v2ray相应的文件是否存在，在这里卡了好久，一直启不起来服务，结果发现是v2ray和config.json相应的目录不对</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启用和禁用</span></span><br><span class="line">sudo systemctl enable v2ray</span><br><span class="line">sudo systemctl disable v2ray</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动、停止、重启v2ray</span></span><br><span class="line">sudo systemctl start v2ray</span><br><span class="line">sudo systemctl stop v2ray</span><br><span class="line">sudo systemctl restart v2ray</span><br></pre></td></tr></table></figure><p>下面给出内网服务器的配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">  <span class="attr">&quot;reverse&quot;</span>:&#123; </span><br><span class="line">    <span class="attr">&quot;bridges&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">        <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;bridge&quot;</span>, </span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:<span class="string">&quot;private.cloud.com&quot;</span> <span class="comment">// A 和 B 反向代理通信的域名，可以自己取一个，可以不是自己购买的域名，但必须跟上面 阿里云 中的 reverse 配置的域名一致</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span>:[</span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="comment">//内网连接阿里云的outbound  </span></span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;tunnel&quot;</span>, </span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>:&#123;  </span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span>:[  </span><br><span class="line">          &#123;  </span><br><span class="line">            <span class="attr">&quot;address&quot;</span>:<span class="string">&quot;serveraddr.com&quot;</span>, <span class="comment">// 阿里云外网 地址，IP 或 实际的域名</span></span><br><span class="line">            <span class="attr">&quot;port&quot;</span>:<span class="number">10086</span>,</span><br><span class="line">            <span class="attr">&quot;users&quot;</span>:[  </span><br><span class="line">              &#123;  </span><br><span class="line">                <span class="attr">&quot;id&quot;</span>:<span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span>:<span class="number">64</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 另一个 outbound，最终连接私有网盘    </span></span><br><span class="line">    &#123;  </span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span>:<span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span>:&#123;  </span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span>:<span class="string">&quot;out&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span>:&#123;  </span><br><span class="line">    <span class="attr">&quot;rules&quot;</span>:[  </span><br><span class="line">      &#123;  </span><br><span class="line">      <span class="comment">// 配置 A 主动连接 B 的路由规则</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;bridge&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;domain&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;full:private.cloud.com&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;tunnel&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;  </span><br><span class="line">      <span class="comment">// 反向连接访问私有网盘的规则</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span>:<span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;inboundTag&quot;</span>:[  </span><br><span class="line">          <span class="string">&quot;bridge&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span>:<span class="string">&quot;out&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-客户端配置"><a href="#3-客户端配置" class="headerlink" title="3.客户端配置"></a>3.客户端配置</h4><p>看你使用的系统，我的是客户端设置完后自动生成json的，没啥特殊要说的，可以自己生成，也可以直接使用这个配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;routing&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;all_to_main&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;domainStrategy&quot;</span> : <span class="string">&quot;AsIs&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;rules&quot;</span> : [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;field&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;outboundTag&quot;</span> : <span class="string">&quot;ip_60&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span> : <span class="string">&quot;0-65535&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;inbounds&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;ip&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;auth&quot;</span> : <span class="string">&quot;noauth&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;udp&quot;</span> : <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;socksinbound&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span> : <span class="number">1081</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;listen&quot;</span> : <span class="string">&quot;127.0.0.1&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;http&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;timeout&quot;</span> : <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;httpinbound&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;port&quot;</span> : <span class="number">8001</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;dns&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;servers&quot;</span> : [</span><br><span class="line">      <span class="string">&quot;localhost&quot;</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;log&quot;</span> : &#123;</span><br><span class="line">    <span class="attr">&quot;loglevel&quot;</span> : <span class="string">&quot;info&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  <span class="attr">&quot;outbounds&quot;</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;sendThrough&quot;</span> : <span class="string">&quot;0.0.0.0&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;mux&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;enabled&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">&quot;concurrency&quot;</span> : <span class="number">8</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;protocol&quot;</span> : <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;settings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;vnext&quot;</span> : [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">&quot;address&quot;</span> : <span class="string">&quot;serveraddr.com&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;users&quot;</span> : [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">&quot;id&quot;</span> : <span class="string">&quot;0c15dd83-3552-4b53-b835-907e6c262d9b&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;alterId&quot;</span> : <span class="number">64</span>,</span><br><span class="line">                <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;auto&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;level&quot;</span> : <span class="number">0</span></span><br><span class="line">              &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">&quot;port&quot;</span> : <span class="number">10086</span></span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;tag&quot;</span> : <span class="string">&quot;ip_60&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;streamSettings&quot;</span> : &#123;</span><br><span class="line">        <span class="attr">&quot;wsSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;headers&quot;</span> : &#123;</span><br><span class="line"></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;quicSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span> : <span class="string">&quot;&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;tlsSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;allowInsecure&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;alpn&quot;</span> : [</span><br><span class="line">            <span class="string">&quot;http\/1.1&quot;</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">&quot;serverName&quot;</span> : <span class="string">&quot;server.cc&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;allowInsecureCiphers&quot;</span> : <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;httpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;path&quot;</span> : <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;kcpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;mtu&quot;</span> : <span class="number">1350</span>,</span><br><span class="line">          <span class="attr">&quot;congestion&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">&quot;tti&quot;</span> : <span class="number">20</span>,</span><br><span class="line">          <span class="attr">&quot;uplinkCapacity&quot;</span> : <span class="number">5</span>,</span><br><span class="line">          <span class="attr">&quot;writeBufferSize&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;readBufferSize&quot;</span> : <span class="number">1</span>,</span><br><span class="line">          <span class="attr">&quot;downlinkCapacity&quot;</span> : <span class="number">20</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;tcpSettings&quot;</span> : &#123;</span><br><span class="line">          <span class="attr">&quot;header&quot;</span> : &#123;</span><br><span class="line">            <span class="attr">&quot;type&quot;</span> : <span class="string">&quot;none&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">&quot;security&quot;</span> : <span class="string">&quot;none&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;network&quot;</span> : <span class="string">&quot;tcp&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;花了一天搞了下公司的内网穿透，先给出参考的链接原文及原理，再给出自己的实践记录，可以直接拷贝，换下端口和你们阿里云(或者自己使用的云，这里都以阿里云做例子)的外网IP就OK了&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Gradle基础</title>
    <link href="http://example.com/2022/05/17/Gradle%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/05/17/Gradle%E5%9F%BA%E7%A1%80/</id>
    <published>2022-05-17T03:58:10.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>讲解Gradle基础知识，语法及生命周期</p><span id="more"></span><h2 id="Gradle-基础"><a href="#Gradle-基础" class="headerlink" title="Gradle 基础"></a>Gradle 基础</h2><p>使用 .&#x2F;gradlew clean -q 来过滤只显示我们的自己的输出日志</p><h3 id="一-语法"><a href="#一-语法" class="headerlink" title="一 语法"></a>一 语法</h3><h4 id="1-1-基础语法"><a href="#1-1-基础语法" class="headerlink" title="1.1 基础语法"></a>1.1 基础语法</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span></span><br><span class="line"><span class="keyword">def</span> b = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">&quot;Hello,&quot;</span> + <span class="string">&quot;World&quot;</span></span><br><span class="line">String str2 = str.toUpperCase()</span><br><span class="line"></span><br><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="keyword">def</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">array.add(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">array.each&#123;<span class="comment">//闭包特性，只有一个参数默认为it 可以省略 it -&gt; 不写</span></span><br><span class="line">  println(<span class="string">&quot;each item is $it&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//映射表</span></span><br><span class="line"><span class="keyword">def</span> map = [<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mooc&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="string">&quot;100&quot;</span>]</span><br><span class="line">println(<span class="string">&quot;age is $&#123;map[&quot;</span>age<span class="string">&quot;]&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">  println(<span class="string">&quot;i is $i&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line"><span class="keyword">def</span> hello(String name)&#123;</span><br><span class="line">  println(<span class="string">&quot;Hello, $name&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-DSL"><a href="#1-2-DSL" class="headerlink" title="1.2 DSL"></a>1.2 DSL</h4><ul><li>Domain Specific Language</li><li>领域专用语言</li></ul><p>只能用于构建，不能干别的，所以说是领域专用语言</p><p>这个是android build.gradle 的DSL</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">30</span></span><br><span class="line">    buildToolsVersion <span class="string">&quot;30.0.3&quot;</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.steve.gradle_study&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">21</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">        targetCompatibility JavaVersion.VERSION_1_8</span><br><span class="line">    &#125;</span><br><span class="line">    kotlinOptions &#123;</span><br><span class="line">        jvmTarget = <span class="string">&#x27;1.8&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-闭包"><a href="#1-3-闭包" class="headerlink" title="1.3 闭包"></a>1.3 闭包</h4><p>DSL的实现是基于groovy中的闭包实现的</p><ul><li>开放匿名的代码块，可以接受参数，具有返回值，也可以被分配给变量</li><li>定义规则:<em>{ [params -&gt; ] statements }</em></li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> c = &#123;</span><br><span class="line">    println(<span class="string">&quot;hello closure&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c2 = &#123; it  -&gt; println (<span class="string">&quot;it is $it&quot;</span>)&#125;</span><br><span class="line">c2(<span class="string">&quot;yt&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c3 = &#123;  println (<span class="string">&quot;it is $it&quot;</span>)&#125;</span><br><span class="line">c3(<span class="string">&quot;yt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> c4 = &#123; name,age -&gt;</span><br><span class="line">    println (<span class="string">&quot;name is $name&quot;</span>)</span><br><span class="line">    println (<span class="string">&quot;age is $age&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">c4(<span class="string">&quot;wwww&quot;</span>,<span class="number">33</span>)</span><br></pre></td></tr></table></figure><h4 id="1-4-实现自己的DSL"><a href="#1-4-实现自己的DSL" class="headerlink" title="1.4 实现自己的DSL"></a>1.4 实现自己的DSL</h4><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户配置成这样，我们怎么能取到对应的配置的值，使用对象关联起来</p><p>里面的defaultconfig 闭包对应的对象</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DefalutConfig</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> String versionName</span><br><span class="line">    <span class="keyword">def</span> versionName(String versionName)&#123;</span><br><span class="line">        <span class="built_in">this</span>.versionName = versionName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外面的android 闭包对应的对象</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Android</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> compileSdkVersion</span><br><span class="line">    <span class="keyword">private</span> DefalutConfig defalutConfig</span><br><span class="line"></span><br><span class="line">    Android()&#123;</span><br><span class="line">        <span class="built_in">this</span>.defalutConfig = <span class="keyword">new</span> DefalutConfig()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> compileSdkVersion(<span class="keyword">int</span> compileSdkVersion)&#123;</span><br><span class="line">        <span class="built_in">this</span>.compileSdkVersion =compileSdkVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//传入一个闭包，接收到闭包后跟我们的DefaultConfig成员变量关联起来</span></span><br><span class="line">    <span class="keyword">def</span> defaultConfig(Closure closure)&#123;</span><br><span class="line">      <span class="comment">//关联之后，对象就获到到闭包中对应同名的值了</span></span><br><span class="line">        closure.setDelegate(defalutConfig)</span><br><span class="line">        closure.call()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> myAndroid = &#123;</span><br><span class="line">    compileSdkVersion <span class="number">25</span></span><br><span class="line">    defaultConfig&#123;</span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Android a = <span class="keyword">new</span> Android()</span><br><span class="line"><span class="comment">//将闭包与具体对象关联起来，这样在闭包中设置的值就到了对象a中了，我们可以打印a 获取a中的值</span></span><br><span class="line">myAndroid.delegate = a</span><br><span class="line">myAndroid.call()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./graldew clean -q</span><br></pre></td></tr></table></figure><h3 id="二-Gradle构建脚本基础"><a href="#二-Gradle构建脚本基础" class="headerlink" title="二 Gradle构建脚本基础"></a>二 Gradle构建脚本基础</h3><p>几个关键的文件</p><ul><li><strong>settings.gradle</strong>—定义全局参与构建的模块</li><li><strong>build.gradle</strong>—有两类build.gradle文件，一个是全局的定义共用参数，各个单独的定义自己的配置 </li><li><strong>gradle.properties</strong>—定义开关型参数的文件</li></ul><h3 id="三-Gradle构建的生命周期"><a href="#三-Gradle构建的生命周期" class="headerlink" title="三 Gradle构建的生命周期"></a>三 Gradle构建的生命周期</h3><ul><li><strong>初始化阶段</strong>—收集所有要参与构建的子工程，创建一个项目层次结构，并且为每一个项目创建一个project实例，和这个阶段关系最大的就是我们的settings.gradle文件</li><li>配置阶段—执行各个子工程自己的build.gradle，对project进行配置，并且根据配置形成一个任务依赖链，以便在下一个阶段执行阶段，方便执行任务</li><li>执行阶段—执行上一阶段的tasks</li></ul><p>我们在settings.gradle中添加生命周期的监听函数</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加构建的生命周期</span></span><br><span class="line">gradle.addBuildListener(<span class="keyword">new</span> BuildAdapter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> settingsEvaluated(Settings settings) &#123;</span><br><span class="line">        <span class="built_in">super</span>.settingsEvaluated(settings)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 初始化阶段完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> projectsEvaluated(Gradle gradle) &#123;</span><br><span class="line">        <span class="built_in">super</span>.projectsEvaluated(gradle)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 配置阶段完成&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">void</span> buildFinished(BuildResult result) &#123;</span><br><span class="line">        <span class="built_in">super</span>.buildFinished(result)</span><br><span class="line">        println (<span class="string">&quot;[life-cycle] 构建结束&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>打印结果</p><p><img src="/../images/image-20220209051751641.png" alt="image-20220209051751641"></p><p>几个主要角色</p><ul><li><strong>初始化阶段</strong>-root project</li><li><strong>配置阶段</strong>-project</li><li><strong>执行阶段</strong>-task</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;讲解Gradle基础知识，语法及生命周期&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetpack系列—底部导航路由BottomNavigationView原理</title>
    <link href="http://example.com/2022/05/17/Jetpack%E7%B3%BB%E5%88%97%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/05/17/Jetpack%E7%B3%BB%E5%88%97%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E8%B7%AF%E7%94%B1%E5%8E%9F%E7%90%86/</id>
    <published>2022-05-17T03:58:10.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要介绍BottomNavigationView及其实现原理</p><span id="more"></span><p>bottom_nav_menu.xml 配置底部item的显示内容和个数</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:id</span>=<span class="string">&quot;@+id/nav_host_fragment_activity_main&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">&quot;androidx.navigation.fragment.NavHostFragment&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:defaultNavHost</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintBottom_toTopOf</span>=<span class="string">&quot;@id/nav_view&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintLeft_toLeftOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintRight_toRightOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">app:navGraph</span>=<span class="string">&quot;@navigation/mobile_navigation&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>defaultNavHost=<span class="string">&quot;true&quot;</span></span><br></pre></td></tr></table></figure><p>是否和系统的返回键相关联</p><p>如果相关联，如果回退栈中有fragment 那么就会拦截返回键  如果没有的话就执行返回键的默认行为</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>navGraph=<span class="string">&quot;@navigation/mobile_navigation&quot;</span></span><br></pre></td></tr></table></figure><p>底部路由结构</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">navigation</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/mobile_navigation&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:startDestination</span>=<span class="string">&quot;@+id/navigation_home&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">&lt;--节点所配置的fragment --&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.home.HomeFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_home&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_home&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_dashboard&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.dashboard.DashboardFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_dashboard&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_dashboard&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_notifications&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.notifications.NotificationsFragment&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">&quot;@string/title_notifications&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_notifications&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">navigation</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">app:</span>startDestination=<span class="string">&quot;@+id/navigation_home&quot;</span></span><br></pre></td></tr></table></figure><p>默认要显示的页面是哪一个</p><p>通过可视化界面配置fragment</p><p><img src="/../images/image-20220209110225072.png" alt="image-20220209110225072"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/navigation_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">&quot;com.steve.ppjoke_android.ui.home.HomeFragment&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:label</span>=<span class="string">&quot;@string/title_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:layout</span>=<span class="string">&quot;@layout/fragment_home&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 当前fragment跳转到下一页的动作，所以必须指定目标页--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/id_action&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:destination</span>=<span class="string">&quot;@id/navigation_dashboard&quot;</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--指的是创建当前fragment时需要传递的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">argument</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">&quot;arg1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:argType</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--通过url拉起页面，隐式意图  就是页面路由 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">deepLink</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/deepLink&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">app:uri</span>=<span class="string">&quot;www.imooc.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fragment</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先看承载的Fragment的实现逻辑</p><p>NavHostFragment.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    <span class="keyword">final</span> Context context = requireContext();</span><br><span class="line"><span class="comment">//切换fragment的能力委托给NavHostController</span></span><br><span class="line">    mNavController = <span class="keyword">new</span> NavHostController(context);</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加了两个导航器</span></span><br><span class="line">    onCreateNavController(mNavController);</span><br><span class="line"></span><br><span class="line">    Bundle navState = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (savedInstanceState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        navState = savedInstanceState.getBundle(KEY_NAV_CONTROLLER_STATE);</span><br><span class="line">        <span class="keyword">if</span> (savedInstanceState.getBoolean(KEY_DEFAULT_NAV_HOST, <span class="keyword">false</span>)) &#123;</span><br><span class="line">            mDefaultNavHost = <span class="keyword">true</span>;</span><br><span class="line">            getParentFragmentManager().beginTransaction()</span><br><span class="line">                    .setPrimaryNavigationFragment(<span class="keyword">this</span>)</span><br><span class="line">                    .commit();</span><br><span class="line">        &#125;</span><br><span class="line">        mGraphId = savedInstanceState.getInt(KEY_GRAPH_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (navState != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Navigation controller state overrides arguments</span></span><br><span class="line">        mNavController.restoreState(navState);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (mGraphId != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// Set from onInflate()</span></span><br><span class="line">        mNavController.setGraph(mGraphId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// See if it was set by NavHostFragment.create()</span></span><br><span class="line">        <span class="keyword">final</span> Bundle args = getArguments();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> graphId = args != <span class="keyword">null</span> ? args.getInt(KEY_GRAPH_ID) : <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">final</span> Bundle startDestinationArgs = args != <span class="keyword">null</span></span><br><span class="line">                ? args.getBundle(KEY_START_DESTINATION_ARGS)</span><br><span class="line">                : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (graphId != <span class="number">0</span>) &#123;</span><br><span class="line">            mNavController.setGraph(graphId, startDestinationArgs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onCreateNavController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreateNavController</span><span class="params">(<span class="meta">@NonNull</span> NavController navController)</span> </span>&#123;</span><br><span class="line">    navController.getNavigatorProvider().addNavigator(</span><br><span class="line">      <span class="comment">//第一个，给dialogframgent提供跳转，切换的能力</span></span><br><span class="line">            <span class="keyword">new</span> DialogFragmentNavigator(requireContext(), getChildFragmentManager()));</span><br><span class="line">  <span class="comment">//第二个，是给fragment提供跳转</span></span><br><span class="line">    navController.getNavigatorProvider().addNavigator(createFragmentNavigator());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外，还在NavController的构造函数里添加了两个默认的navigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavController</span><span class="params">(<span class="meta">@NonNull</span> Context context)</span> </span>&#123;</span><br><span class="line">    mContext = context;</span><br><span class="line">    <span class="keyword">while</span> (context <span class="keyword">instanceof</span> ContextWrapper) &#123;</span><br><span class="line">        <span class="keyword">if</span> (context <span class="keyword">instanceof</span> Activity) &#123;</span><br><span class="line">            mActivity = (Activity) context;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        context = ((ContextWrapper) context).getBaseContext();</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这个导航器的作用是配置的默认启动的页面，启动后会跳转，唯一被用到的地方</span></span><br><span class="line">    mNavigatorProvider.addNavigator(<span class="keyword">new</span> NavGraphNavigator(mNavigatorProvider));</span><br><span class="line">    <span class="comment">//为activity跳转提供支持</span></span><br><span class="line">    mNavigatorProvider.addNavigator(<span class="keyword">new</span> ActivityNavigator(mContext));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为什么把navigator添加到provider里呢？</p><p>privoder本质是一个hashmap，存储导航器的实例</p><p>这4个导航器有什么相同点有什么不同点？</p><p>都继承自Navigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//泛型必须继承NavDestination 而NavDestination就是dialog activity fragment 之所以这么设计泛型，是需要activity的navigator只能创建activity的navigator 而fragment只能创建fragment的导航器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Navigator</span>&lt;<span class="title">D</span> <span class="keyword">extends</span> <span class="title">NavDestination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment">//1.每一个navigator的子类都必须标注一个Name的注解，只有这样，才会把它添加到provider里，我们之前说provider是一个hashmap 它的key就是我们标注的name的名字，value是navigator的实例本身</span></span><br><span class="line">  <span class="comment">//2.navigator在创建destination的时候,它会解析navigator上的name，以此来得到导航器的名称</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Name &#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="comment">//创建Destination  看下面Destination的构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> D <span class="title">createDestination</span><span class="params">()</span></span>;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="comment">//跳转逻辑</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> D destination, <span class="meta">@Nullable</span> Bundle args,<span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//是否拦截系统的返回键，实现回退栈的操作</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">popBackStack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">  <span class="comment">//空接口，实现用来做额外的事情，比如过渡元素，转场动画</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Extras</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传入一个navigator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavDestination</span><span class="params">(<span class="meta">@NonNull</span> Navigator&lt;? extends NavDestination&gt; navigator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(NavigatorProvider.getNameForNavigator(navigator.getClass()));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入一个navigatorName 这个name就是通过标注在navigator上面的name的注解得到的</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">NavDestination</span><span class="params">(<span class="meta">@NonNull</span> String navigatorName)</span> </span>&#123;</span><br><span class="line">    mNavigatorName = navigatorName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么要传入navigatorName呢？</p><p>NavDestination就是我们跳转的一个个页面，我们通过传入的navigatorName在provider这个hashmap中得到destination实例，就是这么得到我们的跳转的实例的</p><p>我们接着看Navigator中的navigate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转逻辑</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> D destination, <span class="meta">@Nullable</span> Bundle args,<span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span></span>;</span><br></pre></td></tr></table></figure><p>由于activity fragment dialog的具体跳转方法都不一样，所以，不会交由父类来实现，所以这里是抽象的，使用了模板方法</p><p>Navigator父类了解后，我们来了了解其子类的实现</p><p>ActivityNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//provider中的key的名字就是activity</span></span><br><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;activity&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">ActivityNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setIntent</span><span class="params">(<span class="meta">@Nullable</span> Intent intent)</span> </span>&#123;</span><br><span class="line">      mIntent = intent;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setTargetPackage</span><span class="params">(<span class="meta">@Nullable</span> String packageName)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (mIntent == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mIntent = <span class="keyword">new</span> Intent();</span><br><span class="line">      &#125;</span><br><span class="line">      mIntent.setPackage(packageName);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">setData</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">setComponentName</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//上面这些类都是为了构造或传入Intent对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">          </span><br><span class="line">    <span class="comment">//核心方法navigate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//1.获取跳转Intent</span></span><br><span class="line">        <span class="keyword">if</span> (destination.getIntent() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;Destination &quot;</span> + destination.getId()</span><br><span class="line">                    + <span class="string">&quot; does not have an Intent set.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(destination.getIntent());</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span>) &#123;</span><br><span class="line">            intent.putExtras(args);</span><br><span class="line">            String dataPattern = destination.getDataPattern();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(dataPattern)) &#123;</span><br><span class="line">                <span class="comment">// Fill in the data pattern with the args to build a valid URI</span></span><br><span class="line">                StringBuffer data = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">                Pattern fillInPattern = Pattern.compile(<span class="string">&quot;\\&#123;(.+?)\\&#125;&quot;</span>);</span><br><span class="line">                Matcher matcher = fillInPattern.matcher(dataPattern);</span><br><span class="line">                <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                    String argName = matcher.group(<span class="number">1</span>);</span><br><span class="line">                    <span class="keyword">if</span> (args.containsKey(argName)) &#123;</span><br><span class="line">                        matcher.appendReplacement(data, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                        <span class="comment">//noinspection ConstantConditions</span></span><br><span class="line">                        data.append(Uri.encode(args.get(argName).toString()));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Could not find &quot;</span> + argName + <span class="string">&quot; in &quot;</span></span><br><span class="line">                                + args + <span class="string">&quot; to fill data pattern &quot;</span> + dataPattern);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                matcher.appendTail(data);</span><br><span class="line">                intent.setData(Uri.parse(data.toString()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">// extra 获取额外的flag</span></span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            intent.addFlags(extras.getFlags());</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//设置intent的跳转的flag</span></span><br><span class="line">        <span class="keyword">if</span> (!(mContext <span class="keyword">instanceof</span> Activity)) &#123;</span><br><span class="line">            <span class="comment">// If we&#x27;re not launching from an Activity context we have to launch in a new task.</span></span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span> &amp;&amp; navOptions.shouldLaunchSingleTop()) &#123;</span><br><span class="line">            intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//设置跳转的当前页面的hostid 用来做页面溯源</span></span><br><span class="line">        <span class="keyword">if</span> (mHostActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">final</span> Intent hostIntent = mHostActivity.getIntent();</span><br><span class="line">            <span class="keyword">if</span> (hostIntent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="keyword">int</span> hostCurrentId = hostIntent.getIntExtra(EXTRA_NAV_CURRENT, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">if</span> (hostCurrentId != <span class="number">0</span>) &#123;</span><br><span class="line">                    intent.putExtra(EXTRA_NAV_SOURCE, hostCurrentId);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> destId = destination.getId();</span><br><span class="line">        intent.putExtra(EXTRA_NAV_CURRENT, destId);</span><br><span class="line">      <span class="comment">//设置跳转的动画</span></span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// For use in applyPopAnimationsToPendingTransition()</span></span><br><span class="line">            intent.putExtra(EXTRA_POP_ENTER_ANIM, navOptions.getPopEnterAnim());</span><br><span class="line">            intent.putExtra(EXTRA_POP_EXIT_ANIM, navOptions.getPopExitAnim());</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//使用context.startActivity来进行真正的跳转</span></span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            ActivityOptionsCompat activityOptions = extras.getActivityOptions();</span><br><span class="line">            <span class="keyword">if</span> (activityOptions != <span class="keyword">null</span>) &#123;</span><br><span class="line">                ActivityCompat.startActivity(mContext, intent, activityOptions.toBundle());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                mContext.startActivity(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mContext.startActivity(intent);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navOptions != <span class="keyword">null</span> &amp;&amp; mHostActivity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> enterAnim = navOptions.getEnterAnim();</span><br><span class="line">            <span class="keyword">int</span> exitAnim = navOptions.getExitAnim();</span><br><span class="line">            <span class="keyword">if</span> (enterAnim != -<span class="number">1</span> || exitAnim != -<span class="number">1</span>) &#123;</span><br><span class="line">                enterAnim = enterAnim != -<span class="number">1</span> ? enterAnim : <span class="number">0</span>;</span><br><span class="line">                exitAnim = exitAnim != -<span class="number">1</span> ? exitAnim : <span class="number">0</span>;</span><br><span class="line">                mHostActivity.overridePendingTransition(enterAnim, exitAnim);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来DialogFragment</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;dialog&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogFragmentNavigator</span> <span class="keyword">extends</span>  <span class="title">Navigator</span>&lt;<span class="title">DialogFragmentNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//同样的创建，传入navigator通过navigator来取出它的名字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">//设置className</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setClassName</span><span class="params">(<span class="meta">@NonNull</span> String className)</span> </span>&#123;</span><br><span class="line">      mClassName = className;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//核心跳转navigate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> <span class="keyword">final</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFragmentManager.isStateSaved()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Ignoring navigate() call: FragmentManager has already&quot;</span></span><br><span class="line">                    + <span class="string">&quot; saved its state&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String className = destination.getClassName();</span><br><span class="line">      <span class="comment">//1.获取classname 全类名</span></span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            className = mContext.getPackageName() + className;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//2.通过classname 反射构造一个fragment的对象  instantiate这个方法</span></span><br><span class="line">        <span class="keyword">final</span> Fragment frag = mFragmentManager.getFragmentFactory().instantiate(</span><br><span class="line">                mContext.getClassLoader(), className);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//3.如果不是dialogfragment的子类，就抛异常</span></span><br><span class="line">        <span class="keyword">if</span> (!DialogFragment.class.isAssignableFrom(frag.getClass())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Dialog destination &quot;</span> + destination.getClassName()</span><br><span class="line">                    + <span class="string">&quot; is not an instance of DialogFragment&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//4.强转成DialogFragment</span></span><br><span class="line">        <span class="keyword">final</span> DialogFragment dialogFragment = (DialogFragment) frag;</span><br><span class="line">        dialogFragment.setArguments(args);</span><br><span class="line">        dialogFragment.getLifecycle().addObserver(mObserver);</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5.通过show方法就把dialogfragment展示出来</span></span><br><span class="line">        dialogFragment.show(mFragmentManager, DIALOG_TAG + mDialogCount++);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> destination;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再来看FragmentNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;fragment&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FragmentNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">FragmentNavigator</span>.<span class="title">Destination</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Destination <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Destination(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@NavDestination</span>.ClassType(Fragment.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Destination</span> <span class="keyword">extends</span> <span class="title">NavDestination</span> </span>&#123;</span><br><span class="line">      <span class="comment">//同上，设置全类名</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Destination <span class="title">setClassName</span><span class="params">(<span class="meta">@NonNull</span> String className)</span> </span>&#123;</span><br><span class="line">            mClassName = className;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> Destination destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Navigator.Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mFragmentManager.isStateSaved()) &#123;</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;Ignoring navigate() call: FragmentManager has already&quot;</span></span><br><span class="line">                    + <span class="string">&quot; saved its state&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//1.通过destination获取classname 全类名</span></span><br><span class="line">        String className = destination.getClassName();</span><br><span class="line">        <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            className = mContext.getPackageName() + className;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//2.实例化一个fragment对象，并设置arguments</span></span><br><span class="line">        <span class="keyword">final</span> Fragment frag = instantiateFragment(mContext, mFragmentManager,</span><br><span class="line">                className, args);</span><br><span class="line">        frag.setArguments(args);</span><br><span class="line">      <span class="comment">//3.得到Transaction对象</span></span><br><span class="line">        <span class="keyword">final</span> FragmentTransaction ft = mFragmentManager.beginTransaction();</span><br><span class="line"><span class="comment">//跳转动画</span></span><br><span class="line">        <span class="keyword">int</span> enterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> exitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popEnterAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopEnterAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> popExitAnim = navOptions != <span class="keyword">null</span> ? navOptions.getPopExitAnim() : -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (enterAnim != -<span class="number">1</span> || exitAnim != -<span class="number">1</span> || popEnterAnim != -<span class="number">1</span> || popExitAnim != -<span class="number">1</span>) &#123;</span><br><span class="line">            enterAnim = enterAnim != -<span class="number">1</span> ? enterAnim : <span class="number">0</span>;</span><br><span class="line">            exitAnim = exitAnim != -<span class="number">1</span> ? exitAnim : <span class="number">0</span>;</span><br><span class="line">            popEnterAnim = popEnterAnim != -<span class="number">1</span> ? popEnterAnim : <span class="number">0</span>;</span><br><span class="line">            popExitAnim = popExitAnim != -<span class="number">1</span> ? popExitAnim : <span class="number">0</span>;</span><br><span class="line">            ft.setCustomAnimations(enterAnim, exitAnim, popEnterAnim, popExitAnim);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//4.通过replace跳转，这种方式不好，会告诉页面生命周期重启，需要自己再构建一个使用hide和show的FragmentNavigator</span></span><br><span class="line">        ft.replace(mContainerId, frag);</span><br><span class="line">        ft.setPrimaryNavigationFragment(frag);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="meta">@IdRes</span> <span class="keyword">int</span> destId = destination.getId();</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> initialNavigation = mBackStack.isEmpty();</span><br><span class="line">        <span class="comment">// TODO Build first class singleTop behavior for fragments</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isSingleTopReplacement = navOptions != <span class="keyword">null</span> &amp;&amp; !initialNavigation</span><br><span class="line">                &amp;&amp; navOptions.shouldLaunchSingleTop()</span><br><span class="line">                &amp;&amp; mBackStack.peekLast() == destId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> isAdded;</span><br><span class="line">        <span class="keyword">if</span> (initialNavigation) &#123;</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isSingleTopReplacement) &#123;</span><br><span class="line">            <span class="comment">// Single Top means we only want one instance on the back stack</span></span><br><span class="line">            <span class="keyword">if</span> (mBackStack.size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="comment">// If the Fragment to be replaced is on the FragmentManager&#x27;s</span></span><br><span class="line">                <span class="comment">// back stack, a simple replace() isn&#x27;t enough so we</span></span><br><span class="line">                <span class="comment">// remove it from the back stack and put our replacement</span></span><br><span class="line">                <span class="comment">// on the back stack in its place</span></span><br><span class="line">                mFragmentManager.popBackStack(</span><br><span class="line">                        generateBackStackName(mBackStack.size(), mBackStack.peekLast()),</span><br><span class="line">                        FragmentManager.POP_BACK_STACK_INCLUSIVE);</span><br><span class="line">                ft.addToBackStack(generateBackStackName(mBackStack.size(), destId));</span><br><span class="line">            &#125;</span><br><span class="line">            isAdded = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ft.addToBackStack(generateBackStackName(mBackStack.size() + <span class="number">1</span>, destId));</span><br><span class="line">            isAdded = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (navigatorExtras <span class="keyword">instanceof</span> Extras) &#123;</span><br><span class="line">            Extras extras = (Extras) navigatorExtras;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;View, String&gt; sharedElement : extras.getSharedElements().entrySet()) &#123;</span><br><span class="line">                ft.addSharedElement(sharedElement.getKey(), sharedElement.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ft.setReorderingAllowed(<span class="keyword">true</span>);</span><br><span class="line">        ft.commit();</span><br><span class="line">        <span class="comment">// The commit succeeded, update our view of the world</span></span><br><span class="line">        <span class="keyword">if</span> (isAdded) &#123;</span><br><span class="line">            mBackStack.add(destId);</span><br><span class="line">            <span class="keyword">return</span> destination;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后来看NavGraphNavigator</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Navigator</span>.Name(<span class="string">&quot;navigation&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavGraphNavigator</span> <span class="keyword">extends</span> <span class="title">Navigator</span>&lt;<span class="title">NavGraph</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里没有new Destination对象，而是new了一个NavGraph,传入Navigator</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NavGraph <span class="title">createDestination</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NavGraph(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NavGraph.java</p><p>是NavDestination的子类，是特殊的子类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavGraph</span> <span class="keyword">extends</span> <span class="title">NavDestination</span> <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">NavDestination</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//node数组，这里就是存储了一个个跳转节点的的实例，也就是我们在 mobile_navigation.xml中声明的一个个fragment activity实例，都会被存储到mNodes中</span></span><br><span class="line">    <span class="keyword">final</span> SparseArrayCompat&lt;NavDestination&gt; mNodes = <span class="keyword">new</span> SparseArrayCompat&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这个就是对应mobile_navigation.xml中指定的app:startDestination=&quot;@+id/navigation_dashboard&quot; 而一旦xml被解析，这里就获取到我们指定的页面id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mStartDestId;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么又是在哪里解析的，什么时候解析的呢？</p><p>还记得我们上面的宿主fragment NavHostFragment 我们在oncreate中创建了NavHostController</p><p>我们看下Controller中的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NavController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId)</span> </span>&#123;</span><br><span class="line">        setGraph(graphResId, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId, <span class="meta">@Nullable</span> Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//调用navinflater的inflate方法来解析xml文件</span></span><br><span class="line">        setGraph(getNavInflater().inflate(graphResId), startDestinationArgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个inflate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> NavGraph <span class="title">inflate</span><span class="params">(<span class="meta">@NavigationRes</span> <span class="keyword">int</span> graphResId)</span> </span>&#123;</span><br><span class="line">    Resources res = mContext.getResources();</span><br><span class="line">  <span class="comment">//1.获取xml parser来解析xml文件</span></span><br><span class="line">    XmlResourceParser parser = res.getXml(graphResId);</span><br><span class="line">  <span class="comment">//2.获取属性</span></span><br><span class="line">    <span class="keyword">final</span> AttributeSet attrs = Xml.asAttributeSet(parser);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> type;</span><br><span class="line">        <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.START_TAG</span><br><span class="line">                &amp;&amp; type != XmlPullParser.END_DOCUMENT) &#123;</span><br><span class="line">            <span class="comment">// Empty loop</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> XmlPullParserException(<span class="string">&quot;No start tag found&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String rootElement = parser.getName();</span><br><span class="line">      <span class="comment">//3.实际上是另一个inflate方法来解析构造出的具体的NavDestion对象  这里主要通过parser获取标签名，再通过name 在provider中拿到navigator 再通过navigator来创建各自的navigation</span></span><br><span class="line">        NavDestination destination = inflate(res, parser, attrs, graphResId);</span><br><span class="line">        <span class="keyword">if</span> (!(destination <span class="keyword">instanceof</span> NavGraph)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Root element &lt;&quot;</span> + rootElement + <span class="string">&quot;&gt;&quot;</span></span><br><span class="line">                    + <span class="string">&quot; did not inflate into a NavGraph&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (NavGraph) destination;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="comment">//也就是说我们在编写mobile_navigation.xml中的根节点必须是navigation 否则解析后会抛出异常</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;Exception inflating &quot;</span></span><br><span class="line">                + res.getResourceName(graphResId) + <span class="string">&quot; line &quot;</span></span><br><span class="line">                + parser.getLineNumber(), e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        parser.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过navigator来创建具体的跳转navigation实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> NavDestination <span class="title">inflate</span><span class="params">(<span class="meta">@NonNull</span> Resources res, <span class="meta">@NonNull</span> XmlResourceParser parser,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@NonNull</span> AttributeSet attrs, <span class="keyword">int</span> graphResId)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> XmlPullParserException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">//1.通过provider获取具体的navigator对象 parser.getName 得到的就是标签的名fragment dialog activity</span></span><br><span class="line">    Navigator&lt;?&gt; navigator = mNavigatorProvider.getNavigator(parser.getName());</span><br><span class="line">  <span class="comment">//2.得到navigator后，就通过调用 createDestination方法来得到创建NavDestination 最后也是返回的是这个dest</span></span><br><span class="line">    <span class="keyword">final</span> NavDestination dest = navigator.createDestination();</span><br><span class="line"></span><br><span class="line">    dest.onInflate(mContext, attrs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> innerDepth = parser.getDepth() + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">int</span> depth;</span><br><span class="line">    <span class="keyword">while</span> ((type = parser.next()) != XmlPullParser.END_DOCUMENT</span><br><span class="line">            &amp;&amp; ((depth = parser.getDepth()) &gt;= innerDepth</span><br><span class="line">            || type != XmlPullParser.END_TAG)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type != XmlPullParser.START_TAG) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (depth &gt; innerDepth) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> String name = parser.getName();</span><br><span class="line">      <span class="comment">//3.中间解析各个子标签</span></span><br><span class="line">      <span class="comment">//如查是argument标签，就把argument数据inflate到destination中</span></span><br><span class="line">        <span class="keyword">if</span> (TAG_ARGUMENT.equals(name)) &#123;</span><br><span class="line">            inflateArgumentForDestination(res, dest, attrs, graphResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_DEEP_LINK.equals(name)) &#123;</span><br><span class="line">          <span class="comment">//如果是deeplink 就把信息inflate到destination</span></span><br><span class="line">            inflateDeepLink(res, dest, attrs);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_ACTION.equals(name)) &#123;</span><br><span class="line">          <span class="comment">//如果是action就把信息infalte到destinatioin中的actioin中</span></span><br><span class="line">            inflateAction(res, dest, attrs, parser, graphResId);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (TAG_INCLUDE.equals(name) &amp;&amp; dest <span class="keyword">instanceof</span> NavGraph) &#123;</span><br><span class="line">            <span class="keyword">final</span> TypedArray a = res.obtainAttributes(</span><br><span class="line">                    attrs, androidx.navigation.R.styleable.NavInclude);</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> id = a.getResourceId(</span><br><span class="line">                    androidx.navigation.R.styleable.NavInclude_graph, <span class="number">0</span>);</span><br><span class="line">            ((NavGraph) dest).addDestination(inflate(id));</span><br><span class="line">            a.recycle();</span><br><span class="line">          <span class="comment">//如查是NavGraph </span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dest <span class="keyword">instanceof</span> NavGraph) &#123;</span><br><span class="line">          <span class="comment">//就递归去调用 inflate解析子标签，然后把子标签生成的destinatioin加入到NavGraph的mNodes中去</span></span><br><span class="line">            ((NavGraph) dest).addDestination(inflate(res, parser, attrs, graphResId));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解析完Navgraph后，把graph和controller相关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGraph</span><span class="params">(<span class="meta">@NonNull</span> NavGraph graph, <span class="meta">@Nullable</span> Bundle startDestinationArgs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mGraph != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// Pop everything from the old graph off the back stack</span></span><br><span class="line">        popBackStackInternal(mGraph.getId(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//把graph 赋值给controller中的mGraph变量</span></span><br><span class="line">    mGraph = graph;</span><br><span class="line">  <span class="comment">//这里就会把默认显示的页面给打开</span></span><br><span class="line">    onGraphCreated(startDestinationArgs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>回头看看NavGraphNavigator.java 的navigate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> NavDestination <span class="title">navigate</span><span class="params">(<span class="meta">@NonNull</span> NavGraph destination, <span class="meta">@Nullable</span> Bundle args,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> NavOptions navOptions, <span class="meta">@Nullable</span> Extras navigatorExtras)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//拿到默认展示页面的id</span></span><br><span class="line">    <span class="keyword">int</span> startId = destination.getStartDestination();</span><br><span class="line">    <span class="keyword">if</span> (startId == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;no start destination defined via&quot;</span></span><br><span class="line">                + <span class="string">&quot; app:startDestination for &quot;</span></span><br><span class="line">                + destination.getDisplayName());</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//有这个id后，就能拿到默认展示页面的destination对象</span></span><br><span class="line">    NavDestination startDestination = destination.findNode(startId, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (startDestination == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> String dest = destination.getStartDestDisplayName();</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;navigation destination &quot;</span> + dest</span><br><span class="line">                + <span class="string">&quot; is not a direct child of this NavGraph&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//然后通过name在provider中拿到navigator 这个navigator可能是fragmentnavigator activitynavigator dialognavigator</span></span><br><span class="line">    Navigator&lt;NavDestination&gt; navigator = mNavigatorProvider.getNavigator(</span><br><span class="line">            startDestination.getNavigatorName());</span><br><span class="line">  <span class="comment">//执行具体的navigator的naigate方法把默认页面启动起来</span></span><br><span class="line">    <span class="keyword">return</span> navigator.navigate(startDestination, startDestination.addInDefaultArgs(args),</span><br><span class="line">            navOptions, navigatorExtras);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Navigation各类之间的关系</p><p><img src="/../images/image-20220209144442113.png" alt="image-20220209144442113"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;主要介绍BottomNavigationView及其实现原理&lt;/p&gt;</summary>
    
    
    
    <category term="Jetpack系列" scheme="http://example.com/categories/Jetpack%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="Jetpack" scheme="http://example.com/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>MVVM及Databinding使用及原理解析</title>
    <link href="http://example.com/2022/05/16/MVVM%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/05/16/MVVM%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-15T22:35:47.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是MVVM"><a href="#什么是MVVM" class="headerlink" title="什么是MVVM"></a>什么是MVVM</h2><ul><li>双向绑定。数据变更<code>UI</code>会自动刷新，<code>UI</code>变化了数据也会自动同步到最新的值</li><li>数据驱动UI：比如<code>User</code>中的字段，数据变化了，可以做到自动刷新UI。</li><li>UI同步数据：比如<code>EditText</code>、<code>CheckBox</code>、<code>ToggleButton</code>具有状态的<code>View</code>，当状态变化后，数据模型中与之关联的字段的值也会自动同步最新状态</li></ul><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启databinding</span></span><br><span class="line">android&#123;</span><br><span class="line">dataBinding&#123;</span><br><span class="line">enable = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="传统的MVVM"><a href="#传统的MVVM" class="headerlink" title="传统的MVVM"></a>传统的MVVM</h3><p><img src="/../images/image-20220516064045932.png" alt="image-20220516064045932"></p><ul><li><p>此时<code>view</code>层的定义比较广泛，可以指<code>Activity/Fragment/xml</code>实例化出来的<code>view</code>对象或者自定义<code>view</code>对象</p></li><li><p><code>VM</code>就是这里的<code>viewmodel</code>,但是这并不是<code>Jetpack</code>组件里的<code>viewmodel</code>,18年，<code>livedata</code>和<code>viewmodel</code>没有出来前，这里的<code>viewmodel</code>只是一个普通的类，用于从<code>model</code>中获取数据，从<code>Model</code>中获取数据成功后会通过<code>callback</code>回传给<code>viewmodel</code>，而<code>viewmodel</code>中的数据更新后，并不是通过<code>view</code>接口(区别于<code>MVP</code>)回传给<code>view</code>更新的，而是通过<code>Databinding</code>，利用它观察者的特性，实现<code>UI</code>的更新</p></li></ul><p>定义<code>ViewModel</code>用于处理数据相关的业务逻辑。并通过<code>ObserverableField</code> 观察者把结果回传出去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ObservableField&lt;User&gt; userField = <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.nickName = <span class="string">&quot;nickName&quot;</span>;</span><br><span class="line">        user.address = <span class="string">&quot;address&quot;</span>;</span><br><span class="line">        <span class="comment">//自动通知与之关联的观察者</span></span><br><span class="line">        userField.set(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>注意一定要给<code>userField.set(user)</code> 把对象set给<code>userField</code> 这步不调用，是无法从<code>userField</code>中取数据的，会报NPE</p></blockquote><p>基于<code>DataBinding</code>在xml中进行数据绑定，可以实现数据&amp;UI双向绑定&#x3D;&gt;数据变更ui自动刷新，UI变动自动同步数据</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;viewModel&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.HomeViewModel&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;viewModel.userField.nickName&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@=&#123;viewModel.userField.address&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>只要<code>userField</code>中的<code>nickName</code>发生变化，UI会刷新，这是单向的</p><p>编写完<code>xml</code>后<code>rebuild</code>一个项目</p><p><code>Activity</code>控制数据的获取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> <span class="meta">@org</span>.jetbrains.annotations.Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">      </span><br><span class="line">        ActivityHomeBinding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_home);</span><br><span class="line"></span><br><span class="line">        HomeViewModel vm = <span class="keyword">new</span> HomeViewModel();</span><br><span class="line">        binding.setViewModel(vm);</span><br><span class="line">      </span><br><span class="line">      model.queryUserInfo();</span><br><span class="line"></span><br><span class="line">        binding.editAddress.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">              <span class="comment">//当输入框文本变更后，userField的address数据会自动更新，变成输入框输入的内容</span></span><br><span class="line">                Log.e(<span class="string">&quot;zzl&quot;</span>,<span class="string">&quot;after:&quot;</span> + vm.userField.get().address);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过<code>DataBindingUtil.setContentView</code>完成<code>Activity</code>和xml布局文件的绑定工作，返回一个<code>Databinding</code>对象，这个<code>databinding</code>对象是根据xml的名称在编译阶段生成的，我们可以直接拿来使用。</li><li>把vm通过<code>setViewModel</code>设置给<code>databinding</code></li><li>然后在<code>Activity</code>中调用 <code>model.queryUserInfo()</code>去获取数据，可能是网络上的数据，然后<code>activity</code>就不管数据获取后UI的更新了</li></ul><p>这就是传统的MVVM，它着重利用了<code>Databinding</code>的能力，大部分的数据都是在xml中进行绑定，当然也会根据场景，具体问题具体分析。如果需要用户交互复杂的逻辑控制，可能还是需要在<code>activity</code>中进行控制更为方便。</p><p>但是这种写法已经过时了，后面出现了<code>Jetpack</code>，在<code>Jetpack</code>模式下，我们通常会利用<code>VieModel + LiveData</code>的组件结合。</p><p>这样做的目的是既能保证数据不会无缘无故丢失，还能<strong>自动关联宿主的生命周期</strong>，避免空指针的问题。<code>Activity</code>，<code>Fragment UI</code>逻辑和用户交互控制就可以了。数据的绑定可以交给<code>Databindging</code></p><h3 id="Jetpack-Viewmodel-livedata使用"><a href="#Jetpack-Viewmodel-livedata使用" class="headerlink" title="Jetpack Viewmodel + livedata使用"></a>Jetpack Viewmodel + livedata使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LiveData <span class="title">getUserInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        MutableLiveData&lt;User&gt; liveData = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.nickName = <span class="string">&quot;zzl&quot;</span>;</span><br><span class="line">        user.address = <span class="string">&quot;changchun&quot;</span>;</span><br><span class="line"></span><br><span class="line">        liveData.postValue(user);</span><br><span class="line">        <span class="keyword">return</span> liveData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><ul><li>注意这里既不是使用观察者<code>ObservableField</code>包裹对象，也不是使用<code>view</code>的接口回调<code>callback</code>去回传数据，而是使用了<code>livedata</code>，通过<code>liveData.postValue(user)</code>并返回<code>liveData</code>，去通知观察者</li></ul><p>下面看下xml文件的变化</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.User&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.nickName&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@=&#123;user.address&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里注意绑定的对象不再是<code>viewmodel</code>而直接是<code>user</code>对象</li><li>直接使用<code>user.nickName</code>  <code>user.address</code>访问对象的值</li></ul><p>看下<code>Activity</code>里的逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeActivity3</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> <span class="meta">@org</span>.jetbrains.annotations.Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ActivityHome2Binding binding = DataBindingUtil.setContentView(<span class="keyword">this</span>, R.layout.activity_home2);</span><br><span class="line">        ViewModelProvider provider = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> ViewModelProvider.NewInstanceFactory());</span><br><span class="line">        HomeViewModel vm = provider.get(HomeViewModel.class);</span><br><span class="line"></span><br><span class="line">        vm.getUserInfo().observe(<span class="keyword">this</span>, (Observer&lt;User&gt;) user -&gt; &#123;</span><br><span class="line">            binding.setUser(user);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Jetpack里的api使用会有一点点不同</p><ul><li><code>DataBindingUtil.setContentView</code>把xml和<code>activity</code>进行绑定，生成<code>databinding</code></li><li>通过<code>ViewModelProvider</code>获取具体的<code>HomeViewModel</code>对象</li><li>通过vm获取发送数据的<code>liveData</code>，注册观察者，在回调里进行<code>binding.setUser(user);</code>绑定</li></ul><h2 id="DataBinding的高频用法及注意事项"><a href="#DataBinding的高频用法及注意事项" class="headerlink" title="DataBinding的高频用法及注意事项"></a>DataBinding的高频用法及注意事项</h2><h3 id="什么是dataBinding"><a href="#什么是dataBinding" class="headerlink" title="什么是dataBinding?"></a>什么是dataBinding?</h3><ul><li>可以理解为<code>dataBinding</code>只是一种工具，它解决了view和数据之间的双向绑定</li></ul><h3 id="dataBinding的优势？"><a href="#dataBinding的优势？" class="headerlink" title="dataBinding的优势？"></a>dataBinding的优势？</h3><ul><li>双向数据绑定 数据发生改变后，自动通知刷新UI页面，不再需要人工绑定最新数据到view上。UI改变后也能同步给数据。</li><li>减少模板代码 有了dataBinding，从此不用再写<code>findViewById</code>,<code>setOnClickListener</code>等枯燥生硬的代码，大大提高工作效率。从此<code>Butterknife</code>靠边站。</li><li>释放<code>Activitty/Fragment</code>压力 我们可以直接在xml布局文件中完成数据，事件绑定工作。<code>Activity</code>,<code>Fragment</code>让它更加只关注核心业务。</li><li>数据绑定空安全 在xml中绑定数据它是空安全的，因为<code>dataBinding</code>在数据绑定上会自动装箱和空判断，所以大大减少了数据绑定带来的<code>NPE</code>问题</li></ul><h3 id="dataBinding如何使用？"><a href="#dataBinding如何使用？" class="headerlink" title="dataBinding如何使用？"></a>dataBinding如何使用？</h3><ul><li>在布局文件中，选中根布局的标签，按住 <code>alt + 回车</code> ，点击<code>convert to data binding layout</code> 即可转换成<code>dataBinding</code>布局。</li><li>转换后的布局，最外层变成了<code>layout</code>标签，里面包裹了<code>data</code>标签和常规的布局元素。data元素用来声明在此布局使用到的变量和变量类型，以及类引用。最不是所有的属性都能用<code>dataBinding</code>来绑定呢？当然不是！如果一个属性<code>xxx</code>，在该类中有<code>setXXX</code>方法，我们才能使用<code>dataBinding</code>来绑定。比如<code>android:layout_width</code>，<code>android_height</code>就不能使用<code>dataBinding</code>来绑定值，而<code>android:paddingLeft</code>，<code>android:textSize</code>都是可以的。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.User&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.UserManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/tvName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;200dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span>  //不能使用<span class="attr">dataBinding</span>动态绑定</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.name&#125;&quot;</span> //单向绑定数据变更自动通知<span class="attr">UI</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;@&#123;@dimen/16sp&#125;&quot;</span> //资源引用</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;user.nickName + @string/suffix&#125;&quot;</span> //字符串拼接需要引用资源</span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;UserManager.getUserName()&#125;&quot;</span> //调用静态方法，类必须先导入</span></span><br><span class="line"><span class="tag">            <span class="attr">android:onClick</span>=<span class="string">&quot;@&#123;()-&gt;UserManager.login()&#125;&quot;</span></span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>android:text=&quot;@&#123;user.name&#125;&quot;</code>等价于<code>tvName.text = user.name</code>这样就将数据和<code>view</code>相关联了。那么如何实现<code>view</code>和数据的双向绑定呢？我们除了上面提到的让<code>ObservableField</code>持有外，还可以让实体类<code>User</code>继承<code>BaseObservable</code>。当user中字段发生变更，只需要调用<code>user.notifyPropertyChanged</code>就可以让<code>UI刷新</code>。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当使用name字段发生变更后，若想UI自动刷新，我们需要给它写个get方法并且标记为Bindable注解</span></span><br><span class="line">    <span class="comment">//最后调用 notifyPropertyChanged方法即可</span></span><br><span class="line">    <span class="meta">@Bindable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        notifyPropertyChanged(BR.user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>dataBinding</code> 也支持在布局文件中使用<code>数组、List、Set和Map</code>，且在布局文件中都可以通过<code>list[index]</code>的形式来获取元素，因为xml的特性，在声明<code>List&lt;String&gt;</code>之类的类型时，需要使用尖括号的<code>转义字符</code>，如下</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.List&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Set&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;java.util.Map&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">import</span> <span class="attr">type</span>=<span class="string">&quot;android.util.SparseArray&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;array&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String[]&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--List&lt;String&gt; 需要转义--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;list&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;List<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Map&lt;String&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;map&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;Map<span class="symbol">&amp;lt;</span>String,String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Set&lt;Strin&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;set&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;Set<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--SparseArray&lt;String&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;sparse&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;SparseArray<span class="symbol">&amp;lt;</span>String<span class="symbol">&amp;gt;</span>&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">variable</span></span></span><br><span class="line"><span class="tag">            <span class="attr">name</span>=<span class="string">&quot;key&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">type</span>=<span class="string">&quot;String&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;array[1]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;sparse[index]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;list[index]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;@&#123;map[key]&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&#x27;@&#123;map[&quot;移动端架构师&quot;]&#125;&#x27;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&#x27;@&#123;set.contains(&quot;xxx&quot;)?&quot;移动端架构师&quot;:key&#125;&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>dataBinding</code>在xml中数据绑定支持的语法表达式也是非常丰富的，支持在布局文件中使用以下运算符、表达式和关键字</li></ul><p><img src="/../images/image-20220516091030481.png" alt="image-20220516091030481"></p><p><img src="/../images/image-20220516091050642.png" alt="image-20220516091050642"></p><ul><li>dataBinding 拓展view属性</li></ul><p>我们知道，以前想要给ImageView增加几个属性，必须要写个自定义的ImageView在构造函数中一顿解析。那看看使用dataBinding如何拓展view属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HiImageView</span> <span class="keyword">extends</span> <span class="title">ImageView</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BindingAdapter(value = &#123;&quot;image_url&quot;,&quot;isCircle&quot;,&quot;radius&quot;&#125;,requireAll = false)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setImageUrl</span><span class="params">(ImageView view,String imageUrl,<span class="keyword">boolean</span> isCircle,<span class="keyword">int</span> radius)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>需要定义成<code>public static</code> 使用<code>BindingAdapter</code>注解并标记</li><li><code>value</code>中的字段随意添加和方法参数一一对应即可。</li><li>requirAll &#x3D; false代表是否以下三个属性在xml中同时使用才会调用该方法，为<code>flase</code>的话，只要有一个属性被使用就能调用到该方法</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.steve.mvvmdemo.jetpackmvvm.HiImageView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:image_url</span>=<span class="string">&quot;@&#123;user.avatar&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:radius</span>=<span class="string">&quot;@&#123;50&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在布局文件中如下使用，便能实现图片圆角和资源url绑定的功能</li></ul><h3 id="dataBinding使用建议"><a href="#dataBinding使用建议" class="headerlink" title="dataBinding使用建议"></a>dataBinding使用建议</h3><ul><li>不建议在列表中乱用，因为dataBinding数据绑定是延迟一帧的，如果列表中的ItemView的宽高需要计算后才能正确展示，或者显隐控制，不建议使用databinding操作，否则会看到列表itemview有可能撑开的动画，体验不好。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRebind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContainingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContainingBinding.requestRebind();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> LifecycleOwner owner = <span class="keyword">this</span>.mLifecycleOwner;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Lifecycle.State state = owner.getLifecycle().getCurrentState();</span><br><span class="line">            <span class="keyword">if</span> (!state.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// wait until lifecycle owner is started</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPendingRebind) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingRebind = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//这里下一次屏幕绘制才会进行绑定</span></span><br><span class="line">        <span class="keyword">if</span> (USE_CHOREOGRAPHER) &#123;</span><br><span class="line">            mChoreographer.postFrameCallback(mFrameCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mUIThreadHandler.post(mRebindRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>SDK_INT&gt;&#x3D;16 都会执行这里，在下一次绘制时，才会重新绑定数据</p></blockquote><ul><li>如fragment_layout_my.xml布局，在编译时会生成FragmentLayoutMyImpl.class我们可以搜索这种类debug跟进解决问题。</li></ul><p>build&#x2F;intermediates&#x2F;javac&#x2F;debug&#x2F;clasees&#x2F;org&#x2F;…&#x2F;databinding&#x2F;FragmentLayoutMyImpl.class</p><h2 id="dataBinding与ViewBinding的区别"><a href="#dataBinding与ViewBinding的区别" class="headerlink" title="dataBinding与ViewBinding的区别"></a>dataBinding与ViewBinding的区别</h2><ul><li>viewbinding可以看做是一个databinding的一部分功能 最主要的表现就是可以通过绑定后不用findviewbyid了，但不能进行双向绑定</li><li>相对来说databinding的功能更强大一些，不只是可以直接获取控件对象，并且可以通过数据绑定的形式实时更新页面UI</li><li>从编译效率来讲viewBinding的效率更快一些，databinding的效率要慢一些</li><li>viewbinding优点也是明显的不需要对原有的xml文件进行侵入</li></ul><h2 id="DataBinding原理与编译时绑定布局对象"><a href="#DataBinding原理与编译时绑定布局对象" class="headerlink" title="DataBinding原理与编译时绑定布局对象"></a>DataBinding原理与编译时绑定布局对象</h2><p><img src="/../images/image-20220516120558811.png" alt="image-20220516120558811"></p><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li>1.通过源码我们要知道<code>databinding</code>如何实现<code>M-V V-M</code>的<code>双向刷新机制</code></li><li>2.<code>databinding</code>内存开销过大的原因是什么？</li></ul><p>1.<code>rebuild</code>后，生成两个<code>xml</code>文件</p><p><img src="/../images/image-20220516122044224.png" alt="image-20220516122044224"></p><p>这两个xml文件分别有各自的用处 <code>xxx-layout</code> 用于Databinding处理，正常的xml文件中也会有tag</p><p><code>activity_home-layout.xml</code>文件的路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="regexp">/build/i</span>ntermediates<span class="regexp">/data_binding_layout_info_type_merge/</span>debug<span class="regexp">/out/</span>activity_home-layout.xml</span><br></pre></td></tr></table></figure><p><code>activity_home.xml</code>文件的路径是</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app<span class="regexp">/build/i</span>ntermediates<span class="regexp">/incremental/m</span>ergeDebugResources<span class="regexp">/stripped.dir/</span>layout/activity_home.xml</span><br></pre></td></tr></table></figure><p>我们看下<code>acitivty_home-layout.xml</code>文件的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;yes&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Layout</span> <span class="attr">directory</span>=<span class="string">&quot;layout&quot;</span> <span class="attr">filePath</span>=<span class="string">&quot;app/src/main/res/layout/activity_home.xml&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">isBindingData</span>=<span class="string">&quot;true&quot;</span> <span class="attr">isMerge</span>=<span class="string">&quot;false&quot;</span> <span class="attr">layout</span>=<span class="string">&quot;activity_home&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">modulePackage</span>=<span class="string">&quot;com.steve.mvvmdemo&quot;</span> <span class="attr">rootNodeType</span>=<span class="string">&quot;android.widget.LinearLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Targets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">tag</span>=<span class="string">&quot;layout/activity_home_0&quot;</span> <span class="attr">view</span>=<span class="string">&quot;LinearLayout&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;30&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;18&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;10&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;4&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">id</span>=<span class="string">&quot;@+id/nick_name&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;binding_1&quot;</span> <span class="attr">view</span>=<span class="string">&quot;TextView&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Expression</span> <span class="attr">attribute</span>=<span class="string">&quot;android:text&quot;</span> <span class="attr">text</span>=<span class="string">&quot;viewModel.userField.nickName&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Location</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;57&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TwoWay</span>&gt;</span>false<span class="tag">&lt;/<span class="name">TwoWay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ValueLocation</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;55&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;28&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Expression</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Expressions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;20&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;59&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;16&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Target</span> <span class="attr">id</span>=<span class="string">&quot;@+id/edit_address&quot;</span> <span class="attr">tag</span>=<span class="string">&quot;binding_2&quot;</span> <span class="attr">view</span>=<span class="string">&quot;EditText&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Expressions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Expression</span> <span class="attr">attribute</span>=<span class="string">&quot;android:text&quot;</span> <span class="attr">text</span>=<span class="string">&quot;viewModel.userField.address&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Location</span> <span class="attr">endLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;57&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;12&quot;</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">TwoWay</span>&gt;</span>true<span class="tag">&lt;/<span class="name">TwoWay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ValueLocation</span> <span class="attr">endLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;55&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;27&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;29&quot;</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Expression</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Expressions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;28&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;13&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;23&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Targets</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Variables</span> <span class="attr">name</span>=<span class="string">&quot;viewModel&quot;</span> <span class="attr">declared</span>=<span class="string">&quot;true&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.steve.mvvmdemo.test.HomeViewModel&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span> <span class="attr">endLine</span>=<span class="string">&quot;6&quot;</span> <span class="attr">endOffset</span>=<span class="string">&quot;58&quot;</span> <span class="attr">startLine</span>=<span class="string">&quot;4&quot;</span> <span class="attr">startOffset</span>=<span class="string">&quot;8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Variables</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再看下<code>activity_home.xml</code>文件的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line">                                                                   </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">                 </span><br><span class="line">                            </span><br><span class="line">                                                           </span><br><span class="line"></span><br><span class="line">           </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span> <span class="attr">android:tag</span>=<span class="string">&quot;layout/activity_home_0&quot;</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--单向绑定@--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/nick_name&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:tag</span>=<span class="string">&quot;binding_1&quot;</span>                       /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--双向绑定@=--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/edit_address&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:tag</span>=<span class="string">&quot;binding_2&quot;</span>                       </span></span><br><span class="line"><span class="tag">            /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">         </span><br></pre></td></tr></table></figure><ul><li>它会把<code>layout</code>标签去掉，然后在每个标签下打上<code>tag</code></li></ul><p><code>rebuild</code>后发生了啥</p><p><img src="/../images/image-20220516122508848.png" alt="image-20220516122508848"></p><p>2.从<code>setContentView</code>开始看源码</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.必须先ReBuilder 2.书写代码绑定</span></span><br><span class="line"><span class="keyword">val</span> contentView = DataBindingUtil.setContentView&lt;ActivityLoginBinding&gt;(<span class="keyword">this</span>, R.layout.activity_login)</span><br></pre></td></tr></table></figure><p><code>Databinding</code>为什么还要去<code>setContentView</code></p><p><img src="file://../images/image-20220516122354494.png?lastModify=1652754461" alt="image-20220516122354494"></p><p>因为需要<code>activity</code>去获取根布局<code>root</code> 这样<code>binding</code>才能去更改布局刷新</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(<span class="meta">@NonNull</span> Activity activity,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> layoutId, <span class="meta">@Nullable</span> DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">    activity.setContentView(layoutId);</span><br><span class="line">    View decorView = activity.getWindow().getDecorView();</span><br><span class="line">    ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">    <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>activity.getWindow().getDecorView()</code> 获取根布局<code>view</code> 由<code>decorView</code> 获取<code>contentView</code> 然后发生<code>bind</code>绑定，执行<code>bindToAddedViews</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span></span></span><br><span class="line"><span class="params"><span class="function">        ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">    <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>所有的<code>view</code>子<code>view</code>都会执行<code>bind</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bind</span><span class="params">(DataBindingComponent bindingComponent, View[] roots,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) sMapper.getDataBinder(bindingComponent, roots, layoutId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getDataBinder</code> 是一个抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinderMapper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="keyword">int</span> layoutId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent bindingComponent,</span></span></span><br><span class="line"><span class="params"><span class="function">            View[] view, <span class="keyword">int</span> layoutId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看它具体的实现类<code>DataBinderMapperImpl</code> 注意要找自己包名下的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBinderMapperImpl</span> <span class="keyword">extends</span> <span class="title">DataBinderMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ViewDataBinding <span class="title">getDataBinder</span><span class="params">(DataBindingComponent component, View view, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> localizedLayoutId = INTERNAL_LAYOUT_ID_LOOKUP.get(layoutId);</span><br><span class="line">    <span class="keyword">if</span>(localizedLayoutId &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">final</span> Object tag = view.getTag();</span><br><span class="line">      <span class="keyword">if</span>(tag == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;view must have a tag&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">switch</span>(localizedLayoutId) &#123;</span><br><span class="line">        <span class="keyword">case</span>  LAYOUT_ACTIVITYHOME: &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">&quot;layout/activity_home_0&quot;</span>.equals(tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActivityHomeBindingImpl(component, view);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The tag for activity_home is invalid. Received: &quot;</span> + tag);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span>  LAYOUT_ACTIVITYLOGIN: &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="string">&quot;layout/activity_login_0&quot;</span>.equals(tag)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ActivityLoginBindingImpl(component, view);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;The tag for activity_login is invalid. Received: &quot;</span> + tag);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之前说把所有的<code>view</code>都打上了<code>tag</code> 这里通过获取<code>tag</code> 开始匹配不同的<code>bindingimpl</code>，<code>layout/activity_home_0</code> 和之前的<code>xml</code>中的<code>LineanerLayout</code>标签的<code>tag</code>对应上了，走<code>ActivityHomeBindingImpl</code>的构造方法的逻辑</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(<span class="meta">@Nullable</span> androidx.databinding.DataBindingComponent bindingComponent, <span class="meta">@NonNull</span> View root)</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>(bindingComponent, root, mapBindings(bindingComponent, root, <span class="number">3</span>, sIncludes, sViewsWithIds));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(androidx.databinding.DataBindingComponent bindingComponent, View root, Object[] bindings)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(bindingComponent, root, <span class="number">1</span></span><br><span class="line">        , (android.widget.EditText) bindings[<span class="number">2</span>]</span><br><span class="line">        , (android.widget.TextView) bindings[<span class="number">1</span>]</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">this</span>.editAddress.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.mboundView0 = (android.widget.LinearLayout) bindings[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.mboundView0.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.nickName.setTag(<span class="keyword">null</span>);</span><br><span class="line">    setRootTag(root);</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>第一个内存占用过高的原因来了</code>，注意看</p></li><li><p><code>Object[]</code> 这个对象数组缓存了控件，这块内存是额外的，通过执行<code>mapBindings</code>方法传入，我们看<code>mapBindings</code>怎么填充的这个对象数组</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mapBindings</span><span class="params">(DataBindingComponent bindingComponent, View view,</span></span></span><br><span class="line"><span class="params"><span class="function">        Object[] bindings, IncludedLayouts includes, SparseIntArray viewsWithIds,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">boolean</span> isRoot)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> indexInIncludes;</span><br><span class="line">    <span class="keyword">final</span> ViewDataBinding existingBinding = getBinding(view);</span><br><span class="line">    <span class="keyword">if</span> (existingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Object objTag = view.getTag();</span><br><span class="line">    <span class="keyword">final</span> String tag = (objTag <span class="keyword">instanceof</span> String) ? (String) objTag : <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">boolean</span> isBound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (isRoot &amp;&amp; tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(<span class="string">&quot;layout&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> underscoreIndex = tag.lastIndexOf(<span class="string">&#x27;_&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (underscoreIndex &gt; <span class="number">0</span> &amp;&amp; isNumeric(tag, underscoreIndex + <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="keyword">int</span> index = parseTagInt(tag, underscoreIndex + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (bindings[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bindings[index] = view;</span><br><span class="line">            &#125;</span><br><span class="line">            indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : index;</span><br><span class="line">            isBound = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (tag != <span class="keyword">null</span> &amp;&amp; tag.startsWith(BINDING_TAG_PREFIX)) &#123;</span><br><span class="line">        <span class="keyword">int</span> tagIndex = parseTagInt(tag, BINDING_NUMBER_START);</span><br><span class="line">        <span class="keyword">if</span> (bindings[tagIndex] == <span class="keyword">null</span>) &#123;</span><br><span class="line">            bindings[tagIndex] = view;</span><br><span class="line">        &#125;</span><br><span class="line">        isBound = <span class="keyword">true</span>;</span><br><span class="line">        indexInIncludes = includes == <span class="keyword">null</span> ? -<span class="number">1</span> : tagIndex;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Not a bound view</span></span><br><span class="line">        indexInIncludes = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!isBound) &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> id = view.getId();</span><br><span class="line">        <span class="keyword">if</span> (id &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> index;</span><br><span class="line">            <span class="keyword">if</span> (viewsWithIds != <span class="keyword">null</span> &amp;&amp; (index = viewsWithIds.get(id, -<span class="number">1</span>)) &gt;= <span class="number">0</span> &amp;&amp;</span><br><span class="line">                    bindings[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                bindings[index] = view;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (view <span class="keyword">instanceof</span>  ViewGroup) &#123;</span><br><span class="line">        <span class="keyword">final</span> ViewGroup viewGroup = (ViewGroup) view;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> count = viewGroup.getChildCount();</span><br><span class="line">        <span class="keyword">int</span> minInclude = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> View child = viewGroup.getChildAt(i);</span><br><span class="line">            <span class="keyword">boolean</span> isInclude = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (indexInIncludes &gt;= <span class="number">0</span> &amp;&amp; child.getTag() <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                String childTag = (String) child.getTag();</span><br><span class="line">                <span class="keyword">if</span> (childTag.endsWith(<span class="string">&quot;_0&quot;</span>) &amp;&amp;</span><br><span class="line">                        childTag.startsWith(<span class="string">&quot;layout&quot;</span>) &amp;&amp; childTag.indexOf(<span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// This *could* be an include. Test against the expected includes.</span></span><br><span class="line">                    <span class="keyword">int</span> includeIndex = findIncludeIndex(childTag, minInclude,</span><br><span class="line">                            includes, indexInIncludes);</span><br><span class="line">                    <span class="keyword">if</span> (includeIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        isInclude = <span class="keyword">true</span>;</span><br><span class="line">                        minInclude = includeIndex + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> index = includes.indexes[indexInIncludes][includeIndex];</span><br><span class="line">                        <span class="keyword">final</span> <span class="keyword">int</span> layoutId = includes.layoutIds[indexInIncludes][includeIndex];</span><br><span class="line">                        <span class="keyword">int</span> lastMatchingIndex = findLastMatching(viewGroup, i);</span><br><span class="line">                        <span class="keyword">if</span> (lastMatchingIndex == i) &#123;</span><br><span class="line">                            bindings[index] = DataBindingUtil.bind(bindingComponent, child,</span><br><span class="line">                                    layoutId);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">final</span> <span class="keyword">int</span> includeCount =  lastMatchingIndex - i + <span class="number">1</span>;</span><br><span class="line">                            <span class="keyword">final</span> View[] included = <span class="keyword">new</span> View[includeCount];</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; includeCount; j++) &#123;</span><br><span class="line">                                included[j] = viewGroup.getChildAt(i + j);</span><br><span class="line">                            &#125;</span><br><span class="line">                            bindings[index] = DataBindingUtil.bind(bindingComponent, included,</span><br><span class="line">                                    layoutId);</span><br><span class="line">                            i += includeCount - <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!isInclude) &#123;</span><br><span class="line">                mapBindings(bindingComponent, child, bindings, includes, viewsWithIds, <span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>对标签进行了解析，以<code>layout</code>开头的，以<code>binding</code>开头的 把<code>view</code>填充到<code>object[]</code>数组里</p></li><li><p>这样内存中就了<code>textview</code> <code>edittext</code>的副本，这是内存的额外开销</p></li></ul><p><code>这是第一个为什么内存大的原因</code></p><p><strong>我们来看看M-V V-M更新的机制</strong></p><p><code>ActivityHomeBinding</code>继承自<code>ViewDataBinding</code> ，看下<code>ViewDataBinding</code>的<code>static</code>静态代码块初始都做了啥</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (VERSION.SDK_INT &lt; VERSION_CODES.KITKAT) &#123;</span><br><span class="line">        ROOT_REATTACHED_LISTENER = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ROOT_REATTACHED_LISTENER = <span class="keyword">new</span> OnAttachStateChangeListener() &#123;</span><br><span class="line">            <span class="meta">@TargetApi(VERSION_CODES.KITKAT)</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewAttachedToWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// execute the pending bindings.</span></span><br><span class="line">                <span class="keyword">final</span> ViewDataBinding binding = getBinding(v);</span><br><span class="line">                binding.mRebindRunnable.run();</span><br><span class="line">                v.removeOnAttachStateChangeListener(<span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewDetachedFromWindow</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一开始就注册了一个对view attachtowindow的监听</p><p><code>binding.mRebindRunnable</code>是个的Runnable</p><p>这是第二个为什么占内存的原因，因为每一个使用了<code>databinding</code>的界面都会生成一个这个<code>Runnable</code>，同时数据的双向绑定也是在这里完成的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mRebindRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            mPendingRebind = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        processReferenceQueue();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (VERSION.SDK_INT &gt;= VERSION_CODES.KITKAT) &#123;</span><br><span class="line">            <span class="comment">// Nested so that we don&#x27;t get a lint warning in IntelliJ</span></span><br><span class="line">            <span class="keyword">if</span> (!mRoot.isAttachedToWindow()) &#123;</span><br><span class="line">                <span class="comment">// Don&#x27;t execute the pending bindings until the View</span></span><br><span class="line">                <span class="comment">// is attached again.</span></span><br><span class="line">                mRoot.removeOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                mRoot.addOnAttachStateChangeListener(ROOT_REATTACHED_LISTENER);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        executePendingBindings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>看下<code>executePendingBindings</code>最后会执行到<code>protected abstract void executeBindings()</code> 这是一个抽象类，我们看它在<code>ActivityHomeBindingImpl</code>的实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeBindings</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">    <span class="comment">// batch finished</span></span><br><span class="line">    <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x7L</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.editAddress, viewModelUserFieldAddress);</span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setText(<span class="keyword">this</span>.nickName, viewModelUserFieldNickName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((dirtyFlags &amp; <span class="number">0x4L</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// api target 1</span></span><br><span class="line"></span><br><span class="line">        androidx.databinding.adapters.TextViewBindingAdapter.setTextWatcher(<span class="keyword">this</span>.editAddress, (androidx.databinding.adapters.TextViewBindingAdapter.BeforeTextChanged)<span class="keyword">null</span>, (androidx.databinding.adapters.TextViewBindingAdapter.OnTextChanged)<span class="keyword">null</span>, (androidx.databinding.adapters.TextViewBindingAdapter.AfterTextChanged)<span class="keyword">null</span>, editAddressandroidTextAttrChanged);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>看到这里应该就明白了，<code>UI和data是怎么双向绑定的</code></li></ul><p>那么还有一个内存过大的原因，我们看<code>ActivityHomeBindingImpl</code>的构造中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ActivityHomeBindingImpl</span><span class="params">(androidx.databinding.DataBindingComponent bindingComponent, View root, Object[] bindings)</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个<code>invalidateAll</code>会执行<code>requestRebind</code>函数</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">requestRebind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mContainingBinding != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mContainingBinding.requestRebind();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> LifecycleOwner owner = <span class="keyword">this</span>.mLifecycleOwner;</span><br><span class="line">        <span class="keyword">if</span> (owner != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Lifecycle.State state = owner.getLifecycle().getCurrentState();</span><br><span class="line">            <span class="keyword">if</span> (!state.isAtLeast(Lifecycle.State.STARTED)) &#123;</span><br><span class="line">                <span class="keyword">return</span>; <span class="comment">// wait until lifecycle owner is started</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mPendingRebind) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            mPendingRebind = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (USE_CHOREOGRAPHER) &#123;</span><br><span class="line">            mChoreographer.postFrameCallback(mFrameCallback);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mUIThreadHandler.post(mRebindRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后这里给主线程发送消息,这也是内存开销之一</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;什么是MVVM&quot;&gt;&lt;a href=&quot;#什么是MVVM&quot; class=&quot;headerlink&quot; title=&quot;什么是MVVM&quot;&gt;&lt;/a&gt;什么是MVVM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;双向绑定。数据变更&lt;code&gt;UI&lt;/code&gt;会自动刷新，&lt;code&gt;UI&lt;/code</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>竟然如此简单，DataBinding 和 ViewBinding[转]</title>
    <link href="http://example.com/2022/05/16/%E7%AB%9F%E7%84%B6%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%EF%BC%8CDataBinding-%E5%92%8C-ViewBinding-%E8%BD%AC/"/>
    <id>http://example.com/2022/05/16/%E7%AB%9F%E7%84%B6%E5%A6%82%E6%AD%A4%E7%AE%80%E5%8D%95%EF%BC%8CDataBinding-%E5%92%8C-ViewBinding-%E8%BD%AC/</id>
    <published>2022-05-15T20:27:52.000Z</published>
    <updated>2022-05-17T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6913723416671420430">原文链接：竟然如此简单，DataBinding 和 ViewBinding</a></p><p>在之前的文章 <a href="https://juejin.cn/post/6905942568467759111">Kotlin 插件的落幕，ViewBinding 的崛起</a> 中介绍了 Google 为什么不建议在项目中使用  Kotlin 合成方法（Synthetic 视图）， Google 建议使用 ViewBinding 替换 Kotlin 合成方法，那么 ViewBinding 和 DataBinding 都有什么区别。</p><p><strong>ViewBinding：</strong></p><ul><li>仅仅支持绑定 View</li><li>不需要在布局文件中添加 layout 标签</li><li>需要在模块级 <code>build.gradle</code> 文件中添加 <code>viewBinding = true</code> 即可使用</li><li>效率高于 DataBinding，因为避免了与数据绑定相关的开销和性能问题</li><li>相比于 <code>kotlin-android-extensions</code> 插件避免了空异常</li></ul><p><strong>DataBinding：</strong></p><ul><li>包含了 ViewBinding 所有的功能</li><li>需要在模块级 <code>build.gradle</code> 文件内添加 <code>dataBinding = true</code> 并且需要在布局文件中添加 layout 标签才可以使用</li><li>支持 data 和 view 双向绑定</li><li>效率低于 ViewBinding，因为注释处理器会影响数据绑定的构建时间。</li></ul><p>ViewBinding 可以实现的， DataBinding 都可以实现，但是 DataBinding 的性能低于 ViewBinding，DataBinding 和 ViewBinding 会为每个 XML 文件生成绑定类。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.activity_main -&gt; ActivityMainBinding</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.fragment_main -&gt; FragmentMainBinding</span><br><span class="line"><span class="module-access"><span class="module"><span class="identifier">R</span>.</span></span>layout.dialog_app -&gt; DialogAppBinding</span><br></pre></td></tr></table></figure><p>在 <a href="https://juejin.cn/post/6905942568467759111">Kotlin 插件的落幕，ViewBinding 的崛起</a> 文章中同时也分析了 Kotlin 合成方法所带来的问题。即使 Kotlin 合成方法有很多问题，但是还有小伙伴愿意使用。</p><p>ViewBinding 和 DataBinding 为我们解决了这么多问题，但是为什么很多小伙伴们不愿意使用 ViewBinding 和 DataBinding，今天我们从使用的角度来分析。</p><h2 id="ViewBinding-和-DataBinding"><a href="#ViewBinding-和-DataBinding" class="headerlink" title="ViewBinding 和 DataBinding"></a>ViewBinding 和 DataBinding</h2><p>我大概汇总了 ViewBinding 和 DataBinding 在不同场景的所有用法，我们来看一下在项目中如何使用。</p><p><strong>基本配置</strong></p><p>从 <code>Android Studio 3.6</code> 版本开始，就内置在 Gradle 插件中了，不需要添加任何额外的库来使用它们，但是在 <code>Android Studio 3.6</code> 和 <code>Android Studio 4.0</code> 中使用方式不一样。</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Android Studio 3.6</span></span><br><span class="line">android &#123;</span><br><span class="line">    viewBinding &#123;</span><br><span class="line">        enabled = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    dataBinding&#123;</span><br><span class="line">        enabled = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Android Studio 4.0</span></span><br><span class="line">android &#123;</span><br><span class="line">    buildFeatures &#123;</span><br><span class="line">        dataBinding = <span class="literal">true</span></span><br><span class="line">        viewBinding = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ViewBinding-的使用"><a href="#ViewBinding-的使用" class="headerlink" title="ViewBinding 的使用"></a>ViewBinding 的使用</h3><p>因为涉及到的场景比较多，为了减少篇幅，我只列出来核心部分，如果之前从来没有用过，这里只需要知道 ViewBinding 的门槛比 Kotlin 合成方法要高即可。</p><p><strong>不想为某个布局生成 binding 类，将下面属性添加到布局文件的根视图中</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">tools:viewBindingIgnore</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在 Activity 中使用</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    <span class="keyword">val</span> binding: ActivityMainBinding = ActivityMainBinding.inflate(layoutInflater)</span><br><span class="line">    setContentView(binding.root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>在 Fragment 中使用</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View &#123;</span><br><span class="line">    <span class="keyword">val</span> binding = FragmentViewBindBinding.inflate(inflater,container,<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">return</span> binding.root</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 Adapter 中的使用</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateViewHolder</span><span class="params">(parent: <span class="type">ViewGroup</span>, viewType: <span class="type">Int</span>)</span></span>: RecyclerView.ViewHolder &#123;</span><br><span class="line">    RecycleItemProductBinding.inflate(LayoutInflater.from(parent.context), parent, <span class="literal">false</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在 Dialog 中使用</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    binding = DialogAppBinding.inflate(layoutInflater)</span><br><span class="line">    setContentView(binding.root)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>include 标签的使用</strong></p><p><code>include</code> 标签不带 <code>merge</code> 标签，需要给 <code>include</code> 标签添加 id, 直接使用 id 即可，用法如下所示。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">include</span></span><br><span class="line">    android:id=<span class="string">&quot;@+id/include&quot;</span></span><br><span class="line">    layout=<span class="string">&quot;@layout/layout_include_item&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">val</span> binding: ActivityMainBinding = <span class="module-access"><span class="module"><span class="identifier">ActivityMainBinding</span>.</span></span>inflate(layoutInflater)</span><br><span class="line">binding.<span class="keyword">include</span>.includeTvTitle.set<span class="constructor">Text(<span class="string">&quot;使用 include 布局中的控件, 不包含 merge&quot;</span>)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>作者：DHL<br>链接：<a href="https://juejin.cn/post/6913723416671420430">https://juejin.cn/post/6913723416671420430</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>作者：DHL<br>链接：<a href="https://juejin.cn/post/6913723416671420430">https://juejin.cn/post/6913723416671420430</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><p>作者：DHL<br>链接：<a href="https://juejin.cn/post/6913723416671420430">https://juejin.cn/post/6913723416671420430</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://juejin.cn/post/6913723416671420430&quot;&gt;原文链接：竟然如此简单，DataBinding 和 ViewBinding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在之前的文章 &lt;a href=&quot;https://juejin.cn/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetpack系列—Lifecycle构架组件原理解析(更新中)</title>
    <link href="http://example.com/2022/05/14/Jetpack%E7%B3%BB%E5%88%97%E2%80%94Lifecycle%E6%9E%84%E6%9E%B6%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/"/>
    <id>http://example.com/2022/05/14/Jetpack%E7%B3%BB%E5%88%97%E2%80%94Lifecycle%E6%9E%84%E6%9E%B6%E7%BB%84%E4%BB%B6%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</id>
    <published>2022-05-14T03:14:51.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是Lifecycle</li><li>如何使用Lifecycle观察宿主状态</li><li>Fragment是如何实现Lifecycle的</li><li>Activity是如何实现Lifecycle的</li><li>Lifecycle是如何分发宿主状态的</li></ul><h2 id="什么是Lifecycle"><a href="#什么是Lifecycle" class="headerlink" title="什么是Lifecycle"></a>什么是Lifecycle</h2><ul><li>具备宿主生命周期感知能力的组件。它能持有组件(如Activty或Fragment)生命周期状态的信息，并且允许其他观察者监听宿主的状态</li></ul><h2 id="Lifecycle怎么使用"><a href="#Lifecycle怎么使用" class="headerlink" title="Lifecycle怎么使用"></a>Lifecycle怎么使用</h2><h3 id="自定义LifecycleObserver观察者"><a href="#自定义LifecycleObserver观察者" class="headerlink" title="自定义LifecycleObserver观察者"></a>自定义LifecycleObserver观察者</h3><ul><li>这种写法是为了避免在Activity或者Fragment中去覆写大量的生命周期函数回调，如onCreate onStart等，可以在自己的生命周期回调里去写逻辑，避免宿主太乱</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.自定义的LifecycleObserver观察者，用注解声明每个方法观察的宿主的状态，想感知哪个，就在哪个上加注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LocationObserver</span> <span class="keyword">implements</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//开启定位</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//停止定位</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.注册观察者，观察宿主生命周期状态变化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> <span class="meta">@org</span>.jetbrains.annotations.Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.注册观察者，观察宿主生命周期状态变化</span></span><br><span class="line">        getLifecycle().addObserver(<span class="keyword">new</span> LocationObserver());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Fragment和Activity是如何进行消息派发的？"><a href="#Fragment和Activity是如何进行消息派发的？" class="headerlink" title="Fragment和Activity是如何进行消息派发的？"></a>Fragment和Activity是如何进行消息派发的？</h2><h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><ol><li>实现LifecycleOwner接口，返回LifecycleRegistry</li><li>通过LifecycleRegistry在各生命周期进行派发</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fragment</span> <span class="keyword">implements</span> <span class="title">ComponentCallbacks</span>, <span class="title">OnCreateContextMenuListener</span>, <span class="title">LifecycleOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewModelStoreOwner</span>, <span class="title">HasDefaultViewModelProviderFactory</span>, <span class="title">SavedStateRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ActivityResultCaller</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">    LifecycleRegistry mLifecycleRegistry;</span><br><span class="line">          </span><br><span class="line">          </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       ...</span><br><span class="line">        mLifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_START);</span><br><span class="line">       ...</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><ol><li>实现LifecycleOwner接口，实现getLifecycle方法，返回mLifecycleRegistry</li><li>并没有直接使用mLifecycleRegistry在各生命周期函数中进行派发，而是借助了一个透明的ReportFragment进行的</li><li>执行ReportFragment.injectIfNeededIn(this)，把自己挂载到Activity上</li><li>然后在对应的生命周期进行派出事件</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentActivity</span> <span class="keyword">extends</span> <span class="title">androidx</span>.<span class="title">core</span>.<span class="title">app</span>.<span class="title">ComponentActivity</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ContextAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">LifecycleOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewModelStoreOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">HasDefaultViewModelProviderFactory</span>,</span></span><br><span class="line"><span class="class">        <span class="title">SavedStateRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">OnBackPressedDispatcherOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ActivityResultRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ActivityResultCaller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Lifecycle <span class="title">getLifecycle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mLifecycleRegistry;</span><br><span class="line">    &#125;</span><br><span class="line">          </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        ReportFragment.injectIfNeededIn(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (mContentLayoutId != <span class="number">0</span>) &#123;</span><br><span class="line">            setContentView(mContentLayoutId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReportFragment</span> <span class="keyword">extends</span> <span class="title">android</span>.<span class="title">app</span>.<span class="title">Fragment</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//把自己添加到Activity上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">injectIfNeededIn</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// On API 29+, we can register for the correct Lifecycle callbacks directly</span></span><br><span class="line">            LifecycleCallbacks.registerIn(activity);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Prior to API 29 and to maintain compatibility with older versions of</span></span><br><span class="line">        <span class="comment">// ProcessLifecycleOwner (which may not be updated when lifecycle-runtime is updated and</span></span><br><span class="line">        <span class="comment">// need to support activities that don&#x27;t extend from FragmentActivity from support lib),</span></span><br><span class="line">        <span class="comment">// use a framework fragment to get the correct timing of Lifecycle events</span></span><br><span class="line">        android.app.FragmentManager manager = activity.getFragmentManager();</span><br><span class="line">        <span class="keyword">if</span> (manager.findFragmentByTag(REPORT_FRAGMENT_TAG) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            manager.beginTransaction().add(<span class="keyword">new</span> ReportFragment(), REPORT_FRAGMENT_TAG).commit();</span><br><span class="line">            <span class="comment">// Hopefully, we are the first to make a transaction.</span></span><br><span class="line">            manager.executePendingTransactions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onStart();</span><br><span class="line">        dispatchStart(mProcessListener);</span><br><span class="line">        dispatch(Lifecycle.Event.ON_START);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(<span class="meta">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="number">29</span>) &#123;</span><br><span class="line">            <span class="comment">// Only dispatch events from ReportFragment on API levels prior</span></span><br><span class="line">            <span class="comment">// to API 29. On API 29+, this is handled by the ActivityLifecycleCallbacks</span></span><br><span class="line">            <span class="comment">// added in ReportFragment.injectIfNeededIn</span></span><br><span class="line">            dispatch(getActivity(), event);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//真正派发的地方法 获取所在activity的LifecycleRegistry 这就是为什么ComponentActivity要实现LifecycleOnwer接口</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dispatch</span><span class="params">(<span class="meta">@NonNull</span> Activity activity, <span class="meta">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleRegistryOwner) &#123;</span><br><span class="line">            ((LifecycleRegistryOwner) activity).getLifecycle().handleLifecycleEvent(event);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (activity <span class="keyword">instanceof</span> LifecycleOwner) &#123;</span><br><span class="line">            Lifecycle lifecycle = ((LifecycleOwner) activity).getLifecycle();</span><br><span class="line">            <span class="keyword">if</span> (lifecycle <span class="keyword">instanceof</span> LifecycleRegistry) &#123;</span><br><span class="line">                ((LifecycleRegistry) lifecycle).handleLifecycleEvent(event);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么要这么做？</p><p>这是一种切面的方式，为了兼容不是继承AppcompactActivity的Activity,而是直接继承Activity这个类的，在LifecycleDispatcher这个类里，通过注册Ativity的生命周期回调，实现DispatchActivityCallback，然后在回调的onActivityCreated方法内执行ReportFragment.injectIfNeededIn(this); 这样每个继承自Activity的也同样可以进行生命周期事件的派发了</p></blockquote><h3 id="LifecycleOwner、Lifecycle、LifecycleRegistry的关系"><a href="#LifecycleOwner、Lifecycle、LifecycleRegistry的关系" class="headerlink" title="LifecycleOwner、Lifecycle、LifecycleRegistry的关系"></a>LifecycleOwner、Lifecycle、LifecycleRegistry的关系</h3><p><img src="/../images/image-20220514122303160.png" alt="image-20220514122303160"></p><h2 id="LifecycleRestry事件分发的源码"><a href="#LifecycleRestry事件分发的源码" class="headerlink" title="LifecycleRestry事件分发的源码"></a>LifecycleRestry事件分发的源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifecycleRegistry</span> <span class="keyword">extends</span> <span class="title">Lifecycle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">        enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>);</span><br><span class="line">      <span class="comment">//宿主的状态，和宿主的生命周期不是一个概念</span></span><br><span class="line">      <span class="comment">//切换到后台后，会执行onPause()但是状态是started状态，因为State这个枚举中并没有Paused的状态，只到started状态后面是Resumed状态</span></span><br><span class="line">        State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">        ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">        ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line"></span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行addObserver方法的可能在onCreate在onStart在onResume都可以，只要不是在onDestroy，都把宿主状态初始为INTIALIZED状态</p><p>把initialState包装成ObserverWithState即为带有状态的观察者</p><p><strong>宿主的生命周期和宿主状态模型图</strong></p><ul><li><p>前进状态：执行onCreate方法变为CREATED状态，执行onStart方法后，变为STARTED状态，执行onResume方法后，变为RESUMED状态，这是前进状态</p></li><li><p>倒退状态：执行onPause方法后，由RESUMED状态倒退到STARTED状态，执行onSop方法后，由STARTED状态倒退到CREATED状态，这是倒退的状态</p></li></ul><p><img src="/../images/image-20220515112325695.png" alt="image-20220515112325695"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>);</span><br><span class="line">...</span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        <span class="keyword">final</span> Event event = Event.upFrom(statefulObserver.mState);</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;no event up from &quot;</span> + statefulObserver.mState);</span><br><span class="line">        &#125;</span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">        popParentState();</span><br><span class="line">        <span class="comment">// mState / subling may have been changed recalculate</span></span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">        <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Event <span class="title">upFrom</span><span class="params">(<span class="meta">@NonNull</span> State state)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (state) &#123;</span><br><span class="line">    <span class="keyword">case</span> INITIALIZED:</span><br><span class="line">      <span class="keyword">return</span> ON_CREATE;</span><br><span class="line">    <span class="keyword">case</span> CREATED:</span><br><span class="line">      <span class="keyword">return</span> ON_START;</span><br><span class="line">    <span class="keyword">case</span> STARTED:</span><br><span class="line">      <span class="keyword">return</span> ON_RESUME;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">  State newState = event.getTargetState();</span><br><span class="line">  mState = min(mState, newState);</span><br><span class="line">  mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">  mState = newState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NonNull</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> State <span class="title">getTargetState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> ON_CREATE:</span><br><span class="line">    <span class="keyword">case</span> ON_STOP:</span><br><span class="line">      <span class="keyword">return</span> State.CREATED;</span><br><span class="line">    <span class="keyword">case</span> ON_START:</span><br><span class="line">    <span class="keyword">case</span> ON_PAUSE:</span><br><span class="line">      <span class="keyword">return</span> State.STARTED;</span><br><span class="line">    <span class="keyword">case</span> ON_RESUME:</span><br><span class="line">      <span class="keyword">return</span> State.RESUMED;</span><br><span class="line">    <span class="keyword">case</span> ON_DESTROY:</span><br><span class="line">      <span class="keyword">return</span> State.DESTROYED;</span><br><span class="line">    <span class="keyword">case</span> ON_ANY:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="keyword">this</span> + <span class="string">&quot; has no target state&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个while循环很重要，这个循环会把宿主由初始状态INITIALIZED 前进到当前宿主应有的生命周期状态可能是STARTED也可能是RESUMED的</p><ol><li>先通过calculateTargetState(observer)拿到宿主的当前状态，比如宿主在onResume中注册的addObserver方法，那它当前<strong>应该</strong>的状态是RESUMED</li><li>通过比较当前状态和当前应该处于的状态statefulObserver.mState.compareTo(targetState)小于0代表状态还没有前进到，比如第一次状态肯定是INITIALIZED而宿主应该处于是RESUMED，所以执行while循环</li><li>final Event event &#x3D; Event.upFrom(statefulObserver.mState)由当前状态获取应该执行的生周期事件，得知要执行的事件是ON_CREATE</li><li>执行 statefulObserver.dispatchEvent(lifecycleOwner, event) </li><li>先由event.getTargetState() 事件获取newState，比如当前是ON_CREATE 得到CREATED</li><li>mState &#x3D; newState赋值当前状态为新的状态，这样再去while中比较</li></ol><p>这样就会把当前RESUMED之前的事件都派发给宿主，而不是在于它在哪里进行了注册，宿主会收到一个完整的生命周期事件，进行注册等操作</p><p><img src="/../images/image-20220515114041728.png" alt="image-20220515114041728"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;什么是Lifecycle&lt;/li&gt;
&lt;li&gt;如何使用Lifecycle观察宿主状态&lt;/li&gt;
&lt;li&gt;Fragment是如何实现Lifecycle的&lt;/li&gt;
&lt;li&gt;Activity是如何实现Lifecycle的&lt;/li&gt;
&lt;li&gt;Lifecycle是如何分发</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>聊聊WebSocket及OkHttp实现WebSocket</title>
    <link href="http://example.com/2022/05/13/%E8%81%8A%E8%81%8AWebSocket%E5%8F%8AOkHttp%E5%AE%9E%E7%8E%B0WebSocket/"/>
    <id>http://example.com/2022/05/13/%E8%81%8A%E8%81%8AWebSocket%E5%8F%8AOkHttp%E5%AE%9E%E7%8E%B0WebSocket/</id>
    <published>2022-05-13T10:43:51.000Z</published>
    <updated>2022-05-17T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>OkHttp应该算是Android中使用最广泛的网络库了，我们通常会利用它来实现HTTP请求，但是实际上它还可以支持WebSocket，并且使用起来还非常的便捷。那本文就来聊聊，利用OkHttp实现WebSocket的一些细节，包括对WebSocket的介绍，以及在传输如何做鉴权、长连接保活及其原理。</p><h2 id="1-WebSocket"><a href="#1-WebSocket" class="headerlink" title="1.WebSocket"></a>1.WebSocket</h2><h3 id="1-1-为什么使用WebSocket"><a href="#1-1-为什么使用WebSocket" class="headerlink" title="1.1 为什么使用WebSocket?"></a>1.1 为什么使用WebSocket?</h3><p>我们做客户端开发时，接触最多的应用层网络协议，就是HTTP协议，而今天介绍的<code>WebSocket</code>，下层和<code>HTTP</code>一样也是基于<code>TCP</code>协议，这是一种轻量级网络通信协议，也属于应用层协议。</p><p><code>WebSocket</code>与<code>HTTP2</code> 一样，其实都是为了解决<code>HTTP1.1</code>的一些缺陷而诞生的，而<code>WebSocket</code>针对的就是<code>「请求-应答」</code>这种<code>「半双工」</code>的模式的通信缺陷。</p><p><code>「请求-应答」</code>是半双工的通信模式，数据的传输必须经过一次请求应答，这个完整的通信过程，通信的同一时刻数据只能在一个方向上传递。它最大的问题在于，HTTP是一种被动的模式，服务端必须等待客户端请求才可以返回数据，无法主动向客户端发送数据。</p><p>这也导致在<code>WebSocket</code>出现之前，一些对实时性有要求的服务，通常是基于轮询这种简单的模式来实现。轮询就是由客户端定时发起请求，如果服输端有需要传递的数据，可以借助这个请求去响应数据。</p><p>轮询的缺点也非常明显，大量空闲的时间，其实是在反复发送无效的请求，这显然是一种资源的损耗。</p><p>虽然在之后的<code>HTTP2</code> <code>HTTP3</code>中针对这种半双工的缺陷新增了<code>Stream</code> <code>Server</code> <code>Push</code>等特性，但是’请求-应答’依然是<code>HTTP</code>协议请要的通信方式。</p><p><code>WebSocket</code>协议是由<code>HTML5</code>规范定义的，原本是为了浏览器而设计的，可以避免同源的限制，浏览器可以与任意服务端通信，现代浏览器基本上都已经支持<code>WebSocket</code>。</p><p>虽然WebSocket原本是被定义在<code>HTML5</code>中，但它也适用于移动端，尽管移动端也可以直接通过<code>Socket</code>与服务端通信，但借助<code>WebSocket</code>，可以利用<code>80（HTTP）</code>或<code>443（HTTPS）</code>端口通信，有效的避免一些防火墙的拦截。</p><p><code>WebSocket</code>是真正意义上的<code>全双工模式</code>，也就我们俗称的<code>‘长连接’</code>。当完成握手连接后，客户端和服务端均可以主动的发起请求，回复响应，并且两边的传输都是相互独立的。</p><h3 id="1-2-WebSocket的特点"><a href="#1-2-WebSocket的特点" class="headerlink" title="1.2 WebSocket的特点"></a>1.2 WebSocket的特点</h3><p><code>WebSocket</code>的数据传输，是基于<code>TCP</code>协议，但是在传输之前，还有一个握手的过程，双方确认过眼神，才能够正式的传输数据。</p><p><code>WebSocket</code>的握手过程，符合其<code>‘Web’</code>的特性，是利用<code>HTTP</code>本身的<code>‘协议升级’</code>来实现。</p><p>在建立连接前，客户端还需要知道服务端的地址，WebSocket并没有另辟路径，而是沿用了HTTP的URL格式，但协议标识变成了<code>‘ws’</code>或者<code>‘wss’</code>，分别表示明文加密的<code>WebSocket</code>协议，这一点和<code>HTTP</code>和<code>HTTPS</code>的关系类似。</p><p>以下是一些WebSocket的URL例子：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ws://cxmydev.com/some/path</span><br><span class="line">ws://cxmydev.com:8080/some/path</span><br><span class="line">wss://cxmydev.com:443?uid=xxx</span><br></pre></td></tr></table></figure><p>而在连接建立后，<code>WebSocket</code>采用二进制帧的形式传输数据，其中常用的包括用于数据传输的数据帧<code>MESSAGE</code>以及3个<code>控制帧</code>：</p><ul><li><code>PING</code>:主动保活的PING帧</li><li><code>PONG</code>：收到PING帧后回复</li><li><code>CLOSE</code>：主动关闭WebSocket连接</li></ul><p>小结下<code>WebSocket</code>特性：</p><ol><li><code>WebSocket</code>建立在TCP协议之上，对服务端友好。</li><li>默认端口采用80或443，握手阶段采用HTTP协议，不容易被防火墙屏蔽，能够通过各种HTTP代理服务器。</li><li>传输数据相比HTTP更轻量，少了HTTP HEADER，性能开销更小，通信更高效。</li><li>通过MESSAGE帧发送数据，可以发送文本或者二进制数据，如果数据过大，会被分为多个MESSAGE帧发送。</li><li>WebSocket沿用HTTP的URL，协议标识符’ws’或‘wss’</li></ol><h3 id="1-3-WebSocket原理"><a href="#1-3-WebSocket原理" class="headerlink" title="1.3 WebSocket原理"></a>1.3 WebSocket原理</h3><p><code>WebSocket</code>在<code>TCP</code>连接建立后，还要通过<code>Http</code>进行一次握手，也就是通过<code>Http</code>发送一条<code>GET请求</code>消息给服务器，告诉服务器我要建立<code>WebSocket连接</code>了，你准备好哦，具体做法就是在头部信息中添加相关参数。然后服务器响应我知道了，并且将连接协议改成<code>WebSocket</code>，开始建立长连接。</p><p>这里贴上请求头和响应头信息，从网上找了一张图：</p><p><img src="/../images/image-20220514062147256.png" alt="image-20220514062147256"></p><p>简单说明下参数：</p><ul><li>URL一般是以<code>ws</code>或者<code>wss</code>开头，<code>ws</code>对应<code>Websocket</code>协议，<code>wss</code>对应在<code>TLS</code>之上的<code>WebSocket</code>。类似于<code>Http</code>和<code>Https</code>的关系。</li><li>请求方法为GET方法。</li><li><code>Connection:Upgrade</code>，表示客户端要连接升级，不用Http协议。</li><li><code>Upgrade:websocket</code>， 表示客户端要升级建立<code>Websocket</code>连接。</li><li><code>Sec-Websocket-Key:key</code>， 这个key是随机生成的，服务器会通过这个参数验证该请求是否有效。</li><li><code>Sec-WebSocket-Version:13</code>， websocket使用的版本，一般就是13。</li><li><code>Sec-webSocket-Extension:permessage-deflate</code>，客户端指定的一些扩展协议，比如这里<code>permessage-deflate</code>就是<code>WebSocket</code>的一种压缩协议。</li><li><code>响应码101,</code>表示响应协议升级，后续的数据交互都按照Upgradet指定的<code>WebSocket</code>协议来。</li></ul><h2 id="2-结合OkHttp使用WebSocket进行通信"><a href="#2-结合OkHttp使用WebSocket进行通信" class="headerlink" title="2.结合OkHttp使用WebSocket进行通信"></a>2.结合OkHttp使用WebSocket进行通信</h2><h3 id="2-1-添加OkHttp依赖"><a href="#2-1-添加OkHttp依赖" class="headerlink" title="2.1 添加OkHttp依赖"></a>2.1 添加OkHttp依赖</h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">&quot;com.squareup.okhttp3:okhttp:4.7.2&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2-2-实现代码"><a href="#2-2-实现代码" class="headerlink" title="2.2 实现代码"></a>2.2 实现代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化WebSocket</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mWbSocketUrl = <span class="string">&quot;ws://echo.websocket.org&quot;</span>;</span><br><span class="line">    mClient = <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            .pingInterval(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .build();</span><br><span class="line">    Request request = <span class="keyword">new</span> Request.Builder()</span><br><span class="line">            .url(mWbSocketUrl)</span><br><span class="line">            .build();</span><br><span class="line">    mWebSocket = mClient.newWebSocket(request, <span class="keyword">new</span> WsListener());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里主要是配置了<code>OkHttp</code>的一些参数，以及<code>WebSocket</code>的连接地址。其中<code>newWebSocket</code>方法就是进行<code>WebSocket</code>的初始化和连接。</p><p>这里要注意的点是<code>pingInterval</code>方法的配置，这个方法主要是用来设置<code>WebSocket</code>连接的保活。 相信做过长连接的同学都知道，一个长连接一般要隔几秒发送一条消息告诉服务器我在线，而服务器也会回复一个消息表示收到了，这样就确认了连接正常，客户端和服务器端都在线。</p><p>如果服务器没有<code>按时收到</code>这个消息那么服务器可能就会<code>主动关闭</code>这个连接，节约资源。 客户端没有<code>正常收到</code>这个返回的消息，也会做一些类似<code>重连的操作</code>，所以这个保活消息非常重要。</p><p>我们称这个消息叫作<code>心跳包</code>，一般用<code>PING，PONG</code>表示，像乒乓球一样，一来一回。 所以这里的<code>pingInterval</code>就是设置心跳包发送的间隔时间，设置了这个方法之后，<code>OkHttp</code>就会自动帮我们发送心跳包事件，也就是<code>ping</code>包。当间隔时间到了，没有收到<code>pong</code>包的话，监听事件中的<code>onFailure</code>方法就会被调用，此时我们就可以进行断线重连。</p><p>但是由于实际业务需求不一样，以及<code>okhttp</code>中心跳包事件给予我们权限较少，所以我们也可以自己完成心跳包事件，即在<code>WebSocket</code>连接成功之后，开始定时发送<code>ping</code>包，在下一次发送<code>ping</code>包之前检查上一个<code>pong</code>包是否收到，如果没收到，就视为异常，开始断线重连。感兴趣的同学可以看看文末的相关源码。</p><p>建立连接后，我们就可以正常发送和读取消息了，也就是在上文<code>WsListener</code>监听事件中表现：</p><blockquote><p>在<code>Android</code>程序中，如果应用被系统<code>kill</code>了进程，这种我们是没办法告诉<code>Sever</code>端，结束连接的，所以心跳包是有必要的</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//监听事件，用于收消息，监听连接的状态</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WsListener</span> <span class="keyword">extends</span> <span class="title">WebSocketListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClosed</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="keyword">int</span> code, <span class="meta">@NotNull</span> String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onClosed(webSocket, code, reason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClosing</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="keyword">int</span> code, <span class="meta">@NotNull</span> String reason)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onClosing(webSocket, code, reason);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> Throwable t, <span class="meta">@Nullable</span> Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onFailure(webSocket, t, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> String text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessage(webSocket, text);</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;客户端收到消息:&quot;</span> + text);</span><br><span class="line">        onWSDataChanged(DATE_NORMAL, text);</span><br><span class="line">       <span class="comment">//测试发消息</span></span><br><span class="line">        webSocket.send(<span class="string">&quot;我是客户端，你好啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> ByteString bytes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessage(webSocket, bytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> Response response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onOpen(webSocket, response);</span><br><span class="line">        Log.e(TAG,<span class="string">&quot;连接成功！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//发送String消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> String message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mWebSocket.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送byte消息</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">final</span> ByteString message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebSocket != <span class="keyword">null</span>) &#123;</span><br><span class="line">        mWebSocket.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="comment">//主动断开连接</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">(<span class="keyword">int</span> code, String reason)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mWebSocket != <span class="keyword">null</span>)</span><br><span class="line">        mWebSocket.close(code, reason);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>这里要注意，回调的方法都是在子线程回调的，如果需要<code>更新UI</code>，需要切换到主线程。</p></blockquote><p>基本操作就这么多，还是很简单的吧，初始化<code>Websocket</code>——连接——连接成功——收发消息。</p><p>其中<code>WebSocket</code>类是一个操作接口，主要提供了以下<strong>几个方法</strong></p><ul><li><code>send(text: String)</code>发送一个String类型的消息</li><li><code>send(bytes: ByteString)</code> 发送一个二进制类型的消息</li><li><code>close(code: Int, reason: String?)</code>关闭WebSocket连接</li></ul><p>如果有同学想测试下<code>WebSocket</code>的功能但是又没有<strong>实际的服务器</strong>，怎么办呢？ 其实<code>OkHttp</code>官方有一个<code>MockWebSocket</code>服务，可以用来模拟服务端，下面我们一起试一下：</p><h3 id="2-3-模拟服务器"><a href="#2-3-模拟服务器" class="headerlink" title="2.3 模拟服务器"></a>2.3 模拟服务器</h3><p>首先集成<code>MockWebSocket</code>服务库：</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">&#x27;com.squareup.okhttp3:mockwebserver:4.7.2&#x27;</span></span><br></pre></td></tr></table></figure><p>然后就可以新建<code>MockWebServer</code>，并加入<code>MockResponse</code>作为接收消息的响应。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">MockWebServer mMockWebServer = <span class="keyword">new</span> MockWebServer();</span><br><span class="line">MockResponse response = <span class="keyword">new</span> MockResponse()</span><br><span class="line">        .withWebSocketUpgrade(<span class="keyword">new</span> WebSocketListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> Response response)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onOpen(webSocket, response);</span><br><span class="line">                <span class="comment">//有客户端连接时回调</span></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;服务器收到客户端连接成功回调：&quot;</span>);</span><br><span class="line">                mWebSocket = webSocket;</span><br><span class="line">                mWebSocket.send(<span class="string">&quot;我是服务器，你好呀&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="meta">@NotNull</span> String text)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onMessage(webSocket, text);</span><br><span class="line"></span><br><span class="line">                Log.e(TAG, <span class="string">&quot;服务器收到消息：&quot;</span> + text);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClosed</span><span class="params">(<span class="meta">@NotNull</span> WebSocket webSocket, <span class="keyword">int</span> code, <span class="meta">@NotNull</span> String reason)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onClosed(webSocket, code, reason);</span><br><span class="line">                Log.e(TAG, <span class="string">&quot;onClosed：&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">mMockWebServer.enqueue(response);</span><br></pre></td></tr></table></figure><p>这里服务器端在收到客户端连接成功消息后，给客户端发送了一条消息。 要注意的是这段代码要在子线程执行，因为主线程不能进行网络操作。</p><p>然后就可以去初始化<code>Websocket</code>客户端了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接url，初始化websocket客户端</span></span><br><span class="line">String websocketUrl = <span class="string">&quot;ws://&quot;</span> + mMockWebServer.getHostName() + <span class="string">&quot;:&quot;</span> + mMockWebServer.getPort() + <span class="string">&quot;/&quot;</span>;</span><br><span class="line">WSManager.getInstance().init(websocketUrl);</span><br></pre></td></tr></table></figure><p>ok，运行项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//运行结果</span><br><span class="line">E/jimu: mWbSocketUrl=ws://localhost:38355/</span><br><span class="line">E/jimu: 服务器收到客户端连接成功回调：</span><br><span class="line">E/jimu: 连接成功！</span><br><span class="line">E/jimu: 客户端收到消息:我是服务器，你好呀</span><br><span class="line">E/jimu: 服务器收到消息：我是客户端，你好啊</span><br></pre></td></tr></table></figure><h3 id="2-4-WebSocket如何进行鉴权"><a href="#2-4-WebSocket如何进行鉴权" class="headerlink" title="2.4 WebSocket如何进行鉴权"></a>2.4 WebSocket如何进行鉴权</h3><p>接下来我们聊聊 <code>WebSocket</code> 连接的鉴权问题。</p><p>所谓鉴权，其实就是为了安全考虑，避免服务端启动 <code>WebSocket</code> 的连接服务后，任谁都可以连接，这肯定会引发一些安全问题。其次，服务端还需要将 <code>WebSocket</code> 的连接实体与一个真是的用户对应起来，否者业务无法保证了。</p><p>那么问题就回到了，<code>WebSocket</code> 通信的完整过程中，如何以及何时将一些业务数据传递给服务端？当然在 <code>WebSocket</code> 连接建立之后，立即给服务端发送一些鉴权的数据，必然是可以做到业务实现的，但是这样明显是不够优雅的。</p><p>前文提到，<code>WebSocket</code> 在握手阶段，使用的是 <code>HTTP</code> 的 “协议升级”，它本质上还是 <code>HTTP</code> 的报文头发送一些特殊的头数据，来完成协议升级。</p><p>例如在 <code>RealWebSocket</code> 中，就有构造 <code>Header</code> 的过程，如 <code>Upgrade</code>、<code>Connection</code> 等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">(OkHttpClient client)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">final</span> Request request = originalRequest.newBuilder()</span><br><span class="line">    .header(<span class="string">&quot;Upgrade&quot;</span>, <span class="string">&quot;websocket&quot;</span>)</span><br><span class="line">    .header(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Upgrade&quot;</span>)</span><br><span class="line">    .header(<span class="string">&quot;Sec-WebSocket-Key&quot;</span>, key)</span><br><span class="line">    .header(<span class="string">&quot;Sec-WebSocket-Version&quot;</span>, <span class="string">&quot;13&quot;</span>)</span><br><span class="line">    .build();</span><br><span class="line">  <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么实际我们在 <code>WebSocket</code> 阶段，也可以通过 <code>Header</code> 传输一些鉴权的数据，例如 <code>uid</code>、<code>token</code> 之类，具体方法就是在构造 <code>Request</code> 的时候，为其增加 <code>Header</code>，这里就不举例说明了。</p><p>另外 <code>WebSocket</code> 的 <code>URL</code> 也是可以携带参数的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wss://cxmydev.com:443?uid=xxx&amp;token=xxx</span><br></pre></td></tr></table></figure><h2 id="3-OkHttp-源码解读WebSocket连接过程及协议"><a href="#3-OkHttp-源码解读WebSocket连接过程及协议" class="headerlink" title="3.OkHttp 源码解读WebSocket连接过程及协议"></a>3.OkHttp 源码解读WebSocket连接过程及协议</h2><p><code>WebSocket</code>整个流程无非三个功能：连接，接收消息，发送消息。下面我们就从这<code>三个方面</code>分析下具体是怎么实现的。</p><h3 id="3-1-连接"><a href="#3-1-连接" class="headerlink" title="3.1 连接"></a>3.1 连接</h3><p>通过上面的代码我们得知，<code>WebSocket</code>连接是通过<code>newWebSocket</code>方法。直接点进去看这个方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newWebSocket</span><span class="params">(request: <span class="type">Request</span>, listener: <span class="type">WebSocketListener</span>)</span></span>: WebSocket &#123;</span><br><span class="line">  <span class="keyword">val</span> webSocket = RealWebSocket(</span><br><span class="line">      taskRunner = TaskRunner.INSTANCE,</span><br><span class="line">      originalRequest = request,</span><br><span class="line">      listener = listener,</span><br><span class="line">      random = Random(),</span><br><span class="line">      pingIntervalMillis = pingIntervalMillis.toLong(),</span><br><span class="line">      extensions = <span class="literal">null</span>, <span class="comment">// Always null for clients.</span></span><br><span class="line">      minimumDeflateSize = minWebSocketMessageToCompress</span><br><span class="line">  )</span><br><span class="line">  webSocket.connect(<span class="keyword">this</span>)</span><br><span class="line">  <span class="keyword">return</span> webSocket</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里做了两件事：</p><ul><li>初始化<code>RealWebSocket</code>，主要是设置了一些参数（比如<code>pingIntervalMillis</code>心跳包时间间隔，还有监听事件之类的）</li><li><code>connect</code>方法进行<code>WebSocket</code>连接</li></ul><p>继续查看connect方法：</p><h4 id="3-1-1-connect-WebSocket连接握手"><a href="#3-1-1-connect-WebSocket连接握手" class="headerlink" title="3.1.1 connect(WebSocket连接握手)"></a>3.1.1 connect(WebSocket连接握手)</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">connect</span><span class="params">(client: <span class="type">OkHttpClient</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//***</span></span><br><span class="line">  <span class="keyword">val</span> webSocketClient = client.newBuilder()</span><br><span class="line">      .eventListener(EventListener.NONE)</span><br><span class="line">      .protocols(ONLY_HTTP1)</span><br><span class="line">      .build()</span><br><span class="line">  <span class="keyword">val</span> request = originalRequest.newBuilder()</span><br><span class="line">      .header(<span class="string">&quot;Upgrade&quot;</span>, <span class="string">&quot;websocket&quot;</span>)</span><br><span class="line">      .header(<span class="string">&quot;Connection&quot;</span>, <span class="string">&quot;Upgrade&quot;</span>)</span><br><span class="line">      .header(<span class="string">&quot;Sec-WebSocket-Key&quot;</span>, key)</span><br><span class="line">      .header(<span class="string">&quot;Sec-WebSocket-Version&quot;</span>, <span class="string">&quot;13&quot;</span>)</span><br><span class="line">      .header(<span class="string">&quot;Sec-WebSocket-Extensions&quot;</span>, <span class="string">&quot;permessage-deflate&quot;</span>)</span><br><span class="line">      .build()</span><br><span class="line">  call = RealCall(webSocketClient, request, forWebSocket = <span class="literal">true</span>)</span><br><span class="line">  call!!.enqueue(<span class="keyword">object</span> : Callback &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onResponse</span><span class="params">(call: <span class="type">Call</span>, response: <span class="type">Response</span>)</span></span> &#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//得到数据流</span></span><br><span class="line">      <span class="keyword">val</span> streams: Streams</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        checkUpgradeSuccess(response, exchange)</span><br><span class="line">        streams = exchange!!.newWebSocketStreams()</span><br><span class="line">      &#125; </span><br><span class="line">      </span><br><span class="line">      <span class="comment">//***</span></span><br><span class="line">      <span class="comment">// Process all web socket messages.</span></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> name = <span class="string">&quot;<span class="variable">$okHttpName</span> WebSocket <span class="subst">$&#123;request.url.redact()&#125;</span>&quot;</span></span><br><span class="line">        initReaderAndWriter(name, streams)</span><br><span class="line">        listener.onOpen(<span class="keyword">this</span><span class="symbol">@RealWebSocket</span>, response)</span><br><span class="line">        loopReader()</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        failWebSocket(e, <span class="literal">null</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Websocket</code>连接需要一次<code>Http</code>协议的握手，然后才能把协议升级成<code>WebSocket</code>。所以这段代码就体现出这个功能了。</p><p>首先就<code>new</code>了一个用来进行<code>Http</code>连接的<code>request</code>，其中<code>Header</code>的参数就表示我要进行<code>WebSocket</code>连接了，参数解析如下：</p><ul><li><code>Connection:Upgrade</code>，表示客户端要连接升级</li><li><code>Upgrade:websocket</code>， 表示客户端要升级建立Websocket连接</li><li><code>Sec-Websocket-Key:key</code>， 这个key是随机生成的，服务器会通过这个参数验证该请求是否有效</li><li><code>Sec-WebSocket-Version:13</code>， websocket使用的版本，一般就是13</li><li><code>Sec-webSocket-Extension:permessage-deflate</code>，客户端指定的一些扩展协议，比如这里<code>permessage-deflate</code>就是<code>WebSocket</code>的一种压缩协议。</li></ul><p><code>Header</code>设置好之后，就调用了<code>call</code>的<code>enqueue</code>方法，这个方法大家应该都很熟悉吧，<code>OkHttp</code>里面对于<code>Http</code>请求的异步请求就是这个方法。 至此，握手结束，服务器返回<code>响应码101</code>，表示协议升级。</p><p>然后我们继续看看获取服务器响应之后又做了什么？ 在发送<code>Http</code>请求成功之后，<code>onResponse</code>响应方法里面主要表现为四个处理逻辑：</p><ul><li>将<code>Http</code>流转换成<code>WebSocket</code>流，得到<code>Streams</code>对象，这个流后面会转化成输入流和输出流，也就是进行发送和读取的操作流</li><li><code>listener.onOpen(this@RealWebSocket, response)</code>，回调了接口<code>WebSocketListener</code>的<code>onOpen</code>方法，告诉用户<code>WebSocket</code>已经连接</li><li><code>initReaderAndWriter(name, streams)</code></li><li><code>loopReader()</code></li></ul><p>前两个逻辑还是比较好理解，主要是后两个方法，我们分别解析下。 首先看<code>initReaderAndWriter</code>方法。</p><h4 id="3-1-2-initReaderAndWriter（初始化输入流输出流）"><a href="#3-1-2-initReaderAndWriter（初始化输入流输出流）" class="headerlink" title="3.1.2 initReaderAndWriter（初始化输入流输出流）"></a>3.1.2 initReaderAndWriter（初始化输入流输出流）</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealWebSocket.kt</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">initReaderAndWriter</span><span class="params">(name: <span class="type">String</span>, streams: <span class="type">Streams</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">val</span> extensions = <span class="keyword">this</span>.extensions!!</span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">//***</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//写数据，发送数据的工具类</span></span><br><span class="line">    <span class="keyword">this</span>.writer = WebSocketWriter()</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//设置心跳包事件</span></span><br><span class="line">    <span class="keyword">if</span> (pingIntervalMillis != <span class="number">0L</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> pingIntervalNanos = MILLISECONDS.toNanos(pingIntervalMillis)</span><br><span class="line">      taskQueue.schedule(<span class="string">&quot;<span class="variable">$name</span> ping&quot;</span>, pingIntervalNanos) &#123;</span><br><span class="line">        writePingFrame()</span><br><span class="line">        <span class="keyword">return</span><span class="symbol">@schedule</span> pingIntervalNanos</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//***</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//***</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取数据的工具类</span></span><br><span class="line">  reader = WebSocketReader(     </span><br><span class="line">    ***</span><br><span class="line">    frameCallback = <span class="keyword">this</span>,</span><br><span class="line">    ***</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">writePingFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line"> <span class="comment">//***</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    writer.writePing(ByteString.EMPTY)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">    failWebSocket(e, <span class="literal">null</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这个方法主要干了两件事：</p><ul><li>实例化输出流输入流工具类，也就是<code>WebSocketWriter</code>和<code>WebSocketReader</code>，用来处理数据的收发。</li><li>设置心跳包事件。如果<code>pingIntervalMillis</code>参数不为0，就通过计时器，每隔<code>pingIntervalNanos</code>发送一个<code>ping</code>消息。其中<code>writePingFrame</code>方法就是发送了<code>ping</code>帧数据。</li></ul><h3 id="3-2-接收消息处理消息"><a href="#3-2-接收消息处理消息" class="headerlink" title="3.2 接收消息处理消息"></a>3.2 接收消息处理消息</h3><h4 id="3-2-1-loopReader"><a href="#3-2-1-loopReader" class="headerlink" title="3.2.1 loopReader"></a>3.2.1 loopReader</h4><p>接着看看这个<code>loopReader</code>方法是干什么的，看这个名字我们大胆猜测下，难道这个方法就是用来循环读取数据的？去代码里找找答案：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">loopReader</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (receivedCloseCode == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// This method call results in one or more onRead* methods being called on this thread.</span></span><br><span class="line">    reader!!.processNextFrame()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码很简单，一个<code>while</code>循环，循环条件是<code>receivedCloseCode == -1</code>的时候，做的事情是<code>reader!!.processNextFrame()</code>方法。继续：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WebSocketWriter.kt</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">processNextFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">//读取头部信息</span></span><br><span class="line">  readHeader()</span><br><span class="line">  <span class="keyword">if</span> (isControlFrame) &#123;</span><br><span class="line">    <span class="comment">//如果是控制帧，读取控制帧内容</span></span><br><span class="line">    readControlFrame()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//读取普通消息内容</span></span><br><span class="line">    readMessageFrame()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取头部信息</span></span><br><span class="line"><span class="meta">@Throws(IOException::class, ProtocolException::class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readHeader</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (closed) <span class="keyword">throw</span> IOException(<span class="string">&quot;closed&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="comment">//读取数据，获取数据帧的前8位</span></span><br><span class="line">    b0 = source.readByte() and <span class="number">0xff</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    source.timeout().timeout(timeoutBefore, TimeUnit.NANOSECONDS)</span><br><span class="line">  &#125;    </span><br><span class="line">  <span class="comment">//***</span></span><br><span class="line">  <span class="comment">//获取数据帧的opcode（数据格式）</span></span><br><span class="line">  opcode = b0 and B0_MASK_OPCODE</span><br><span class="line">  <span class="comment">//是否为最终帧</span></span><br><span class="line">  isFinalFrame = b0 and B0_FLAG_FIN != <span class="number">0</span></span><br><span class="line">  <span class="comment">//是否为控制帧（指令）</span></span><br><span class="line">  isControlFrame = b0 and OPCODE_FLAG_CONTROL != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//判断最终帧，获取帧长度等等</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//读取控制帧（指令）</span></span><br><span class="line">  <span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readControlFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (frameLength &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">    source.readFully(controlFrameBuffer, frameLength)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">when</span> (opcode) &#123;</span><br><span class="line">    OPCODE_CONTROL_PING -&gt; &#123;</span><br><span class="line">    <span class="comment">//ping 帧</span></span><br><span class="line">      frameCallback.onReadPing(controlFrameBuffer.readByteString())</span><br><span class="line">    &#125;</span><br><span class="line">    OPCODE_CONTROL_PONG -&gt; &#123;</span><br><span class="line">      <span class="comment">//pong 帧</span></span><br><span class="line">      frameCallback.onReadPong(controlFrameBuffer.readByteString())</span><br><span class="line">    &#125;</span><br><span class="line">    OPCODE_CONTROL_CLOSE -&gt; &#123;</span><br><span class="line">      <span class="comment">//关闭 帧</span></span><br><span class="line">      <span class="keyword">var</span> code = CLOSE_NO_STATUS_CODE</span><br><span class="line">      <span class="keyword">var</span> reason = <span class="string">&quot;&quot;</span></span><br><span class="line">      <span class="keyword">val</span> bufferSize = controlFrameBuffer.size</span><br><span class="line">      <span class="keyword">if</span> (bufferSize == <span class="number">1L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> ProtocolException(<span class="string">&quot;Malformed close payload length of 1.&quot;</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bufferSize != <span class="number">0L</span>) &#123;</span><br><span class="line">        code = controlFrameBuffer.readShort().toInt()</span><br><span class="line">        reason = controlFrameBuffer.readUtf8()</span><br><span class="line">        <span class="keyword">val</span> codeExceptionMessage = WebSocketProtocol.closeCodeExceptionMessage(code)</span><br><span class="line">        <span class="keyword">if</span> (codeExceptionMessage != <span class="literal">null</span>) <span class="keyword">throw</span> ProtocolException(codeExceptionMessage)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//回调onReadClose方法</span></span><br><span class="line">      frameCallback.onReadClose(code, reason)</span><br><span class="line">      closed = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取普通消息</span></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">readMessageFrame</span><span class="params">()</span></span> &#123;</span><br><span class="line">  </span><br><span class="line">  readMessage()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (readingCompressedMessage) &#123;</span><br><span class="line">    <span class="keyword">val</span> messageInflater = <span class="keyword">this</span>.messageInflater</span><br><span class="line">        ?: MessageInflater(noContextTakeover).also &#123; <span class="keyword">this</span>.messageInflater = it &#125;</span><br><span class="line">    messageInflater.inflate(messageFrameBuffer)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opcode == OPCODE_TEXT) &#123;</span><br><span class="line">    frameCallback.onReadMessage(messageFrameBuffer.readUtf8())</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    frameCallback.onReadMessage(messageFrameBuffer.readByteString())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码还是比较直观，这个<code>processNextFrame</code>其实就是读取数据用的，首先读取头部信息，获取数据帧的类型，判断是否为控制帧，再分别去读取控制帧数据或者普通消息帧数据。</p><h4 id="3-2-2-数据帧格式"><a href="#3-2-2-数据帧格式" class="headerlink" title="3.2.2 数据帧格式"></a>3.2.2 数据帧格式</h4><p>问题来了，什么是<strong>数据头部信息</strong>，什么是<strong>控制帧</strong>？ 这里就要说下<code>WebSocket</code>的数据帧了，先附上一个数据帧格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"> 0 1 2 3 4 5 6 7    0 1 2 3 4 5 6 7  0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7</span><br><span class="line">+-+-+-+-+-------+  +-+-------------+ +-----------------------------+</span><br><span class="line">|F|R|R|R| OP    |  |M| LENGTH      |   Extended payload length</span><br><span class="line">|I|S|S|S| CODE  |  |A|             |  （if LENGTH=126）</span><br><span class="line">|N|V|V|V|       |  |S|             |</span><br><span class="line">| |1|2|3|       |  |K|             |</span><br><span class="line">+-+-+-+-+-------+  +-+-------------+</span><br><span class="line">|                      Extended payload length（if LENGTH=127）</span><br><span class="line">+                                  +-------------------------------</span><br><span class="line">|      Extended payload length     | Masking-key，if Mask set to 1</span><br><span class="line">+----------------------------------+-------------------------------</span><br><span class="line">|   Masking-key                    |       Data</span><br><span class="line">+----------------------------------+-------------------------------</span><br><span class="line">|                                Data</span><br><span class="line">+----------------------------------+-------------------------------</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我承认，我懵逼了。 冷静冷静，一步一步分析下吧。</p><p>首先每一行代表4个字节，一共也就是32位数，哦，那也就是几个字节而已嘛，每个字节有他自己的代表意义呗，这样想是不是就很简单了，下面来具体看看每个字节。</p><p><strong>第1个字节：</strong></p><ul><li>第一位是<code>FIN码</code>，其实就是一个标示位，因为数据可能多帧操作嘛，所以多帧情况下，只有最后一帧的<code>FIN</code>设置成1，标示结束帧，前面所有帧设置为0。</li><li>第二位到第四位是<code>RSV码</code>，一般通信两端没有设置自定义协议，就默认为0。</li><li>后四位是<code>opcode</code>，我们叫它操作码。这个就是判断这个数据帧的类型了，一般有以下几个被定义好的类型：</li></ul><p>1） <code>0x0</code> 表示附加数据帧<br>2） <code>0x1</code> 表示文本数据帧<br>3） <code>0x2</code> 表示二进制数据帧<br>4） <code>0x3-7</code> 保留用于未来的非控制帧<br>5） <code>0x8</code> 表示连接关闭<br>6） <code>0x9</code> 表示ping<br>7） <code>0xA</code> 表示pong<br>8） <code>0xB-F</code> 保留用于未来的非控制帧</p><p>是不是发现了些什么，这不就对应了我们应用中的几种格式吗？<code>2和3</code>对应的是普通消息帧，包括了文本和二进制数据。<code>567</code>对应的就是控制帧格式，包括了<code>close，ping，pong</code>。</p><p><strong>第2个字节：</strong></p><ul><li>第一位是<code>Mask</code>掩码，其实就是标识数据是否加密混淆，1代表数据经过掩码的，0是没有经过掩码的，如果是1的话，后续就会有4个字节代表<code>掩码key</code>，也就是数据帧中<code>Masking-key</code>所处的位置。</li><li>后7位是<code>LENGTH</code>，用来标示数据长度。因为只有7位，所以最大只能储存1111111对应的十进制数<code>127长度</code>的数据，如果需要更大的数据，这个储存长度肯定就不够了。 <strong>所以规定来了</strong>，1) <code>小于126长度</code>则数据用这七位表示实际长度。2) 如果长度<code>设置为126</code>，也就是二进制1111110，就代表取<code>额外2个字节</code>表示数据长度，共是16位表示数据长度。3) 如果长度<code>设置为127</code>，也就是二进制1111111，就代表取<code>额外8个字节</code>，共是64位表示数据长度。</li></ul><blockquote><p>需要注意的是LENGHT的三种情况在一个数据帧里面只会出现一种情况，不共存，所以在图中是用<strong>if</strong>表示。同样的，Masking-key也是当Mask为1的时候才存在。</p></blockquote><p>所以也就有了数据帧里面的<code>Extended payload length（LENGTH=126）</code>所处的2个字节，以及<code>Extended payload length（LENGTH=127）</code>所处的8个字节。</p><p>最后的字节部分自然就是<code>掩码key</code>（Mask为1的时候才存在）和具体的<code>传输数据</code>了。<br>还是有点晕吧😷，来张图总结下： <img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/13/173476f65b9b0001~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.image" alt="数据帧格式.jpeg"></p><p>好了，了解了<strong>数据帧格式</strong>后，我们再来读源码就清晰多了。 先看看怎么读的<code>头部信息</code>并解析的：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取数据帧前8位数据</span></span><br><span class="line">b0 = source.readByte() and <span class="number">0xff</span></span><br><span class="line"><span class="comment">//获取数据帧的opcode（数据格式）</span></span><br><span class="line">opcode = b0 and B0_MASK_OPCODE（<span class="number">15</span>）</span><br><span class="line"><span class="comment">//是否为最终帧</span></span><br><span class="line">isFinalFrame = b0 and B0_FLAG_FIN（<span class="number">128</span>） != <span class="number">0</span></span><br><span class="line"><span class="comment">//是否为控制帧（指令）</span></span><br><span class="line">isControlFrame = b0 and OPCODE_FLAG_CONTROL（<span class="number">8</span>） != <span class="number">0</span>  </span><br></pre></td></tr></table></figure><ul><li>第一句获取头信息，<code>and</code>是按位与计算，<code>and 0xff</code>意思就是按位与11111111，所以头部信息其实就是取了数据帧的<code>前8位数据</code>，一个字节。</li><li>第二句获取<code>opcode</code>，<code>and 15</code>也就是按位与00001111，其实也就是取了后四位数据，刚好对应上<code>opcode</code>的位置，第一个字节的后四位。</li><li>第三句获取是否为<code>最终帧</code>，刚才数据帧格式中说过，第一位<code>FIN</code>标识了是否为最后一帧数据，1代表结束帧，所以这里<code>and 128</code>也就是按位与10000000，也就是取的第一位数。</li><li>第四句获取是否为控制帧，<code>and 8</code>也就是按位与00001000，取得是第五位，也就是<code>opcode</code>的第一位，这是什么意思呢？我们看看刚才的数据帧格式，发现从<code>0x8</code>开始就是所谓的控制帧了。<code>0x8</code>对应的二进制是1000，<code>0x7</code>对应的二进制是0111。发现了吧，如果为控制帧的时候，<code>opcode</code>第一位肯定是为1的，所以这里就判断的第五位。</li></ul><p>后面还有读取第二个字节的代码，大家可以自己沿着这个思路自己看看，包括了读取<code>MASK</code>，读取数据长度的三种长度等。</p><p>所以这个<code>processNextFrame</code>方法主要做了三件事：</p><ul><li><code>readHeader</code>方法中，判断了是否为控制帧，是否为<code>结束帧</code>，然后获取了<code>Mask</code>标识，帧长度等参数</li><li><code>readControlFrame</code>方法中，主要处理了该帧数据为<code>ping，pong，close</code>三种情况，并且在收到<code>close关闭帧</code>的情况下，回调了<code>onReadClose</code>方法，这个待会要细看下。</li><li><code>readMessageFrame</code>方法中，主要是读取了消息后，回调了onReadMessage方法。</li></ul><p>至此可以发现，其实<code>WebSocket</code>传输数据并不是一个简单的事，只是<code>OkHttp</code>都帮我们封装好了，我们只需要直接传输数据即可，感谢这些三方库为我们开发作出的贡献，不知道什么时候我也能做出点贡献呢🤔。</p><p>对了，刚才说回调也很重要，接着看看。<code>onReadClose</code>和<code>onReadMessage</code>回调到哪了呢？还记得上文初始化<code>WebSocketWriter</code>的时候设置了回调接口吗。所以就是回调给<code>RealWebSocket</code>了：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealWebSocket.kt</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReadClose</span><span class="params">(code: <span class="type">Int</span>, reason: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">  require(code != -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> toClose: Streams? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> readerToClose: WebSocketReader? = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">var</span> writerToClose: WebSocketWriter? = <span class="literal">null</span></span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    check(receivedCloseCode == -<span class="number">1</span>) &#123; <span class="string">&quot;already closed&quot;</span> &#125;</span><br><span class="line">    receivedCloseCode = code</span><br><span class="line">    receivedCloseReason = reason </span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    listener.onClosing(<span class="keyword">this</span>, code, reason)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (toClose != <span class="literal">null</span>) &#123;</span><br><span class="line">      listener.onClosed(<span class="keyword">this</span>, code, reason)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    toClose?.closeQuietly()</span><br><span class="line">    readerToClose?.closeQuietly()</span><br><span class="line">    writerToClose?.closeQuietly()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReadMessage</span><span class="params">(text: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">  listener.onMessage(<span class="keyword">this</span>, text)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onReadMessage</span><span class="params">(bytes: <span class="type">ByteString</span>)</span></span> &#123;</span><br><span class="line">  listener.onMessage(<span class="keyword">this</span>, bytes)</span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>onReadClose</code>回调方法里面有个关键的参数，<code>receivedCloseCode</code>。还记得这个参数吗？上文中解析消息的循环条件就是<code>receivedCloseCode == -1</code>，所以当收到关闭帧的时候，<code>receivedCloseCode</code>就不再等于-1（规定大于1000），也就不再去读取解析消息了。这样整个流程就结束了。</p><p>其中还有一些<code>WebSocketListener</code>的回调，比如<code>onClosing，onClosed，onMessage</code>等，就直接回调给用户使用了。至此，接收消息处理消息说完了。</p><h3 id="3-3-发消息"><a href="#3-3-发消息" class="headerlink" title="3.3 发消息"></a>3.3 发消息</h3><p>好了。接着说发送，看看<code>send</code>方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Synchronized</span> <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">send</span><span class="params">(<span class="keyword">data</span>: <span class="type">ByteString</span>, formatOpcode: <span class="type">Int</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  <span class="comment">// ***</span></span><br><span class="line">  <span class="comment">// Enqueue the message frame.</span></span><br><span class="line">  queueSize += <span class="keyword">data</span>.size.toLong()</span><br><span class="line">  messageAndCloseQueue.add(Message(formatOpcode, <span class="keyword">data</span>))</span><br><span class="line">  runWriter()</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>首先，把要发送的<code>data</code>封装成<code>Message</code>对象，然后入队列<code>messageAndCloseQueue</code>。最后执行<code>runWriter</code>方法。这都不用猜了，<code>runWriter</code>肯定就要开始发送消息了，继续看：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RealWebSocket.kt</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">runWriter</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.assertThreadHoldsLock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> writerTask = writerTask</span><br><span class="line">  <span class="keyword">if</span> (writerTask != <span class="literal">null</span>) &#123;</span><br><span class="line">    taskQueue.schedule(writerTask)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">WriterTask</span> : <span class="type">Task</span></span>(<span class="string">&quot;<span class="variable">$name</span> writer&quot;</span>) &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">runOnce</span><span class="params">()</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (writeOneFrame()) <span class="keyword">return</span> <span class="number">0L</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">      failWebSocket(e, <span class="literal">null</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1L</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//以下是schedule方法转到WriterTask的runOnce方法过程</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//TaskQueue.kt</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">schedule</span><span class="params">(task: <span class="type">Task</span>, delayNanos: <span class="type">Long</span> = <span class="number">0</span>L)</span></span> &#123;</span><br><span class="line">  synchronized(taskRunner) &#123;</span><br><span class="line">    <span class="keyword">if</span> (scheduleAndDecide(task, delayNanos, recurrence = <span class="literal">false</span>)) &#123;</span><br><span class="line">      taskRunner.kickCoordinator(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">scheduleAndDecide</span><span class="params">(task: <span class="type">Task</span>, delayNanos: <span class="type">Long</span>, recurrence: <span class="type">Boolean</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  <span class="comment">//***</span></span><br><span class="line">  <span class="keyword">if</span> (insertAt == -<span class="number">1</span>) insertAt = futureTasks.size</span><br><span class="line">  futureTasks.add(insertAt, task)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Impact the coordinator if we inserted at the front.</span></span><br><span class="line">  <span class="keyword">return</span> insertAt == <span class="number">0</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">//TaskRunner.kt</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">kickCoordinator</span><span class="params">(taskQueue: <span class="type">TaskQueue</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.assertThreadHoldsLock()</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (taskQueue.activeTask == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (taskQueue.futureTasks.isNotEmpty()) &#123;</span><br><span class="line">      readyQueues.addIfAbsent(taskQueue)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      readyQueues.remove(taskQueue)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;    </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (coordinatorWaiting) &#123;</span><br><span class="line">    backend.coordinatorNotify(<span class="keyword">this</span><span class="symbol">@TaskRunner</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    backend.execute(runnable)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> runnable: Runnable = <span class="keyword">object</span> : Runnable &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> task = synchronized(<span class="keyword">this</span><span class="symbol">@TaskRunner</span>) &#123;</span><br><span class="line">        awaitTaskToRun()</span><br><span class="line">      &#125; ?: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">      logElapsed(task, task.queue!!) &#123;</span><br><span class="line">        <span class="keyword">var</span> completedNormally = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          runTask(task)</span><br><span class="line">          completedNormally = <span class="literal">true</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">          <span class="comment">// If the task is crashing start another thread to service the queues.</span></span><br><span class="line">          <span class="keyword">if</span> (!completedNormally) &#123;</span><br><span class="line">            backend.execute(<span class="keyword">this</span>)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">runTask</span><span class="params">(task: <span class="type">Task</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    delayNanos = task.runOnce()</span><br><span class="line">  &#125; </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码有点长，这里是从<code>runWriter</code>开始跟的几个方法，拿到<code>writerTask</code>实例后，存到<code>TaskQueue</code>的<code>futureTasks列表</code>里，然后到<code>runnable</code>这里可以看到是一个<code>while</code>死循环，不断的从<code>futureTasks</code>中取出<code>Task</code>并执行<code>runTask</code>方法，直到<code>Task</code>为空，循环停止。</p><p>其中涉及到两个新的类：</p><ul><li><code>TaskQueue类</code>主要就是管理消息任务列表，保证按顺序执行</li><li><code>TaskRunner类</code>主要就是做一些任务的具体操作，比如线程池里执行任务，记录消息任务的状态（准备发送的任务队列<code>readyQueues</code>，正在执行的任务队列<code>busyQueues</code>等等）</li></ul><p>而每一个Task最后都是执行到了<code>WriterTask</code>的<code>runOnce</code>方法，也就是<code>writeOneFrame</code>方法：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeOneFrame</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  synchronized(<span class="keyword">this</span><span class="symbol">@RealWebSocket</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (failed) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// Failed web socket.</span></span><br><span class="line">    &#125;</span><br><span class="line">    writer = <span class="keyword">this</span>.writer</span><br><span class="line">    pong = pongQueue.poll()</span><br><span class="line">    <span class="keyword">if</span> (pong == <span class="literal">null</span>) &#123;</span><br><span class="line">      messageOrClose = messageAndCloseQueue.poll()</span><br><span class="line">      <span class="keyword">if</span> (messageOrClose <span class="keyword">is</span> Close) &#123;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (messageOrClose == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">false</span> <span class="comment">// The queue is exhausted.</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">//发送消息逻辑，包括`pong`消息，普通消息，关闭消息</span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pong != <span class="literal">null</span>) &#123;</span><br><span class="line">      writer!!.writePong(pong)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (messageOrClose <span class="keyword">is</span> Message) &#123;</span><br><span class="line">      <span class="keyword">val</span> message = messageOrClose <span class="keyword">as</span> Message</span><br><span class="line">      writer!!.writeMessageFrame(message.formatOpcode, message.<span class="keyword">data</span>)</span><br><span class="line">      synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">        queueSize -= message.<span class="keyword">data</span>.size.toLong()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (messageOrClose <span class="keyword">is</span> Close) &#123;</span><br><span class="line">      <span class="keyword">val</span> close = messageOrClose <span class="keyword">as</span> Close</span><br><span class="line">      writer!!.writeClose(close.code, close.reason)</span><br><span class="line">      <span class="comment">// We closed the writer: now both reader and writer are closed.</span></span><br><span class="line">      <span class="keyword">if</span> (streamsToClose != <span class="literal">null</span>) &#123;</span><br><span class="line">        listener.onClosed(<span class="keyword">this</span>, receivedCloseCode, receivedCloseReason!!)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    streamsToClose?.closeQuietly()</span><br><span class="line">    readerToClose?.closeQuietly()</span><br><span class="line">    writerToClose?.closeQuietly()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里就会执行发送消息的逻辑了，主要有三种消息情况处理：</p><ul><li><code>pong消息</code>，这个主要是为服务器端准备的，发送给客户端回应心跳包。</li><li><code>普通消息</code>，就会把数据类型<code>Opcode</code>和具体数据发送过去</li><li><code>关闭消息</code>，其实当用户执行<code>close</code>方法关闭<code>WebSocket</code>的时候，也是发送了一条<code>Close控制帧</code>消息给服务器告知这个关闭需求，并带上<code>code状态码</code>和<code>reason关闭原因</code>，然后服务器端就会关闭当前连接。</li></ul><p>好了。最后一步了，就是把这些数据组装成<code>WebSocket</code>数据帧并写入流，分成<code>控制帧</code>数据和<code>普通消息数据帧</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//写入（发送）控制帧</span></span><br><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">writeControlFrame</span><span class="params">(opcode: <span class="type">Int</span>, payload: <span class="type">ByteString</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (writerClosed) <span class="keyword">throw</span> IOException(<span class="string">&quot;closed&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">val</span> length = payload.size</span><br><span class="line">  require(length &lt;= PAYLOAD_BYTE_MAX) &#123;</span><br><span class="line">    <span class="string">&quot;Payload size must be less than or equal to <span class="variable">$PAYLOAD_BYTE_MAX</span>&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">val</span> b0 = B0_FLAG_FIN or opcode</span><br><span class="line">  sinkBuffer.writeByte(b0)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b1 = length</span><br><span class="line">  <span class="keyword">if</span> (isClient) &#123;</span><br><span class="line">    b1 = b1 or B1_FLAG_MASK</span><br><span class="line">    sinkBuffer.writeByte(b1)</span><br><span class="line">    random.nextBytes(maskKey!!)</span><br><span class="line">    sinkBuffer.write(maskKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> payloadStart = sinkBuffer.size</span><br><span class="line">      sinkBuffer.write(payload)</span><br><span class="line">      sinkBuffer.readAndWriteUnsafe(maskCursor!!)</span><br><span class="line">      maskCursor.seek(payloadStart)</span><br><span class="line">      toggleMask(maskCursor, maskKey)</span><br><span class="line">      maskCursor.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    sinkBuffer.writeByte(b1)</span><br><span class="line">    sinkBuffer.write(payload)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sink.flush()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写入（发送）普通消息数据帧</span></span><br><span class="line"><span class="meta">@Throws(IOException::class)</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">writeMessageFrame</span><span class="params">(formatOpcode: <span class="type">Int</span>, <span class="keyword">data</span>: <span class="type">ByteString</span>)</span></span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (writerClosed) <span class="keyword">throw</span> IOException(<span class="string">&quot;closed&quot;</span>)</span><br><span class="line"></span><br><span class="line">  messageBuffer.write(<span class="keyword">data</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b0 = formatOpcode or B0_FLAG_FIN</span><br><span class="line">  <span class="keyword">val</span> dataSize = messageBuffer.size</span><br><span class="line">  sinkBuffer.writeByte(b0)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> b1 = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (isClient) &#123;</span><br><span class="line">    b1 = b1 or B1_FLAG_MASK</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">when</span> &#123;</span><br><span class="line">    dataSize &lt;= PAYLOAD_BYTE_MAX -&gt; &#123;</span><br><span class="line">      b1 = b1 or dataSize.toInt()</span><br><span class="line">      sinkBuffer.writeByte(b1)</span><br><span class="line">    &#125;</span><br><span class="line">    dataSize &lt;= PAYLOAD_SHORT_MAX -&gt; &#123;</span><br><span class="line">      b1 = b1 or PAYLOAD_SHORT</span><br><span class="line">      sinkBuffer.writeByte(b1)</span><br><span class="line">      sinkBuffer.writeShort(dataSize.toInt())</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> -&gt; &#123;</span><br><span class="line">      b1 = b1 or PAYLOAD_LONG</span><br><span class="line">      sinkBuffer.writeByte(b1)</span><br><span class="line">      sinkBuffer.writeLong(dataSize)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isClient) &#123;</span><br><span class="line">    random.nextBytes(maskKey!!)</span><br><span class="line">    sinkBuffer.write(maskKey)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (dataSize &gt; <span class="number">0L</span>) &#123;</span><br><span class="line">      messageBuffer.readAndWriteUnsafe(maskCursor!!)</span><br><span class="line">      maskCursor.seek(<span class="number">0L</span>)</span><br><span class="line">      toggleMask(maskCursor, maskKey)</span><br><span class="line">      maskCursor.close()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sinkBuffer.write(messageBuffer, dataSize)</span><br><span class="line">  sink.emit()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>大家应该都能看懂了吧，其实就是组装数据帧，包括<code>Opcode，mask，数据长度</code>等等。两个方法的不同就在于普通数据需要判断数据长度的三种情况，再组装数据帧。最后都会通过<code>sinkBuffer</code>写入到输出数据流。</p><p>终于，基本的流程说的差不多了。其中还有很多细节，同学们可以自己花时间看看琢磨琢磨，比如<code>Okio</code>部分。还是那句话，希望大家有空自己也读一读相关源码，这样理解才能深刻，而且你肯定会发现很多我没说到的细节，欢迎大家讨论。我也会继续努力，最后大家给我加个油点个赞吧，感谢感谢。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/7/13/173476f65e6e3ed4~tplv-t2oaga2asx-zoom-in-crop-mark:1304:0:0:0.image" alt="OkHttp-WebSocket源码.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;OkHttp应该算是Android中使用最广泛的网络库了，我们通常会利用它来实现HTTP请求，但是实际上它还可以支持WebSocket，并且使用起来还非常的便捷。那本文就来聊聊，利用OkHttp实现WebSocket的一些细节，包括对WebSocket的介绍，以及在传输如何</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>HTTPS 学习整理</title>
    <link href="http://example.com/2022/05/13/HTTPS-%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/"/>
    <id>http://example.com/2022/05/13/HTTPS-%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/</id>
    <published>2022-05-13T00:23:15.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTPS-学习整理"><a href="#HTTPS-学习整理" class="headerlink" title="HTTPS 学习整理"></a>HTTPS 学习整理</h2><h3 id="1-HTTPS-连接及握手过程"><a href="#1-HTTPS-连接及握手过程" class="headerlink" title="1.HTTPS 连接及握手过程"></a>1.HTTPS 连接及握手过程</h3><p><strong>第一步</strong>，客户端发送给服务器Client Hello，叫做Client Hello 其实是一个一字节的数据</p><p><img src="/../images/image-20220513082622256.png" alt="image-20220513082622256"></p><p>发送Client Hello 还会附加一些信息</p><ol><li>可选的TLS版本</li><li>可选的加密套件<ul><li>可选的对称加密算法</li><li>可选的非对称加密算法</li><li>可选的hash算法</li></ul></li><li>客户端随机数（这个随机数随后会用到，等于是第一个随机数客户端和服务器都会使用到）</li></ol><p><img src="/../images/image-20220513082816474.png" alt="image-20220513082816474"></p><p><strong>第二步</strong>，服务端返回Server Hello 也是一个单字节数据，并把Client Hello 附加信息的确认值返回给客户端，同时生成服务端的随机数，返回给客户端</p><p><img src="/../images/image-20220513083321789.png" alt="image-20220513083321789"></p><p><strong>第三步</strong>，服务端下发证书，然后客户端这里会做证书的较验，这里的过程比较麻烦和复杂</p><p><img src="/../images/image-20220513083443606.png" alt="image-20220513083443606"></p><p>如图所示，证书中包含</p><ul><li>服务器公钥</li><li>服务器主机名</li><li>服务器公钥的签名</li><li>证书签发机构的公钥</li><li>证书签发机构的公角的签名</li><li>….</li></ul><p>较验的顺序也是如此，链式去使用签名去较验公钥是否准确，防止公钥被修改，一层层直到找到根证书，根证书一般都安装在pc或者手机里，然后逐层去较验公钥的正确性，最后证明服务器的公钥确实是真的，而不是假的</p><p><img src="/../images/image-20220513134035609.png" alt="image-20220513134035609"></p><p>如图所示，访问hencoder.com 然后证书链中的三级证书，客户端验证服务器证书的真实性，还通过主机名确认对方的身份，确实是我要访问的服务器，而不是其他在ca公签的服务器</p><p><img src="/../images/image-20220513134238446.png" alt="image-20220513134238446"></p><p><strong>第四步</strong>，客户端拿到服务器公钥后，和服务器一起通过公钥生成加密的Pre-master secret ，双方就公同持有了三个东西</p><ul><li>客户端随机数</li><li>服务器随机数</li><li>Pre-master secret</li></ul><p>通过这三个东西会各自独立的生成master secret 所以注意啦，<strong>最终的对称密钥并不是客户端生成后发给服务器的，而是由前面交互的随机数，及加密后的公钥独立生成的</strong></p><p><img src="/../images/image-20220513134634905.png" alt="image-20220513134634905"></p><p><strong>而且，生成的对称加密的密钥并不是简单的一个密码</strong></p><p><img src="/../images/image-20220513134726832.png" alt="image-20220513134726832"></p><p>那么有人可能会有疑问，为什么要很麻烦的生成客户端的加密密钥，服务端的加密密钥？用一个不行么？</p><p><img src="/../images/image-20220513134838968.png" alt="image-20220513134838968"></p><p><strong>第五步，客户端告诉服务器，我将使用加密通信，还有把前面几步合一起加密发给服务器，生送Finished 同样服务器也返回客户端：将使用加密通信，同时Finished握手</strong></p><p><img src="/../images/image-20220513135059793.png" alt="image-20220513135059793"></p><p>服务端返回</p><p><img src="/../images/image-20220513135117684.png" alt="image-20220513135117684"></p><p><img src="/../images/image-20220513135132604.png" alt="image-20220513135132604"></p><h3 id="2-在Android中合理使用HTTPS"><a href="#2-在Android中合理使用HTTPS" class="headerlink" title="2.在Android中合理使用HTTPS"></a>2.在Android中合理使用HTTPS</h3><p>CA公签的就不讨论了，使用很方便，根据所使用的网络框架，可以自行百度，非常简单方便。这里说下如何较验主机名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Create an HostnameVerifier that hardwires the expected hostname.</span></span><br><span class="line"><span class="comment">// Note that is different than the URL&#x27;s hostname:</span></span><br><span class="line"><span class="comment">// example.com versus example.org</span></span><br><span class="line">HostnameVerifier hostnameVerifier = <span class="keyword">new</span> HostnameVerifier() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">        HostnameVerifier hv =</span><br><span class="line">            HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">        <span class="keyword">return</span> hv.verify(<span class="string">&quot;example.com&quot;</span>, session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the URLConnection to use our HostnameVerifier</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://example.org/&quot;</span>);</span><br><span class="line">HttpsURLConnection urlConnection =</span><br><span class="line">    (HttpsURLConnection)url.openConnection();</span><br><span class="line">urlConnection.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">InputStream in = urlConnection.getInputStream();</span><br><span class="line">copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure><p>还有一种情况，有一些公司使用自签名证书，或者非知名机构颁发的证书，如果不做处理，会报https的网络异常，那么这时候上网上查的话，很多都是告诉不做较验，放开所有的证书，当然这样可以走的通，但是同时也失去了使用HTTPS的作用，是不认真负责的。</p><p>我们看官网上对这一过程的描述，之所以之前我们记不住，也是因为我们对HTTPS的握手和证书较验过程不够理解，现在看这段话</p><blockquote><p>在这种情况下，由于您的 CA 不受系统信任，将发生 SSLHandshakeException。原因可能是您有一个由 Android 尚不信任的新 CA    颁发的证书，或您的应用在没有 CA 的较旧版本上运行。CA 未知的原因通常是因为它不是公共 CA，而是由政府、公司或教育机构等组织颁发的仅供其自己使用的私有 CA。</p><p>幸运的是，您可以指示 HttpsURLConnection 信任特定的 CA 集。这个过程可能有点复杂，下面的示例展示了这个过程：从 InputStream 获取一个特定的 CA，用该 CA 创建 KeyStore，然后用后者创建和初始化 TrustManager。TrustManager 是系统用于验证来自服务器的证书的工具，可以通过包含一个或多个 CA 的 KeyStore 创建，而创建的 TrustManager 将仅信任这些 CA。</p><p>由于 TrustManager 是新建的，此示例将启动一个新的 SSLContext，它会提供一个 SSLSocketFactory，可用于替换来自 HttpsURLConnection 的默认 SSLSocketFactory。这样一来，连接将使用您的 CA 来验证证书。</p></blockquote><p>这下你知道，为啥Android客户会有一个证书文件了吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">// Load CAs from an InputStream</span></span><br><span class="line"><span class="comment">// (could be from a resource or ByteArrayInputStream or ...)</span></span><br><span class="line">CertificateFactory cf = CertificateFactory.getInstance(<span class="string">&quot;X.509&quot;</span>);</span><br><span class="line"><span class="comment">// From https://www.washington.edu/itconnect/security/ca/load-der.crt</span></span><br><span class="line">InputStream caInput = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;load-der.crt&quot;</span>));</span><br><span class="line">Certificate ca;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ca = cf.generateCertificate(caInput);</span><br><span class="line">    System.out.println(<span class="string">&quot;ca=&quot;</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    caInput.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">keyStore.setCertificateEntry(<span class="string">&quot;ca&quot;</span>, ca);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class="line">TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class="line">tmf.init(keyStore);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an SSLContext that uses our TrustManager</span></span><br><span class="line">SSLContext context = SSLContext.getInstance(<span class="string">&quot;TLS&quot;</span>);</span><br><span class="line">context.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the URLConnection to use a SocketFactory from our SSLContext</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;https://certs.cac.washington.edu/CAtest/&quot;</span>);</span><br><span class="line">HttpsURLConnection urlConnection =</span><br><span class="line">    (HttpsURLConnection)url.openConnection();</span><br><span class="line">urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class="line">InputStream in = urlConnection.getInputStream();</span><br><span class="line">copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure><p>这个SSLContext很关键，由得到的SSLContextFactory是我们很多网络框架可以进行替换和设置，这样就可以通过自签名的ca集来检验较验证书的合法性了。</p><p>之所以说SSLContext很关键，因为不光HTTP可以使用SSL较验，很多上层加密都使用了SSL层的加密特性，比如我们可能会遇到的WSS Websocket的加密协议，怎么处理，一样的道理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HTTPS-学习整理&quot;&gt;&lt;a href=&quot;#HTTPS-学习整理&quot; class=&quot;headerlink&quot; title=&quot;HTTPS 学习整理&quot;&gt;&lt;/a&gt;HTTPS 学习整理&lt;/h2&gt;&lt;h3 id=&quot;1-HTTPS-连接及握手过程&quot;&gt;&lt;a href=&quot;#1-HTTP</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetpack系列—LiveData原理解析</title>
    <link href="http://example.com/2022/03/20/Jetpack%E7%B3%BB%E5%88%97%E2%80%94LiveData/"/>
    <id>http://example.com/2022/03/20/Jetpack%E7%B3%BB%E5%88%97%E2%80%94LiveData/</id>
    <published>2022-03-20T10:43:51.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>什么是<code>LiveData</code></li><li><code>LiveData</code>几种衍生类</li><li><code>LiveData</code>核心方法</li><li><code>LiveData</code>实现原理</li></ul><h2 id="1-什么是LiveData"><a href="#1-什么是LiveData" class="headerlink" title="1.什么是LiveData"></a>1.什么是LiveData</h2><ul><li><code>LiveData</code>组件是<code>Jetpack</code>新推出的基于观察者的消息订阅&#x2F;分发组件，具有宿主(<code>Activity</code>&#x2F;<code>Fragment</code>)生命周期感知能力，这种感知能力可确保<code>LiveData</code>仅分发消息给处于<code>活跃状态</code>的观察者，即只有处于<code>活跃状态</code>的观察者才能收到消息</li><li><code>LiveData</code>的消息分发机制，是以往的<code>Handler</code>，<code>EventBus</code>，<code>RxJavaBus</code>无法比拟的，它们不会顾及当前页面是否可见，一股脑的有消息就转发。导致即便应用在后台，页面不可见，还在做一些无用的绘制，计算(细心的同学可以发现微信消息列表是在可见状态时才会更新列表最新信息的)</li></ul><blockquote><p>活跃状态：<code>Observer</code>所在宿主处于<code>started</code>,<code>resumed</code>状态    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppcompactActivity</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle bundle)</span></span>&#123;</span><br><span class="line">    <span class="meta">@Ovderride</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span></span>&#123;</span><br><span class="line">      <span class="comment">//无论页面可见不可见，都会去执行页面刷新,IO。更有甚者弹出对话框</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1.无论当前页面是否可见，这条消息都会被分发。——消耗资源</span></span><br><span class="line">  <span class="comment">//2.无论前宿主是否还存活，这条消息都会被分发。——内存泄漏</span></span><br><span class="line">  handler.sendMessage(msg);</span><br><span class="line"></span><br><span class="line">  liveData.observer(<span class="keyword">this</span>,<span class="keyword">new</span> Observer&lt;User&gt;)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//1.减少资源占用 —— 页面不可见时不会派发消息</span></span><br><span class="line">  <span class="comment">//2.确保页面始终保持最新状态——页面可见时，会立刻派发新新的一条消息给所有观察者——保证页面最新状态</span></span><br><span class="line">  <span class="comment">//3.不再需要手动处理生命周期——避免NPE</span></span><br><span class="line">  <span class="comment">//4.livedata默认是不能跨页面使用的，但是我们有办法，可以打造一款不用反注册，不会内存泄漏的消息总线——取代eventbus</span></span><br><span class="line">liveData.postValue(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-LiveData的几种用法"><a href="#2-LiveData的几种用法" class="headerlink" title="2.LiveData的几种用法"></a>2.LiveData的几种用法</h2><h3 id="2-1-MutableLiveData"><a href="#2-1-MutableLiveData" class="headerlink" title="2.1 MutableLiveData"></a>2.1 MutableLiveData</h3><p>我们在使用LiveData在做消息分发的时候，需要使用这个子类。之所以这么设计，是考虑到单一开闭原则，只有拿到MutableLiveData对象才可以发送消息，LiveData对象只能接收消息，避免拿到LiveData对象时既能发消息也能收到消息的混乱使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutableLiveData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.postValue(value);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.setValue(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-MediatorLiveData"><a href="#2-2-MediatorLiveData" class="headerlink" title="2.2 MediatorLiveData"></a>2.2 MediatorLiveData</h3><ul><li>可以统一观察多个LiveData的发射的数据进行统一的处理</li><li>同时也可以做为一个LiveData，被其他Observer观察。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建两个长的差不多的LiveData对象</span></span><br><span class="line">LiveData&lt;Integer&gt; liveData1 = <span class="keyword">new</span> MutableLiveData();</span><br><span class="line">LiveData&lt;Integer&gt; liveData2 = <span class="keyword">new</span> MutableLiveData();</span><br><span class="line"></span><br><span class="line"><span class="comment">//再创建一个聚合类MediatorLiveData</span></span><br><span class="line">MediatorLiveData&lt;Integer&gt; liveDataMerger = <span class="keyword">new</span> MediatorLiveData();</span><br><span class="line"><span class="comment">//分别把上面创建的LiveData添加进来</span></span><br><span class="line">liveDataMerger.addSource(liveData1,observer);</span><br><span class="line">liveDataMerger.addSource(liveData2,observer);</span><br><span class="line"></span><br><span class="line">Observer observer = <span class="keyword">new</span> Observer&lt;Integer&gt;&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(<span class="meta">@Nullable</span> Integer s)</span></span>&#123;</span><br><span class="line">    titleTextView.setText(s);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一旦liveData1或者liveData2发送了新的数据，observer便能观察到，以便统一处理更新UI</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Transformations-map-操作符"><a href="#2-3-Transformations-map-操作符" class="headerlink" title="2.3 Transformations.map 操作符"></a>2.3 Transformations.map 操作符</h3><p>可以对liveData进行变化，并且返回一个新的livedata对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">MutableLiveData&lt;Integer&gt; data = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//数据转换</span></span><br><span class="line">LiveData&lt;String&gt; transformData = Transformations.map(data,input -&gt; String.valueOf(input));</span><br><span class="line"><span class="comment">//使用转换后生成的transformData去观察数据</span></span><br><span class="line">transformData.observe(<span class="keyword">this</span>,output -&gt; &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用原始的livedata发送数据</span></span><br><span class="line">data.setValue(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="3-LiveData核心方法"><a href="#3-LiveData核心方法" class="headerlink" title="3.LiveData核心方法"></a>3.LiveData核心方法</h2><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>observe(LifecycleOwner owner,Observer observer)</td><td>注册和宿主生命周期关联的观察者</td></tr><tr><td>observeForever(Observer observer)</td><td>注册观察者，不会反注册，需要自行维护</td></tr><tr><td>setValue(T data)</td><td>发送数据，没有活跃的观察者时不会分发。只能在主线程。</td></tr><tr><td>postValue(T data)</td><td>和setValue一样。不受线程环境限制。</td></tr><tr><td>onActive</td><td>当且仅当有一个活跃的观察者时会触发</td></tr><tr><td>inActive</td><td>不存在活跃的观察者时会触发</td></tr></tbody></table><h2 id="4-LiveData实现原理"><a href="#4-LiveData实现原理" class="headerlink" title="4.LiveData实现原理"></a>4.LiveData实现原理</h2><p><img src="/../images/image-20220514110449881.png" alt="image-20220514110449881"></p><p><img src="/../images/image-20220514111210613.png" alt="image-20220514111210613"></p><p><code>LiveData</code>使用的有很多好处</p><ul><li>确保<code>UI</code>符合数据状态</li><li>不需要手动处理生命周期</li><li>始终保持最新的数据</li><li>事件总线<code>LiveDataBus</code></li></ul><p><strong>确保UI符合数据状态</strong></p><p>因为<code>livedata</code>实现了观察者模式 它里面的数据发生变化的时候，会向注册的<code>Observer</code>观察者发送通知，这时可以在观察者的<code>onChanged</code>里面更改UI 以保持数据的最新化</p><p><strong>不需要手动处理生命周期</strong></p><p>在注册<code>observe</code>的时候，会将当前宿主的生命周期进行绑定，当宿主被销毁时，就自动的进行销毁</p><p><strong>始终保持最新的数据</strong></p><p>可以这么理解，当宿主的生命周期变为非活跃状态的时候，那么它将在再次变为活跃状态的时候，接收到最新的数据，比如<code>activity</code> 从前台返回到后台，再从后台返回前台。再比如<code>actvity</code>和<code>fragment</code>由于配置的更改，而重新创建，也是能够接收到最新可用的数据，来保持最新的数据和UI</p><p>事件总线<code>LiveDataBus</code></p><p>使用<code>livedata</code>来实现消息总线，替代使用<code>eventbus</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有参数构造 mVersion = 0  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LiveData</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    mData = value;</span><br><span class="line">    mVersion = START_VERSION + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数构造，mVersion = -1  mData = NOT_SET</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LiveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    mData = NOT_SET;</span><br><span class="line">    mVersion = START_VERSION;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么为什么<code>livedata</code>需要一个<code>version</code>呢？</p><p>因为<code>livedata</code>通过<code>version</code>来控制数据分发，通过<code>mVersion</code>来进行数据的比对，本次是否需要进行数据的分发，因为不能<code>livedata</code>发送一次数据，而observable能接收到2，3次数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//把宿主和observer进行绑定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observe</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner owner, <span class="meta">@NonNull</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;observe&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (owner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//把lifecycle 和 observer包装成了一个LifecycleBoundObserver，也就是一个有边界的的observer</span></span><br><span class="line">    LifecycleBoundObserver wrapper = <span class="keyword">new</span> LifecycleBoundObserver(owner, observer);</span><br><span class="line">  <span class="comment">//包装完后，把wrapper放入一个hashmap里</span></span><br><span class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span> &amp;&amp; !existing.isAttachedTo(owner)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//注意这里传入的是包装后的wrapper  lifecycleboundobserver</span></span><br><span class="line">    owner.getLifecycle().addObserver(wrapper);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过observe可以向livedata注册一个观察者对象</p><p>owner.getLifecycle().addObserver(wrapper) 进入 会进行到实现</p><p>LifecycleRegistry.addObserver(observer)方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(<span class="meta">@NonNull</span> LifecycleObserver observer)</span> </span>&#123;</span><br><span class="line">    enforceMainThreadIfNeeded(<span class="string">&quot;addObserver&quot;</span>);</span><br><span class="line">  <span class="comment">//判断当前宿主的生命周期状态</span></span><br><span class="line">    State initialState = mState == DESTROYED ? DESTROYED : INITIALIZED;</span><br><span class="line">  <span class="comment">//判断完后，会把当前宿主的生命周期和观察者进行包装</span></span><br><span class="line">    ObserverWithState statefulObserver = <span class="keyword">new</span> ObserverWithState(observer, initialState);</span><br><span class="line">  <span class="comment">//包装完成后也会存储到hashmap里</span></span><br><span class="line">    ObserverWithState previous = mObserverMap.putIfAbsent(observer, statefulObserver);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//为什么要再进行这么包装呢？主要是为了分发当前宿主的生命周期状态给每个observer</span></span><br><span class="line">    <span class="keyword">if</span> (previous != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LifecycleOwner lifecycleOwner = mLifecycleOwner.get();</span><br><span class="line">    <span class="keyword">if</span> (lifecycleOwner == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// it is null we should be destroyed. Fallback quickly</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">boolean</span> isReentrance = mAddingObserverCounter != <span class="number">0</span> || mHandlingEvent;</span><br><span class="line">    State targetState = calculateTargetState(observer);</span><br><span class="line">    mAddingObserverCounter++;</span><br><span class="line">    <span class="keyword">while</span> ((statefulObserver.mState.compareTo(targetState) &lt; <span class="number">0</span></span><br><span class="line">            &amp;&amp; mObserverMap.contains(observer))) &#123;</span><br><span class="line">        pushParentState(statefulObserver.mState);</span><br><span class="line">        <span class="keyword">final</span> Event event = Event.upFrom(statefulObserver.mState);</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">&quot;no event up from &quot;</span> + statefulObserver.mState);</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//分发宿主的生命周期状态 给observer</span></span><br><span class="line">        statefulObserver.dispatchEvent(lifecycleOwner, event);</span><br><span class="line">        popParentState();</span><br><span class="line">        <span class="comment">// mState / subling may have been changed recalculate</span></span><br><span class="line">        targetState = calculateTargetState(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isReentrance) &#123;</span><br><span class="line">        <span class="comment">// we do sync only on the top level.</span></span><br><span class="line">        sync();</span><br><span class="line">    &#125;</span><br><span class="line">    mAddingObserverCounter--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchEvent</span><span class="params">(LifecycleOwner owner, Event event)</span> </span>&#123;</span><br><span class="line">    State newState = event.getTargetState();</span><br><span class="line">    mState = min(mState, newState);</span><br><span class="line">  <span class="comment">//这个lifecycleobserver就是我们传递进来的lifecyclebounderobserver</span></span><br><span class="line">    mLifecycleObserver.onStateChanged(owner, event);</span><br><span class="line">    mState = newState;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口是 LifecycleEventObserver的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">LifecycleEventObserver</span> <span class="keyword">extends</span> <span class="title">LifecycleObserver</span> </span>&#123;</span><br><span class="line"><span class="comment">//这个回调的是宿主生命周期的变化  有两个参数，一个是宿主 一个是Event</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source, <span class="meta">@NonNull</span> Lifecycle.Event event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onCreate event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_CREATE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onStart event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_START,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onResume event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_RESUME,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onPause event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_PAUSE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onStop event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_STOP,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constant for onDestroy event of the &#123;<span class="doctag">@link</span> LifecycleOwner&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_DESTROY,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * An &#123;<span class="doctag">@link</span> Event Event&#125; constant that can be used to match all events.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ON_ANY;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>宿主的每个生命周期的改变都会回调到onStateChanged</p><p>我们看下它的实现 LifecycleBoundObserver 实现了LifecycleEventObserver</p><p>LifecycleBoundObserver.onStateChanged</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">    Lifecycle.State currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class="line">  <span class="comment">//如果当前状态是destroyed</span></span><br><span class="line">    <span class="keyword">if</span> (currentState == DESTROYED) &#123;</span><br><span class="line">      <span class="comment">//自行移除，自行反注册这个observer</span></span><br><span class="line">        removeObserver(mObserver);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lifecycle.State prevState = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">while</span> (prevState != currentState) &#123;</span><br><span class="line">        prevState = currentState;</span><br><span class="line">      <span class="comment">//否则就执行活跃状态的变更 看shouldBeActive方法</span></span><br><span class="line">        activeStateChanged(shouldBeActive());</span><br><span class="line">        currentState = mOwner.getLifecycle().getCurrentState();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里判断了只有宿主的生命周期大于start的时候  才代表宿主是活跃的</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续看activeStateChanged</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">activeStateChanged</span><span class="params">(<span class="keyword">boolean</span> newActive)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (newActive == mActive) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    mActive = newActive;</span><br><span class="line">    changeActiveCounter(mActive ? <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">        dispatchingValue(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">changeActiveCounter</span><span class="params">(<span class="keyword">int</span> change)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> previousActiveCount = mActiveCount;</span><br><span class="line">    mActiveCount += change;</span><br><span class="line">    <span class="keyword">if</span> (mChangingActiveState) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mChangingActiveState = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (previousActiveCount != mActiveCount) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> needToCallActive = previousActiveCount == <span class="number">0</span> &amp;&amp; mActiveCount &gt; <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> needToCallInactive = previousActiveCount &gt; <span class="number">0</span> &amp;&amp; mActiveCount == <span class="number">0</span>;</span><br><span class="line">            previousActiveCount = mActiveCount;</span><br><span class="line">            <span class="keyword">if</span> (needToCallActive) &#123;<span class="comment">//首次注册会执行onActive </span></span><br><span class="line">                onActive();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (needToCallInactive) &#123;<span class="comment">//当最后一个观察者被移除时，会执行onInactive</span></span><br><span class="line">                onInactive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mChangingActiveState = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInactive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//可以初始化</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//可以反注册，释放资源，清理   paging就利用了这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着看 传入true 执行dispatchingValue 把当前的observer传入进去</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mActive) &#123;</span><br><span class="line">    dispatchingValue(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mDispatchingValue = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="keyword">false</span>;</span><br><span class="line">      <span class="comment">//不为空，走到considerNotify 里，见considerNotify</span></span><br><span class="line">        <span class="keyword">if</span> (initiator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            considerNotify(initiator);</span><br><span class="line">            initiator = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="keyword">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">                considerNotify(iterator.next().getValue());</span><br><span class="line">                <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">    mDispatchingValue = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">considerNotify</span><span class="params">(ObserverWrapper observer)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//如果 observer是不活跃的，也是不进行分发的</span></span><br><span class="line">    <span class="keyword">if</span> (!observer.mActive) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//再判断宿主的生命周期是否大于start状态</span></span><br><span class="line">    <span class="keyword">if</span> (!observer.shouldBeActive()) &#123;</span><br><span class="line">      <span class="comment">//如果不活跃，就把actvityStateChanged状态转为false</span></span><br><span class="line">        observer.activeStateChanged(<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//mVersion是在livedata的构造里创建的 只有当observer.mLastVersion 小于mVersion的时候才会进行分发</span></span><br><span class="line">    <span class="keyword">if</span> (observer.mLastVersion &gt;= mVersion) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//这里是分发后，要把mLastVersion 和mVersion进行同步赋值</span></span><br><span class="line">    observer.mLastVersion = mVersion;</span><br><span class="line">  <span class="comment">//这里才是真正的分发回调onChaned 把livedata里的泛型数据传入进去</span></span><br><span class="line">    observer.mObserver.onChanged((T) mData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>livedata中还有一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">observeForever</span><span class="params">(<span class="meta">@NonNull</span> Observer&lt;? <span class="keyword">super</span> T&gt; observer)</span> </span>&#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;observeForever&quot;</span>);</span><br><span class="line">    AlwaysActiveObserver wrapper = <span class="keyword">new</span> AlwaysActiveObserver(observer);</span><br><span class="line">    ObserverWrapper existing = mObservers.putIfAbsent(observer, wrapper);</span><br><span class="line">    <span class="keyword">if</span> (existing <span class="keyword">instanceof</span> LiveData.LifecycleBoundObserver) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot add the same observer&quot;</span></span><br><span class="line">                + <span class="string">&quot; with different lifecycles&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (existing != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    wrapper.activeStateChanged(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果注册了这个方法，在宿主被销毁时，livedata是不会帮我们反注册的，需要我们自行去调用removeObserver</p><p>接着来看postValue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> postTask;</span><br><span class="line">    <span class="keyword">synchronized</span> (mDataLock) &#123;</span><br><span class="line">        postTask = mPendingData == NOT_SET;</span><br><span class="line">        mPendingData = value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!postTask) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ArchTaskExecutor.getInstance().postToMainThread(mPostValueRunnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果当前在子线程中，则必须调用postvalue 不能调用 setvalue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">    assertMainThread(<span class="string">&quot;setValue&quot;</span>);</span><br><span class="line">  <span class="comment">//新的数据需要进行分发，这里mLastVersion就小于mVersion了，可以进行分发，如果调用了onChanged的，消费了这个事件和数据，mLastVersion就同步了</span></span><br><span class="line">    mVersion++;</span><br><span class="line">    mData = value;</span><br><span class="line">    dispatchingValue(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dispatchingValue 传了null值  这个要区别于上面activeStateChanged中的dispatchingValue </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatchingValue</span><span class="params">(<span class="meta">@Nullable</span> ObserverWrapper initiator)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mDispatchingValue) &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    mDispatchingValue = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        mDispatchInvalidated = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (initiator != <span class="keyword">null</span>) &#123;</span><br><span class="line">            considerNotify(initiator);</span><br><span class="line">            initiator = <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//这里传了null 所以，走下面的这个逻辑  遍历这个observers </span></span><br><span class="line">          <span class="comment">//这个observers就是我们之前addObserver添加进去的</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;Map.Entry&lt;Observer&lt;? <span class="keyword">super</span> T&gt;, ObserverWrapper&gt;&gt; iterator =</span><br><span class="line">                    mObservers.iteratorWithAdditions(); iterator.hasNext(); ) &#123;</span><br><span class="line">              <span class="comment">//遍历之后，就会调用considerNoity进行数据的分发，调用onChanged</span></span><br><span class="line">                considerNotify(iterator.next().getValue());</span><br><span class="line">                <span class="keyword">if</span> (mDispatchInvalidated) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (mDispatchInvalidated);</span><br><span class="line">    mDispatchingValue = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>livedata 这个方法，判断是否有活跃的观察者</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasActiveObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mActiveCount &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看下livedata的子类，实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MutableLiveData</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">LiveData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MutableLiveData</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MutableLiveData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.postValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个类好像什么都没做，只是复写了postvalue和setvalue并把方法改成了public而已，那么原因是什么？</p><blockquote><p>因为livedata作为数据发送组件，必定是一方发送一方接收，不能既发送又接收，所以MutableLiveData 是为了规避这个问题才存在的，只有拿到的对象是MutableLiveData它才能进行一个数据的发送</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;什么是&lt;code&gt;LiveData&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiveData&lt;/code&gt;几种衍生类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiveData&lt;/code&gt;核心方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LiveData&lt;/code&gt;实现原理&lt;</summary>
      
    
    
    
    <category term="Jetpack系列" scheme="http://example.com/categories/Jetpack%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="Jetpack" scheme="http://example.com/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>提升海量用户极致体验的Hybrid架构设计[转]</title>
    <link href="http://example.com/2022/03/18/[%E8%BD%AC]%E6%8F%90%E5%8D%87%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E6%9E%81%E8%87%B4%E4%BD%93%E9%AA%8C%E7%9A%84%20Hybrid%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/"/>
    <id>http://example.com/2022/03/18/[%E8%BD%AC]%E6%8F%90%E5%8D%87%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E6%9E%81%E8%87%B4%E4%BD%93%E9%AA%8C%E7%9A%84%20Hybrid%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</id>
    <published>2022-03-17T20:23:47.000Z</published>
    <updated>2022-05-12T07:29:40.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.infoq.cn/article/5DHTP6xjkMbNmo49Rd2x">原文链接</a></p><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>上一篇原理篇，我们已经详细地阐述了 Hybrid App 的基础原理，了解了 Native 端 和 H5 端 是如何通信的，还有 bridge 的设计和接入。而本篇文章将开始把这些原因进一步实践，用代码真正地去实现一套完整且稳定的 Hybrid 方案。如果对原理还有疑问的小伙伴，请移步提升海量用户极致体验的 Hybrid 架构设计（原理篇），只有在理解了理论的基础上，进一步与实践相结合，才能真正地去深入一项技术。</p><h3 id="摩天大楼"><a href="#摩天大楼" class="headerlink" title="摩天大楼"></a>摩天大楼</h3><p>说了那么一大堆理论知识，可能有小伙伴会说：“ 你是不是吹流弊啊。”那就先来简单介绍下我们已经使用这套方案落地的项目之一。</p><p><img src="https://static001.infoq.cn/resource/image/62/55/62ed934a1336363916dc24cd6cd3c555.jpg" alt="img"></p><p>这是一个完全内置在 App 里的 Hybrid 模块，由 Native 与 H5 深度协作完成，总共有 4 个页面，其中首页和制作页由 H5 制作，而相机页和保存页是复用 Native 页面。</p><p>项目上线一年累积使用次数已经超过 10 亿次。这套方案经受住了考验，并在过程中仍然在不断的优化和拓展。</p><p>使用这套实现方案是基于以下几点考虑：</p><ul><li>整个模块的风格多变，整体 UI 是与妆容所搭配的，而整个模块一直都在持续不断的迭代之中；</li><li>项目逻辑流程的可变性大，需要 H5 强大的热更新能力，及时应对数据的变化，快速的试错和纠正；</li><li>拍摄页与保存页是客户端已经有的模块，可以略微定制后直接复用；</li><li>需要由客户端协助接入多套 SDK，例如使用算法 SDK 进行复杂的图像处理。</li><li>简单看完项目，我们接下来开始 bridge.js 的构建。由于本系列文章主要面向前端童鞋，因此我们主要展开 H5 的部分，即会注入到每个页面头部的 bridge.js 的实现，客户端中的 SDK 部分就不详细解构了，只会提到一些细节。</li></ul><h3 id="搭建地基-—-bridge-js-架构"><a href="#搭建地基-—-bridge-js-架构" class="headerlink" title="搭建地基 — bridge.js 架构"></a>搭建地基 — bridge.js 架构</h3><p>基于上篇文章阐述的结构，我们进一步去完善细节部分，先整理成下面这样的流程结构图，大家先看下图，有个大致的概念：</p><p><img src="https://static001.infoq.cn/resource/image/f5/59/f54a2b8dfe8d21480d5ac35082ed1059.jpg" alt="img"></p><p>接下来我们会细看里面各个部分的代码实现。</p><h4 id="一-业务方使用姿势"><a href="#一-业务方使用姿势" class="headerlink" title="(一) 业务方使用姿势"></a>(一) 业务方使用姿势</h4><p>首先，我们先看下在这套方案中，业务方是如何使用的，下面以获取网络状态为例：</p><p><img src="https://static001.infoq.cn/resource/image/ad/04/adafcb982014f1ad2becf711d66edc04.jpg" alt="img"></p><h4 id="二-H5-–-gt-Native"><a href="#二-H5-–-gt-Native" class="headerlink" title="(二) H5 –&gt; Native"></a>(二) H5 –&gt; Native</h4><p>接下来直接来看 nativeCall 的内部实现：</p><p><img src="https://static001.infoq.cn/resource/image/d8/d9/d8aaff5b8f7901c9c3bb0a5d4c2370d9.jpg" alt="img"></p><p>里面可以解构成下面 4 个步骤:</p><p>1.生成唯一 handler 标识，从 0 开始累加；</p><p>2.将参数按 handler 值的规则存入参数池(_paramsStore)中；</p><p>3.以 handler 注册自定义事件，绑定 callback，并将 callback 也存入 _callbackStore 中，addEvent()，储存的目的主要是为了事件解绑时使用；</p><p>4.以 iframe 的形式发送协议，并携带唯一标识 handler，send()；</p><p><img src="https://static001.infoq.cn/resource/image/34/fb/3451bc822f66561a8634c459bee34bfb.jpg" alt="img"></p><p>Native:</p><ul><li>客户端接收到请求后，会使用 handler 调用 getParam 从参数池中获取对应的参数。</li><li><img src="https://static001.infoq.cn/resource/image/ff/65/ff4c092674a99fcd263c57e9a3099565.jpg" alt="img"></li><li>执行协议对应的功能；</li><li>这样即走通了 H5 –&gt; Native 的这个流程，在客户端完成了对应的功能后，既开始回传执行结果。</li></ul><h4 id="三-Native-–-gt-H5"><a href="#三-Native-–-gt-H5" class="headerlink" title="(三) Native –&gt; H5"></a>(三) Native –&gt; H5</h4><p>Native：</p><p>Native 完成功能后，直接调用 Bridge.postMessage(handler, data)，将 执行结果 和 之前 nativeCall 传过来的 标识 回传给 H5；</p><p><img src="https://static001.infoq.cn/resource/image/0b/ca/0be7c175fc4ab0140a8db81bc2898aca.jpg" alt="img"></p><p>H5：</p><ul><li>H5 在接收到唯一标识后初始化对应的自定义事件，挂载数据后触发，这里涉及的就是 fireEvent 这个函数:</li><li><img src="https://static001.infoq.cn/resource/image/0b/ca/0be7c175fc4ab0140a8db81bc2898aca.jpg" alt="img"></li><li>这样，我们就已经完成了双端之间的双向交互机制了，梳理出了整个 bridge.js 的核心代码了，包含了：</li><li>最重要的开放 API: nativeCall 与 postMessage ；</li><li>客户端获取参数函数: getParam ；</li><li>事件回调系统中的 addEvent 和 fireEvent ；</li><li>用于发送协议的 send。</li></ul><h3 id="安卓兼容性"><a href="#安卓兼容性" class="headerlink" title="安卓兼容性"></a>安卓兼容性</h3><p>如果看过上一篇提升海量用户极致体验的 Hybrid 架构设计（原理篇）的童鞋，这时可能会有个疑问：在 Android 4.4 以下时，使用的 loadUrl 进行 js 函数的调用，而此时是无法获取函数的返回值的，也就是说 4.4- 时，安卓并无法通过 getParam 这个函数来获取到协议的参数，这里需要做兼容性的处理，而我们这里可以使用一个曲线救国的骚操作，使用到的原理就是上一篇文章中有提到的另一种 H5 -&gt; Native 的方案：WebView 中的 prompt 拦截</p><p>方案如下:</p><ul><li>当安卓接受到协议，并拿到 handler 值；</li><li>使用无兼容性问题的 loadUrl 执行 js：Bridge.getParam(handler) ，直接将返回值直接通过 js 中的 prompt 发出：</li><li><img src="https://static001.infoq.cn/resource/image/7d/56/7d4aa27dd4ac6036993d7255a3d25756.jpg" alt="img"></li><li>通过重写 onJsPrompt 这个方法，拦截上一步发出的 prompt 的内容，并解析出相应的参数；</li><li><img src="https://static001.infoq.cn/resource/image/d1/85/d1c4904ff723ce0f0de5d2408d289685.jpg" alt="img"></li></ul><p>通过这样的方式，安卓全平台都可以完成参数的获取，并且方式统一，不需要分平台兼容，这就非常的 skrskr 啦。</p><p>现在看下来，是不是觉得炒鸡简单？。分分钟能写 100 个。没错！其实核心的原理就是这么的简单，但这只是一个最基础的地基而已，而基于地基之上，我们就可以开始一层一层建造我们的大楼了！</p><h3 id="建造大楼-—-协议的定制"><a href="#建造大楼-—-协议的定制" class="headerlink" title="建造大楼 — 协议的定制"></a>建造大楼 — 协议的定制</h3><p>在完成最基础的架构后，我们就可以开始来进一步完成一些上层建筑了，制定一系列真正开放给业务方使用的协议 API，完善整套方案。</p><p>首先我们可以将这些协议分成 功能协议 和 业务协议。</p><h3 id="功能协议"><a href="#功能协议" class="headerlink" title="功能协议"></a>功能协议</h3><p>这类协议是指用于完善整套方案的基础功能的一些通用协议，以 command:&#x2F;&#x2F;作为通用头，封装在 SDK 之中，可以在全线 App、全线 WebView 中使用：</p><h4 id="1-初始化机制"><a href="#1-初始化机制" class="headerlink" title="1.初始化机制"></a>1.初始化机制</h4><p>上篇文章有提到由于 bridge.js 注入的异步性，我们需要由客户端在注入完成后通知 H5。</p><p>这里我们可以约定一个通用的初始化事件，这里我们约定为 <em>init</em>，因此前端就可以进行入口的监听, 类似于我们常用的 DOMContentLoaded:</p><p><img src="https://static001.infoq.cn/resource/image/e6/b5/e61a71943ab3bbbb8d21a0dc27fa09b5.jpg" alt="img"></p><p>大家可以看到，这里用了个标记位用于避免事件被重复触发，这是由于客户端中是通过监听 WebView 的生命周期钩子来触发的，而 iframe 之类的操作会导致这些钩子的多次触发，因此需要双方各做一层防御性措施。</p><p>接下来，我们可以通过该事件，直接初始化传给 H5 一些环境参数和系统信息等，下面是我们使用到的：</p><p><img src="https://static001.infoq.cn/resource/image/cf/1f/cf5b40ef0c8355b766288e53967d9a1f.jpg" alt="img"></p><p>同样的，我们可以约定更多的页面生命周期事件，例如因为 App 很经常性的隐藏到后台，因此在被激活时，我们可以设置个生命周期: <em>resume</em>，可以用于告知 H5 页面被激活。</p><p>Tips:</p><p>这里就能体现出我们通过事件机制来作为回调系统的优势了，我们可以以最习惯的方式进行事件的监听，而客户端可以直接使用 bridge.fireEvent(‘<em>init</em>’, data)触发事件，这样便可以优雅地实现 Native -&gt; H5 的单方向交互。</p><h4 id="2-打包机制"><a href="#2-打包机制" class="headerlink" title="2.打包机制"></a>2.打包机制</h4><p>Hybrid 模块 的其中一种方式是将前端代码打包后内置于 App 本地，以便拥有最快的启动性能和离线访问能力。而这种方式最大的麻烦点，就是代码的更新，我们不可能每次有修改时就手动重新打包给客户端童鞋替换，而且这样也失去了我们的热更新机制。</p><p>因此这里就需要一套新的热更新机制，这套机制需要由客户端&#x2F;前端&#x2F;服务端 三端的童鞋提供对应的资源，共同协作完成整套流程。</p><p>资源：</p><ul><li>H5: 每个代码包都有一个唯一且递增的版本号；</li><li>Native: 提供包下载且解压到对应目录的服务，前端可以由下面这个协议来调用该功能。</li><li><img src="https://static001.infoq.cn/resource/image/b2/24/b2c03548947c032a4ee194a8ddf78424.jpg" alt="img"></li><li>服务端: 提供一个接口，可以获取线上最新代码包的版本号和下载地址。</li><li>流程：</li><li>前端更新代码打包后按版本号上传至指定的服务器上；</li><li>每次打开页面时，H5 请求接口获取线上最新代码包版本号，并与本地包进行版本号比对，当线上的版本号 大于 本地包版本号时，发起包下载协议：</li><li>客户端接受到协议后，直接去线上地址下载最新的代码包，并解压替换到当前目录文件。</li><li>拥有这样的机制后，H5 在开发后，就可以直接打包将包上传到对应的服务器上，这样在 App 中打开页面后，即可以实时的热更新。</li></ul><h4 id="3-环境系统-和-多语言系统"><a href="#3-环境系统-和-多语言系统" class="headerlink" title="3.环境系统 和 多语言系统"></a>3.环境系统 和 多语言系统</h4><p>通常，我们会将项目分成多个不同的环境，相互隔离。而由于 Hybrid 模块是置于 App 中的，因此环境需要与 App 进行匹配，这里就可以直接使用上面第一点提到的，通过 <em>init</em> 中携带的数据 data.env 来匹配：</p><blockquote><p>env: 0 - 正式环境； 1 - 测试环境； 2 - 开发环境；</p><p>同理， 多语言也可以直接使用 e.data.language 直接进行匹配；</p><p>Tips：</p><p>环境机制我们通常主要用于匹配后端的环境，正式环境和测试环境对应不同的接口。而这里还有一点特别的，就是需要注意代码包的更新，上述的包更新条件要包含三个方面: 版本号、环境和 App 版本，在不同环境不同 App 版本下，也应该更新到相应的最新代码包。</p></blockquote><h4 id="4-事件中转站"><a href="#4-事件中转站" class="headerlink" title="4. 事件中转站"></a>4. 事件中转站</h4><p>由于页面是 H5 开发，而 Native 可能需要控制 H5 页面，例如最常用的场景:</p><p>当页面中有弹窗或者 SPA 切换页面时，安卓的返回实体键应该能完成对应的回退，而不是因为 WebView 没有 history 就直接关闭。</p><p>类似于这类需求，这里就可以定制一个事件中心(<em>eventListeners</em> )，用于监听客户端的实体返回键：</p><p><img src="https://static001.infoq.cn/resource/image/74/23/74c741285607493320ac9a37fa8dc423.jpg" alt="img"></p><h4 id="5-数据传递机制"><a href="#5-数据传递机制" class="headerlink" title="5. 数据传递机制"></a>5. 数据传递机制</h4><p>在业务中，很多场景需要做到 Native 与 H5 保持数据的同步，此时就可以使用类似上面的原理，制定一套数据传递协议:</p><p><img src="https://static001.infoq.cn/resource/image/97/0e/97900a687b94670ed17acd2e4bc5070e.jpg" alt="img"></p><p>Tips：</p><p>Hybrid 模块通常需要从对应的入口进入，因此这里有一种可以优化的方式：</p><p>由 App 在启动时先去获取线上数据，在进入 WebView 后直接通过 <em>init</em> 或者触发 getData 直接发送给 H5，这样能减少请求数量，优化用户体验。</p><h4 id="6-代理请求"><a href="#6-代理请求" class="headerlink" title="6. 代理请求"></a>6. 代理请求</h4><p>H5 中最常用的就是请求，通常我们可以直接使用 ajax，但是这里有几个问题比较棘手:</p><ul><li>最常见的请求跨域；</li><li>数据算法加密；</li><li>用户登录校验；</li><li>而客户端的请求便不会出现这些问题，因此我们可以由客户端代理我们发出的请求，可以定制 4 个协议: getProxy，postProxy， getProxyLogined，postProxyLogined，其中带有 Logined 的协议代表着在请求时会自动携带已登录用户的 token 和 uid 等参数，使用在一些需要登录信息的接口上。这样做的好处是：</li><li>H5 方就无需处理繁多的各项复杂信息，不需要进行跨端传输；</li><li>能够对 H5 与 Native 的请求出口进行统一，方便加工处理。</li><li><img src="https://static001.infoq.cn/resource/image/50/4a/50e6a9e84ffb25172b124337555d404a.jpg" alt="img"></li></ul><h4 id="7-更多"><a href="#7-更多" class="headerlink" title="7.更多"></a>7.更多</h4><p>除了这些重要的功能外，我们还可以非常自由地定制很多协议，让 H5 拥有更多更强大的功能，下面是我们所定制的一些功能：</p><ul><li>getNetwork：获取网络状态；</li><li>openApp：唤起其它 App；</li><li>setShareInfo 与 callShare：分享内容到第三方平台；</li><li>link：使用新的 WebView 打开页面；</li><li>closeWebview：关闭 WebView；</li><li>setStorage 与 getStorage：设置与获取缓存数据；</li><li>loading：调用客户端通用 Loading；</li><li>setWebviewTitle：设置 WebView 标题；</li><li>saveImage：保存图片到本地；</li><li>…</li><li>这里可以定义更多的通用性协议，这里有个原则可以遵守，即这部分协议应该是基础性功能，应该是纯净的，适用于所有的业务方。根据上篇文章提到的理念，这部分是当成通用 SDK 进行维护与升级的，因此不应该耦合业务层的任何逻辑。</li><li>而有时我们会遇到需要定制一些业务上的逻辑，例如上面提到的项目中，我们要将用户图片通过算法处理成卡通画。这样的需求就是非常的业务化，不适用于其它项目，因此我们应该定制成业务协议。</li></ul><h3 id="业务协议"><a href="#业务协议" class="headerlink" title="业务协议"></a>业务协议</h3><p>这类协议区别于功能协议，它们会杂合一定程度的业务逻辑，而这些逻辑只是针对于特定的项目。其实对于 H5 的使用上，差别并不大，只是使用对应特殊的协议头用于区分，例如:</p><p><img src="https://static001.infoq.cn/resource/image/25/f1/259b6e0441914c490f268d415f0b6ef1.jpg" alt="img"></p><p>这类协议通常不包含在 SDK 中，因此需要由客户端的童鞋针对项目的 WebView 进行定制，使用 bridge.js 提供的基础功能实现对应的复杂功能。而在其它的项目入口中，就无法使用这些协议。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>看到总结两个字，有没有长舒了一口气。通过这两篇文章，我们终于将 Hybrid 方案的前端部分完全的解构清楚了，是不是有种神清气爽的感觉，完全可以马上开启你们的 Hybrid 之旅了。鼓掌鼓掌！</p><p>但这也远非终点，或者说这永无终点。~大楼建成后，离真正的摩天大楼还是差着一步 — 内部装修，其实接下来我们还需要做很多的优化措施，来解决一些仍然存在的问题，这部分其实我们也一直还在努力的阶段。</p><p>受篇幅所限，有时间会将这部分再写一篇优化篇，主要来与大家探讨下我们所能想到的一些优化方案，非常期待大佬们也能给我们提供更多的建议和解决办法。感恩~~😇</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/5DHTP6xjkMbNmo49Rd2x&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
    <category term="webview" scheme="http://example.com/tags/webview/"/>
    
    <category term="hybrid" scheme="http://example.com/tags/hybrid/"/>
    
  </entry>
  
  <entry>
    <title>提升海量用户极致体验的Hybrid架构设计（原理篇）[转]</title>
    <link href="http://example.com/2022/03/17/[%E8%BD%AC]%E6%8F%90%E5%8D%87%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E6%9E%81%E8%87%B4%E4%BD%93%E9%AA%8C%E7%9A%84%20Hybrid%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/"/>
    <id>http://example.com/2022/03/17/[%E8%BD%AC]%E6%8F%90%E5%8D%87%E6%B5%B7%E9%87%8F%E7%94%A8%E6%88%B7%E6%9E%81%E8%87%B4%E4%BD%93%E9%AA%8C%E7%9A%84%20Hybrid%20%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%EF%BC%88%E5%8E%9F%E7%90%86%E7%AF%87%EF%BC%89/</id>
    <published>2022-03-16T20:23:47.000Z</published>
    <updated>2022-05-12T07:31:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.infoq.cn/article/wC28rP1xA47vI9dlSm3z">原文链接</a></p><h3 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h3><p>随着 Web 技术和移动设备的快速发展，Hybrid 技术已经成为一种最主流最常见的方案。一套好的 Hybrid 架构方案能让 App 既能拥有极致的体验和性能，同时也能拥有 Web 技术灵活的开发模式、跨平台能力以及热更新机制，想想是不是都鸡冻不已…本系列文章是美图公司在这方面实践的一个总结，包含了原理解析、方案选型与实现、实践优化等方面。</p><p>大家可以到 github (<a href="https://github.com/xd-tayde/blog/blob/master/hybrid-1.md)%E4%B8%8A%E5%92%8C%E4%BD%9C%E8%80%85%E8%BF%9B%E8%A1%8C%E8%AE%A8%E8%AE%BA%E5%93%88%EF%BC%81">https://github.com/xd-tayde/blog/blob/master/hybrid-1.md)上和作者进行讨论哈！</a></p><h3 id="二、现有混合方案"><a href="#二、现有混合方案" class="headerlink" title="二、现有混合方案"></a>二、现有混合方案</h3><p>Hybrid App，俗称混合应用，即混合了 Native 技术 与 Web 技术进行开发的移动应用。现在比较流行的混合方案主要有三种，主要是在 UI 渲染机制上的不同：</p><p>1.基于 WebView UI 的基础方案，市面上大部分主流 App 都有采用，例如微信 JS-SDK ，通过 JSBridge 完成 H5 与 Native 的双向通讯，从而赋予 H5 一定程度的原生能力。</p><p>2.基于 Native UI 的方案，例如 React-Native、Weex。在赋予 H5 原生 API 能力的基础上，进一步通过 JSBridge 将 js 解析成的虚拟节点树( Virtual DOM )传递到 Native 并使用原生渲染。</p><p>3.另外还有近期比较流行的小程序方案，也是通过更加定制化的 JSBridge，并使用双 WebView 双线程的模式隔离了 JS 逻辑与 UI 渲染，形成了特殊的开发模式，加强了 H5 与 Native 混合程度，提高了页面性能及开发体验。</p><p>以上的三种方案，其实同样都是基于 JSBridge 完成的通讯层，第二三种方案，其实可以看做是在方案一的基础上，继续通过不同的新技术进一步提高了应用的混合程度。因此，JSBridge 也是整个混合应用最关键的部分，例如我们在设置微信分享时用到的 JS-SDK，wx 对象便是我们最常见的 JSBridge:</p><p><img src="https://static001.infoq.cn/resource/image/8c/2a/8cf4664c3861d72213ed9e1a47f3da2a.jpg" alt="img"></p><h3 id="三、方案选型"><a href="#三、方案选型" class="headerlink" title="三、方案选型"></a>三、方案选型</h3><p>任何技术方案的选型，其实都应该基于使用场景和现有条件。基于公司现有情况的几点考虑，在方案一上进一步优化，更加适合我们的需求。</p><ul><li>需求 Web 技术 快速迭代、灵活开发的特点和线上热更新的机制。</li><li>产品的核心能力是强大的拍照与底层图片处理能力，因此单纯的 H5 技术能做的事非常有限，不能满足需求，通过 Hybrid 技术来强化 H5 ，便是一种必需。</li><li>公司业务上，并没有非常复杂的 UI 渲染需求，而且 App 中的一系列原生 UI 组件 已经非常成熟，因此我们并不强需类似 RN 这样的方案。</li></ul><p>因此，如何既能利用 H5 强大的开发和迭代能力，又能赋予 H5 强大的底层能力和用户体验，同时能复用现有的成熟 Native 组件，便成为了我们最大的需求点 – 一套完整又强大的 Hybrid 技术架构方案。</p><h3 id="四、Hybrid-技术原理"><a href="#四、Hybrid-技术原理" class="headerlink" title="四、Hybrid 技术原理"></a>四、Hybrid 技术原理</h3><p>Hybrid App 的本质，其实是在原生的 App 中，使用 WebView 作为容器直接承载 Web 页面。因此，最核心的点就是 Native 端与 H5 端之间的双向通讯层，其实这里也可以理解为我们需要一套跨语言通讯方案，来完成 Native(Java&#x2F;Objective-c&#x2F;…) 与 JavaScript 的通讯。这个方案就是我们所说的 JSBridge，而实现的关键便是作为容器的 WebView，一切的原理都是基于 WebView 的机制。</p><p><img src="https://static001.infoq.cn/resource/image/d2/65/d241622ca2f60b9c8d28ba1953ddc265.jpg" alt="img"></p><h4 id="4-1-JavaScript-通知-Native"><a href="#4-1-JavaScript-通知-Native" class="headerlink" title="4.1 JavaScript 通知 Native"></a>4.1 JavaScript 通知 Native</h4><p>基于 WebView 的机制和开放的 API , 实现这个功能有三种常见的方案：</p><ul><li>API 注入，原理其实就是 Native 获取 JavaScript 环境上下文，并直接在上面挂载对象或者方法，使 js 可以直接调用，Android 与 IOS 分别拥有对应的挂载方式。</li><li>WebView 中的 prompt&#x2F;console&#x2F;alert 拦截，通常使用 prompt ，因为这个方法在前端中使用频率低，比较不会出现冲突；</li><li>WebView URL Scheme 跳转拦截；</li></ul><p>第二三种机制的原理是类似的，都是通过对 WebView 信息冒泡传递的拦截，从而达到通讯的，接下来我们主要从 原理-定制协议-拦截协议-参数传递-回调机制 5 个方面详细阐述下第三种方案 – URL 拦截方案。</p><h5 id="4-1-1-实现原理"><a href="#4-1-1-实现原理" class="headerlink" title="4.1.1 实现原理"></a>4.1.1 实现原理</h5><p>在 WebView 中发出的网络请求，客户端都能进行监听和捕获</p><h5 id="4-1-2-协议的定制"><a href="#4-1-2-协议的定制" class="headerlink" title="4.1.2 协议的定制"></a>4.1.2 协议的定制</h5><p>我们需要制定一套 URL Scheme 规则，通常我们的请求会带有对应的协议开头，例如常见的 <a href="https://xxx.com/">https://xxx.com</a> 或者 file:&#x2F;&#x2F;1.jpg ，代表着不同的含义。我们这里可以将协议类型的请求定制为:</p><blockquote><p>xxcommand:&#x2F;&#x2F;xxxx?param1&#x3D;1&amp;param2&#x3D;2</p></blockquote><p>这里有几个需要注意点的是:</p><p>(1) xxcommand:&#x2F;&#x2F; 只是一种规则，可以根据业务进行制定，使其具有含义，例如我们定义 xxcommand:&#x2F;&#x2F; 为公司所有 App 系通用，为通用工具协议：</p><blockquote><p>xxcommand:&#x2F;&#x2F;getProxy?h&#x3D;1</p><p>而定义 xxapp:&#x2F;&#x2F; 为每个 App 单独的业务协议。</p><p>xxapp:&#x2F;&#x2F;openCamera?h&#x3D;2</p><p>不同的协议头代表着不同的含义，这样便能清楚知道每个协议的适用范围。</p></blockquote><p>(2) 这里不要使用 location.href 发送，因为其自身机制有个问题是同时并发多次请求会被合并成为一次，导致协议被忽略，而并发协议其实是非常常见的功能。我们会使用创建 iframe 发送请求的方式。</p><p>(3) 通常考虑到安全性，需要在客户端中设置域名白名单或者限制，避免公司内部业务协议被第三方直接调用。</p><h5 id="4-1-3-协议的拦截"><a href="#4-1-3-协议的拦截" class="headerlink" title="4.1.3 协议的拦截"></a>4.1.3 协议的拦截</h5><p>客户端可以通过 API 对 WebView 发出的请求进行拦截：</p><ul><li>IOS 上: shouldStartLoadWithRequest</li><li>Android: shouldOverrideUrlLoading</li></ul><p>当解析到请求 URL 头为制定的协议时，便不发起对应的资源请求，而是解析参数，并进行相关功能或者方法的调用，完成协议功能的映射。</p><h5 id="4-1-4-协议回调"><a href="#4-1-4-协议回调" class="headerlink" title="4.1.4 协议回调"></a>4.1.4 协议回调</h5><p>由于协议的本质其实是发送请求，这属于一个异步的过程，因此我们便需要处理对应的回调机制。这里我们采用的方式是 JS 的事件系统，这里我们会用到 window.addEventListener 和 window.dispatchEvent 这两个基础 API；</p><ul><li>1.发送协议时，通过协议的唯一标识注册自定义事件，并将回调绑定到对应的事件上。</li><li>2.客户端完成对应的功能后，调用 Bridge 的 dispatch API ，直接携带 data 触发该协议的自定义事件。</li><li><img src="https://static001.infoq.cn/resource/image/16/75/160be3b376cb8f959673cb98ecd72375.jpg" alt="img"></li><li>通过事件的机制，会让开发更符合我们前端的习惯，例如当你需要监听客户端的通知时，同样只需要在通过 addEventListener 进行监听即可。</li><li>Tips: 这里有一点需要注意的是，应该避免事件的多次重复绑定，因此当唯一标识重置时，需要 removeEventListener 对应的事件。</li></ul><h5 id="4-1-5-参数传递方式"><a href="#4-1-5-参数传递方式" class="headerlink" title="4.1.5 参数传递方式"></a>4.1.5 参数传递方式</h5><p>由于 WebView 对 URL 会有长度的限制，因此常规的通过 search 参数 进行传递的方式便具有一个问题，既 当需要传递的参数过长时，可能会导致被截断，例如传递 base64 或者传递大量数据时。</p><p>因此我们需要制定新的参数传递规则，我们使用的是函数调用的方式。这里的原理主要是基于:Native 可以直接调用 JS 方法并直接获取函数的返回值。</p><p>我们只需要对每条协议标记一个唯一标识，并把参数存入参数池中，到时客户端再通过该唯一标识从参数池中获取对应的参数即可。</p><h4 id="4-2-Native-通知-Javascript"><a href="#4-2-Native-通知-Javascript" class="headerlink" title="4.2 Native 通知 Javascript"></a>4.2 Native 通知 Javascript</h4><p>由于 Native 可以算作 H5 的宿主，因此拥有更大的权限，上面也提到了 Native 可以通过 WebView API 直接执行 Js 代码。这样的权限也就让这个方向的通讯变得十分的便捷。</p><ul><li>IOS: stringByEvaluatingJavaScriptFromString</li><li><img src="https://static001.infoq.cn/resource/image/30/ae/3082eaf8243d968b859843d1bddc67ae.jpg" alt="img"></li><li>Android: loadUrl (4.4-)</li><li><img src="https://static001.infoq.cn/resource/image/aa/d4/aa57c6161123ab1bf5a719d856864ad4.jpg" alt="img"></li><li>Tips: 当系统低于 4.4 时，evaluateJavascript 是无法使用的，因此单纯的使用 loadUrl 无法获取 JS 返回值，这时我们需要使用前面提到的 prompt 的方法进行兼容，让 H5 端 通过 prompt 进行数据的发送，客户端进行拦截并获取数据。</li><li>Android: evaluateJavascript (4.4+)</li><li><img src="https://static001.infoq.cn/resource/image/e2/41/e2f1f329be5db895309621d4e3770a41.jpg" alt="img"></li><li>基于上面的原理，我们已经明白 JSBridge 最基础的原理，并且能实现 Native &lt;&#x3D;&gt; H5 的双向通讯机制了。</li><li><img src="https://static001.infoq.cn/resource/image/47/b6/479d60fe2cb3fab82279f1d2135b48b6.jpg" alt="img"></li></ul><h4 id="4-3-JSBridge-的接入"><a href="#4-3-JSBridge-的接入" class="headerlink" title="4.3 JSBridge 的接入"></a>4.3 JSBridge 的接入</h4><p>接下来，我们来理下代码上需要的资源。实现这套方案，从上图可以看出，其实可以分为两个部分:</p><ul><li>JS 部分(bridge): 在 JS 环境中注入 bridge 的实现代码，包含了协议的拼装&#x2F;发送&#x2F;参数池&#x2F;回调池等一些基础功能。</li><li>Native 部分(SDK): 在客户端中 bridge 的功能映射代码，实现了 URL 拦截与解析&#x2F;环境信息的注入&#x2F;通用功能映射等功能。</li></ul><p>我们这里的做法是，将这两部分一起封装成一个 Native SDK，由客户端统一引入。客户端在初始化一个 WebView 打开页面时，如果页面地址在白名单中，会直接在 HTML 的头部注入对应的 bridge.js。这样的做法有以下的好处：</p><ul><li>双方的代码统一维护，避免出现版本分裂的情况。有更新时，只要由客户端更新 SDK 即可，不会出现版本兼容的问题；</li><li>App 的接入十分方便，只需要按文档接入最新版本的 SDK ，即可直接运行整套 Hybrid 方案，便于在多个 App 中快速的落地；</li><li>H5 端无需关注，这样有利于将 bridge 开放给第三方页面使用。</li></ul><p>这里有一点需要注意的是，协议的调用，一定是需要确保执行在 bridge.js 成功注入后。由于客户端的注入行为属于一个附加的异步行为，从 H5 方很难去捕捉准确的完成时机，因此这里需要通过客户端监听页面完成后，基于上面的事件回调机制通知 H5 端，页面中即可通过 window.addEventListener(‘bridgeReady’, e &#x3D;&gt; {})进行初始化。</p><h4 id="4-4-App-中-H5-的接入方式"><a href="#4-4-App-中-H5-的接入方式" class="headerlink" title="4.4 App 中 H5 的接入方式"></a>4.4 App 中 H5 的接入方式</h4><p>将 H5 接入 App 中通常有两种方式：在线 H5 和内置包 H5。</p><p>(1) 在线 H5，这是最常见的一种方式。我们只需要将 H5 代码部署到服务器上，只要把对应的 URL 地址 给到客户端，用 WebView 打开该 URL，即可嵌入。该方式的好处在于:</p><ul><li>独立性强，有非常独立的开发&#x2F;调试&#x2F;更新&#x2F;上线能力；</li><li>资源放在服务器上，完全不会影响客户端的包体积；</li><li>接入成本很低，完全的热更新机制。</li></ul><p>但相对的，这种方式也有对应的缺点:</p><ul><li>完全的网络依赖，在离线的情况下无法打开页面；</li><li>首屏加载速度依赖于网络，网络较慢时，首屏加载也较慢；</li></ul><p>通常，这种方式更适用在一些比较轻量级的页面上，例如一些帮助页、提示页、使用攻略等页面。这些页面的特点是功能性不强，不太需要复杂的功能协议，且不需要离线使用。在一些第三方页面接入上，也会使用这种方式，例如我们的页面调用微信 JS-SDK 。</p><p>(2) 内置包 H5，这是一种本地化的嵌入方式，我们需要将代码进行打包后下发到客户端，并由客户端直接解压到本地储存中。通常我们运用在一些比较大和比较重要的模块上。其优点是:</p><ul><li>由于其本地化，首屏加载速度快，用户体验更为接近原生；</li><li>可以不依赖网络，离线运行；</li></ul><p>但同时，它的劣势也十分明显:</p><ul><li>开发流程&#x2F;更新机制复杂化，需要客户端，甚至服务端的共同协作；</li><li>会相应的增加 App 包体积；</li></ul><p>这两种接入方式均有自己的优缺点，应该根据不同场景进行选择。</p><h3 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h3><p>本文主要解析了现在 Hybrid App 的发展现状和其基础原理，包含了</p><ul><li>JavaScript 通知 Native</li><li>Native 通知 Javascript</li><li>JSBridge 的接入</li><li>H5 的接入</li></ul><p>只有在了解了其最本质的实现原理后，才能对这套方案进行实现以及进一步的优化。接下来，我们将基于上面的理论，继续探讨如何把这套方案的真正代码实现以及方案优化方案，欢迎大家一起讨论！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.infoq.cn/article/wC28rP1xA47vI9dlSm3z&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、引言&quot;&gt;&lt;a href=&quot;#一、引言&quot; class=&quot;headerlink&quot; title=&quot;一、引言&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="web" scheme="http://example.com/categories/web/"/>
    
    
    <category term="webview" scheme="http://example.com/tags/webview/"/>
    
    <category term="hybrid" scheme="http://example.com/tags/hybrid/"/>
    
  </entry>
  
  <entry>
    <title>Android 实现水印背景效果[转]</title>
    <link href="http://example.com/2022/03/15/Android%20%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/"/>
    <id>http://example.com/2022/03/15/Android%20%E5%AE%9E%E7%8E%B0%E6%B0%B4%E5%8D%B0%E8%83%8C%E6%99%AF%E6%95%88%E6%9E%9C/</id>
    <published>2022-03-14T20:23:47.000Z</published>
    <updated>2022-05-13T00:19:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转-Android-实现水印背景效果"><a href="#转-Android-实现水印背景效果" class="headerlink" title="[转]Android 实现水印背景效果"></a>[转]Android 实现水印背景效果</h1><p>项目中有需要加水印的需求，实现完效果图是这样的</p><p><img src="https://img-blog.csdnimg.cn/2020112014501365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW95ZXpoYW5nbGl3ZWk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>什么看不清…<img src="https://img-blog.csdnimg.cn/20201120145255473.jpg" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20201120145321286.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYW95ZXpoYW5nbGl3ZWk=,size_16,color_FFFFFF,t_70" alt="img"></p><p>为了让大家看清效果，字体改了一下，正常应该是文章最上面那个的效果。话不多说，直接上代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.res.TypedArray;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Rect;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Typeface;</span><br><span class="line"><span class="keyword">import</span> android.text.TextPaint;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.hkdc.commonlib.R;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkView</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_SEPARATOR = <span class="string">&quot;///&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> TextPaint mTextPaint = <span class="keyword">new</span> TextPaint();</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> String[] mText;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextSize=<span class="number">35</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mTextBold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDx;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDy;</span><br><span class="line">    <span class="keyword">private</span> Paint.Align mAlign;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mSync;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> textWidth, textHeight;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaterMarkView</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaterMarkView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.WaterMarkView);</span><br><span class="line">        mDegrees = typedArray.getInt(R.styleable.WaterMarkView_water_mark_degree, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getDegrees() : -<span class="number">30</span>);</span><br><span class="line">        String text = typedArray.getString(R.styleable.WaterMarkView_water_mark_text);</span><br><span class="line">        <span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mText = text.split(DEFAULT_SEPARATOR);</span><br><span class="line">        &#125;</span><br><span class="line">        mTextColor = typedArray.getColor(R.styleable.WaterMarkView_water_mark_textColor, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getTextColor() : Color.parseColor(<span class="string">&quot;#33000000&quot;</span>));</span><br><span class="line">        mTextSize = typedArray.getDimensionPixelSize(R.styleable.WaterMarkView_water_mark_textSize, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getTextSize() : <span class="number">42</span>);</span><br><span class="line">        mTextBold = typedArray.getBoolean(R.styleable.WaterMarkView_water_mark_textBold, WaterMarkManager.INFO != <span class="keyword">null</span> &amp;&amp; WaterMarkManager.INFO.isTextBold());</span><br><span class="line">        mDx = typedArray.getDimensionPixelSize(R.styleable.WaterMarkView_water_mark_dx, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getDx() : <span class="number">100</span>);</span><br><span class="line">        mDy = typedArray.getDimensionPixelSize(R.styleable.WaterMarkView_water_mark_dy, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getDy() : <span class="number">240</span>);</span><br><span class="line">        <span class="keyword">int</span> align = typedArray.getInt(R.styleable.WaterMarkView_water_mark_align, WaterMarkManager.INFO != <span class="keyword">null</span> ? WaterMarkManager.INFO.getAlignInt() : <span class="number">1</span>);</span><br><span class="line">        mAlign = align == <span class="number">0</span> ? Paint.Align.LEFT : align == <span class="number">2</span> ? Paint.Align.RIGHT : Paint.Align.CENTER;</span><br><span class="line">        mSync = typedArray.getBoolean(R.styleable.WaterMarkView_water_mark_sync, <span class="keyword">true</span>);</span><br><span class="line">        typedArray.recycle();</span><br><span class="line"> </span><br><span class="line">        setBackgroundColor(Color.TRANSPARENT);</span><br><span class="line">        mTextPaint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        mTextPaint.setFlags(Paint.ANTI_ALIAS_FLAG);</span><br><span class="line">        mTextPaint.setColor(mTextColor);</span><br><span class="line">        mTextPaint.setTextSize(mTextSize);</span><br><span class="line">        mTextPaint.setTypeface(mTextBold ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);</span><br><span class="line">        mTextPaint.setTextAlign(mAlign);</span><br><span class="line"> </span><br><span class="line">        mText = mText == <span class="keyword">null</span> &amp;&amp; mSync ? WaterMarkManager.CONTENT : mText;</span><br><span class="line"> </span><br><span class="line">        textWidth = <span class="number">0</span>;</span><br><span class="line">        textHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mText != <span class="keyword">null</span> &amp;&amp; mText.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : mText) &#123;</span><br><span class="line">                Rect tvRect = <span class="keyword">new</span> Rect();</span><br><span class="line">                mTextPaint.getTextBounds(s, <span class="number">0</span>, s.length(), tvRect);</span><br><span class="line">                textWidth = textWidth &gt; tvRect.width() ? textWidth : tvRect.width();</span><br><span class="line">                textHeight += (tvRect.height() + <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            WaterMarkManager.LIST.add(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span> (mText != <span class="keyword">null</span> &amp;&amp; mText.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> measuredWidth = getMeasuredWidth();</span><br><span class="line">            <span class="keyword">int</span> measuredHeight = getMeasuredHeight();</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span> (measuredWidth == <span class="number">0</span> || measuredHeight == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">int</span> canvasLength = measuredWidth &gt; measuredHeight ? measuredWidth : measuredHeight;</span><br><span class="line"> </span><br><span class="line">            canvas.save();</span><br><span class="line">            canvas.rotate(mDegrees, measuredWidth / <span class="number">2</span>, measuredHeight / <span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line">            canvas.save();</span><br><span class="line">            <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">boolean</span> odd = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">while</span> (y &lt; canvasLength + textHeight) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = odd ? <span class="number">0</span> : -(textWidth + mDx) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">while</span> (x &lt; canvasLength + textWidth) &#123;</span><br><span class="line">                    drawTexts(mText, mTextPaint, canvas, x, y);</span><br><span class="line">                    x = x + textWidth + mDx;</span><br><span class="line">                &#125;</span><br><span class="line">                y = y + textHeight + mDy;</span><br><span class="line">                odd = !odd;</span><br><span class="line">            &#125;</span><br><span class="line">            canvas.restore();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawTexts</span><span class="params">(String[] ss, Paint paint, Canvas canvas, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">        Paint.FontMetrics fontMetrics = paint.getFontMetrics();</span><br><span class="line">        <span class="keyword">float</span> top = fontMetrics.top;</span><br><span class="line">        <span class="keyword">float</span> bottom = fontMetrics.bottom;</span><br><span class="line">        <span class="keyword">int</span> length = ss.length;</span><br><span class="line">        <span class="keyword">float</span> total = (length - <span class="number">1</span>) * (bottom - top) + (fontMetrics.descent - fontMetrics.ascent);</span><br><span class="line">        <span class="keyword">float</span> offset = total / <span class="number">2</span> - bottom;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            <span class="keyword">float</span> yAxis = -(length - i - <span class="number">1</span>) * (bottom - top) + offset;</span><br><span class="line">            canvas.drawText(ss[i], x, y + yAxis + <span class="number">10</span>, paint);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印文字内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文字内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String... text)</span> </span>&#123;</span><br><span class="line">        mText = text;</span><br><span class="line"> </span><br><span class="line">        textWidth = <span class="number">0</span>;</span><br><span class="line">        textHeight = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mText != <span class="keyword">null</span> &amp;&amp; mText.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String s : mText) &#123;</span><br><span class="line">                Rect tvRect = <span class="keyword">new</span> Rect();</span><br><span class="line">                mTextPaint.getTextBounds(s, <span class="number">0</span>, s.length(), tvRect);</span><br><span class="line">                textWidth = textWidth &gt; tvRect.width() ? textWidth : tvRect.width();</span><br><span class="line">                textHeight += (tvRect.height() + <span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印文字内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> text 文字内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncText</span><span class="params">(String... text)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setText(text);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印倾斜角度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> degrees 倾斜角度(默认:-30)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDegrees</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">        mDegrees = degrees;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印倾斜角度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> degrees 倾斜角度(默认:-30)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncDegrees</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setDegrees(degrees);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印字体颜色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textColor 字体颜色(默认:#33000000)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> textColor)</span> </span>&#123;</span><br><span class="line">        mTextColor = textColor;</span><br><span class="line">        mTextPaint.setColor(mTextColor);</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印字体颜色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textColor 字体颜色(默认:#33000000)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncTextColor</span><span class="params">(<span class="keyword">int</span> textColor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setTextColor(textColor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印字体大小（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textSize 字体大小(默认:42px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        mTextSize = textSize;</span><br><span class="line">        mTextPaint.setTextSize(<span class="number">30</span>);</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印字体大小（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textSize 字体大小(默认:42px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setTextSize(<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印字体是否粗体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textBold 是否粗体(默认:false)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextBold</span><span class="params">(<span class="keyword">boolean</span> textBold)</span> </span>&#123;</span><br><span class="line">        mTextBold = textBold;</span><br><span class="line">        mTextPaint.setTypeface(mTextBold ? Typeface.DEFAULT_BOLD : Typeface.DEFAULT);</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印字体是否粗体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textBold 是否粗体(默认:false)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncTextBold</span><span class="params">(<span class="keyword">boolean</span> textBold)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setTextBold(textBold);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印X轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dx X轴偏移量(默认:100px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDx</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDx = dx;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印X轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dx X轴偏移量(默认:100px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSyncDx</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setDx(dx);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印Y轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dy Y轴偏移量(默认:240px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDy</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mDy = dy;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印Y轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dy Y轴偏移量(默认:240px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSignDy</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setDy(dy);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印对齐方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> align 对齐方式(默认:Center)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlign</span><span class="params">(Paint.Align align)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAlign = align;</span><br><span class="line">        postInvalidate();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置水印对齐方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> align 对齐方式(默认:Center)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSignAlign</span><span class="params">(Paint.Align align)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            setAlign(align);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 销毁相关页面时调用（切记）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mSync) &#123;</span><br><span class="line">            WaterMarkManager.LIST.remove(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@SuppressLint(&quot;ClickableViewAccessibility&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;WaterMarkView&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_degree&quot;</span> <span class="attr">format</span>=<span class="string">&quot;integer|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_text&quot;</span> <span class="attr">format</span>=<span class="string">&quot;string|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_textColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_textSize&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_textBold&quot;</span> <span class="attr">format</span>=<span class="string">&quot;boolean&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_dx&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_dy&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension|reference&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_align&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">&quot;LEFT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">&quot;CENTER&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">enum</span> <span class="attr">name</span>=<span class="string">&quot;RIGHT&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> /&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">attr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;water_mark_sync&quot;</span> <span class="attr">format</span>=<span class="string">&quot;boolean&quot;</span> /&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hkdc.commonlib.warkmark;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> android.annotation.SuppressLint;</span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> com.hkdc.commonlib.R;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leon (wshk729@163.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/24</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkManager</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> WaterMarkInfo INFO = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> String[] CONTENT = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span> List&lt;WaterMarkView&gt; LIST = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置水印全局配置信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> info 配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(WaterMarkInfo info)</span> </span>&#123;</span><br><span class="line">        INFO = info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取一个满屏水印View</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressLint(&quot;InflateParams&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WaterMarkView <span class="title">getView</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (WaterMarkView) LayoutInflater.from(activity).inflate(R.layout.view_water_mark, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WaterMarkInfo初始化判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">assertInitialized</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (INFO == <span class="keyword">null</span>) &#123;</span><br><span class="line">            INFO = WaterMarkInfo.create().generate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印文字信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 文字信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(String... content)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        CONTENT = content;</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncText(content);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印倾斜角度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> degrees 倾斜角度(默认:-30)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDegrees</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setDegrees(degrees);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncDegrees(degrees);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印字体颜色</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textColor 字体颜色(默认:#33000000)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> textColor)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setTextColor(textColor);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncTextColor(textColor);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印字体大小（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textSize 字体大小(默认:42px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setTextSize(textSize);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncTextSize(textSize);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印字体是否粗体</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> textBold 是否粗体(默认:false)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextBold</span><span class="params">(<span class="keyword">boolean</span> textBold)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setTextBold(textBold);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncTextBold(textBold);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印X轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dx X轴偏移量(默认:100px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDx</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setDx(dx);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSyncDx(dx);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印Y轴偏移量（单位：px）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dy Y轴偏移量(默认:240px)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setDy</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setDy(dy);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSignDy(dy);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 同步设置全部水印对齐方式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> align 对齐方式(默认:Center)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setAlign</span><span class="params">(Paint.Align align)</span> </span>&#123;</span><br><span class="line">        assertInitialized();</span><br><span class="line">        INFO.setAlign(align);</span><br><span class="line">        <span class="keyword">if</span> (LIST.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WaterMarkView view : LIST) &#123;</span><br><span class="line">                <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    view.setSignAlign(align);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>view_water_mark.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">com.commonlib.WaterMarkView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Leon (wshk729@163.com)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2018/8/24</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkInfo</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDegrees;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextColor;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTextSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mTextBold;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDx;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDy;</span><br><span class="line">    <span class="keyword">private</span> Paint.Align mAlign;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">WaterMarkInfo</span><span class="params">(<span class="keyword">int</span> degrees, <span class="keyword">int</span> textColor, <span class="keyword">int</span> textSize, <span class="keyword">boolean</span> textBold, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy, Paint.Align align)</span> </span>&#123;</span><br><span class="line">        mDegrees = degrees;</span><br><span class="line">        mTextColor = textColor;</span><br><span class="line">        mTextSize = textSize;</span><br><span class="line">        mTextBold = textBold;</span><br><span class="line">        mDx = dx;</span><br><span class="line">        mDy = dy;</span><br><span class="line">        mAlign = align;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDegrees</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDegrees;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTextColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTextColor;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTextSize</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTextSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDx;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mDy;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> Paint.<span class="function">Align <span class="title">getAlign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAlign;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAlignInt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (mAlign) &#123;</span><br><span class="line">            <span class="keyword">case</span> LEFT:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> RIGHT:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTextBold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mTextBold;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDegrees</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">        mDegrees = degrees;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> textColor)</span> </span>&#123;</span><br><span class="line">        mTextColor = textColor;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">        mTextSize = textSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setTextBold</span><span class="params">(<span class="keyword">boolean</span> textBold)</span> </span>&#123;</span><br><span class="line">        mTextBold = textBold;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDx</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">        mDx = dx;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDy</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">        mDy = dy;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAlign</span><span class="params">(Paint.Align align)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mAlign = align;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Builder <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Builder();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mDegrees;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mTextColor;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mTextSize;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> mTextBold;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mDx;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> mDy;</span><br><span class="line">        <span class="keyword">private</span> Paint.Align mAlign;</span><br><span class="line"> </span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Builder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            mDegrees = -<span class="number">30</span>;</span><br><span class="line">            mTextColor = Color.parseColor(<span class="string">&quot;#33000000&quot;</span>);</span><br><span class="line">            mTextSize = <span class="number">35</span>;</span><br><span class="line">            mTextBold = <span class="keyword">false</span>;</span><br><span class="line">            mDx = <span class="number">100</span>;</span><br><span class="line">            mDy = <span class="number">240</span>;</span><br><span class="line">            mAlign = Paint.Align.CENTER;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字倾斜度</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> degrees 文字倾斜度(默认:-30)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDegrees</span><span class="params">(<span class="keyword">int</span> degrees)</span> </span>&#123;</span><br><span class="line">            mDegrees = degrees;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字颜色</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> textColor 文字颜色(默认:#33000000)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTextColor</span><span class="params">(<span class="keyword">int</span> textColor)</span> </span>&#123;</span><br><span class="line">            mTextColor = textColor;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字大小（单位：px）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> textSize 文字大小(默认:42px)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTextSize</span><span class="params">(<span class="keyword">int</span> textSize)</span> </span>&#123;</span><br><span class="line">            mTextSize = textSize;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字是否加粗</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> textBold 文字加粗(默认:false)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setTextBold</span><span class="params">(<span class="keyword">boolean</span> textBold)</span> </span>&#123;</span><br><span class="line">            mTextBold = textBold;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字X轴间距（单位：px）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> dx 文字X轴间距(默认:100px)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDx</span><span class="params">(<span class="keyword">int</span> dx)</span> </span>&#123;</span><br><span class="line">            mDx = dx;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字Y轴间距（单位：px）</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> dy 文字Y轴间距(默认:240px)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setDy</span><span class="params">(<span class="keyword">int</span> dy)</span> </span>&#123;</span><br><span class="line">            mDy = dy;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 设置水印文字对齐方式</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> align 对齐方式(默认:Center)</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> Builder</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">setAlign</span><span class="params">(Paint.Align align)</span> </span>&#123;</span><br><span class="line">            mAlign = align;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 生成水印全局配置信息</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 配置信息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> WaterMarkInfo <span class="title">generate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> WaterMarkInfo(mDegrees, mTextColor, mTextSize, mTextBold, mDx, mDy, mAlign);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Canvas;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.graphics.ColorFilter;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Paint;</span><br><span class="line"><span class="keyword">import</span> android.graphics.PixelFormat;</span><br><span class="line"><span class="keyword">import</span> android.graphics.drawable.Drawable;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.IntRange;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.NonNull;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaterMarkBg</span> <span class="keyword">extends</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Paint paint = <span class="keyword">new</span> Paint();</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; labels;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> degress;<span class="comment">//角度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> fontSize;<span class="comment">//字体大小 单位sp</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context 上下文</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> labels 水印文字列表 多行显示支持</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> degress 水印角度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fontSize 水印文字大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WaterMarkBg</span><span class="params">(Context context, List&lt;String&gt; labels, <span class="keyword">int</span> degress, <span class="keyword">int</span> fontSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.labels = labels;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.degress = degress;</span><br><span class="line">        <span class="keyword">this</span>.fontSize = fontSize;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="meta">@NonNull</span> Canvas canvas)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> width = getBounds().right;</span><br><span class="line">        <span class="keyword">int</span> height = getBounds().bottom;</span><br><span class="line"> </span><br><span class="line">        canvas.drawColor(Color.parseColor(<span class="string">&quot;#40F3F5F9&quot;</span>));</span><br><span class="line">        paint.setColor(Color.parseColor(<span class="string">&quot;#50AEAEAE&quot;</span>));</span><br><span class="line"> </span><br><span class="line">        paint.setAntiAlias(<span class="keyword">true</span>);</span><br><span class="line">        paint.setTextSize(sp2px(context,fontSize));</span><br><span class="line">        canvas.save();</span><br><span class="line">        canvas.rotate(degress);</span><br><span class="line">        <span class="keyword">float</span> textWidth = paint.measureText(labels.get(<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> positionY = height / <span class="number">10</span>; positionY &lt;= height; positionY += height / <span class="number">10</span>+<span class="number">80</span>) &#123;</span><br><span class="line">            <span class="keyword">float</span> fromX = -width + (index++ % <span class="number">2</span>) * textWidth;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">float</span> positionX = fromX; positionX &lt; width; positionX += textWidth * <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">int</span> spacing  = <span class="number">0</span>;<span class="comment">//间距</span></span><br><span class="line">                <span class="keyword">for</span>(String label:labels)&#123;</span><br><span class="line">                    canvas.drawText(label, positionX, positionY+spacing, paint);</span><br><span class="line">                    spacing = spacing+<span class="number">50</span>;</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        canvas.restore();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAlpha</span><span class="params">(<span class="meta">@IntRange(from = 0, to = 255)</span> <span class="keyword">int</span> alpha)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColorFilter</span><span class="params">(<span class="meta">@Nullable</span> ColorFilter colorFilter)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOpacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PixelFormat.UNKNOWN;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sp2px</span><span class="params">(Context context, <span class="keyword">float</span> spValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">float</span> fontScale = context.getResources().getDisplayMetrics().scaledDensity;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) (spValue * fontScale + <span class="number">0.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml中 引用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.commonlib.WaterMarkView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:singleLine</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/wm&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_align</span>=<span class="string">&quot;CENTER&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_degree</span>=<span class="string">&quot;-30&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_dx</span>=<span class="string">&quot;100px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_dy</span>=<span class="string">&quot;240px&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_sync</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_text</span>=<span class="string">&quot;再见孙悟空&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_textBold</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_textColor</span>=<span class="string">&quot;@color/black&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">app:water_mark_textSize</span>=<span class="string">&quot;30px&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>activity中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> WaterMarkView wm;</span><br><span class="line"> </span><br><span class="line">wm = (WaterMarkView) findViewById(R.id.wm);</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">water</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SharedPreferences jobcede = getSharedPreferences(<span class="string">&quot;jobcede&quot;</span>, MODE_PRIVATE);</span><br><span class="line">    String userName = jobcede.getString(<span class="string">&quot;username&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    String name = jobcede.getString(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    wm.setText(name,userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>————————————————<br>版权声明：本文为CSDN博主「再见孙悟空_」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/shaoyezhangliwei/article/details/109849305">https://blog.csdn.net/shaoyezhangliwei/article/details/109849305</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;转-Android-实现水印背景效果&quot;&gt;&lt;a href=&quot;#转-Android-实现水印背景效果&quot; class=&quot;headerlink&quot; title=&quot;[转]Android 实现水印背景效果&quot;&gt;&lt;/a&gt;[转]Android 实现水印背景效果&lt;/h1&gt;&lt;p&gt;项目中有</summary>
      
    
    
    
    <category term="UI" scheme="http://example.com/categories/UI/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Temp</title>
    <link href="http://example.com/2022/03/04/Temp/"/>
    <id>http://example.com/2022/03/04/Temp/</id>
    <published>2022-03-04T00:54:24.000Z</published>
    <updated>2022-05-17T03:58:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>RecycleView设置滑动监听：<br>mRecycleView.addOnScrollListener(new RecyclerView.OnScrollListener() {undefined<br>            @Override<br>            public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {undefined<br>                super.onScrollStateChanged(recyclerView, newState);<br>            }</p><pre><code>        @Override        public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) &#123;undefined            super.onScrolled(recyclerView, dx, dy);        &#125;</code></pre><p>  });</p><p>判断滑动方向：<br> @Override<br>            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {undefined<br>                if (dy &gt; 0) {&#x2F;&#x2F;下滑动作<br>                }</p><pre><code>            if (dy &lt; 0) &#123;//上滑动作            &#125;            super.onScrolled(recyclerView, dx, dy);        &#125;</code></pre><p>判断是否滑动到顶部、底部：<br>@Override<br>public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {<br>    if(newState &#x3D;&#x3D; RecyclerView.SCROLL_STATE_IDLE){&#x2F;&#x2F;停止滑动<br>        if(recyclerView.canScrollVertically(1)){<br>            Toast.show(“滑动到顶部”);<br>        }<br>        if(recyclerView.canScrollVertically(-1)){<br>            Toast.show(“滑动到底部”);<br>        }<br>    }<br>    super.onScrollStateChanged(recyclerView, newState);<br>}</p><p>recyclerView.canScrollVertically(1);  false表示不能往上滑动，即代表到顶部了；<br>recyclerView.canScrollVertically(-1); false表示不能往下滑动，即代表到底部了；</p><hr><p>controller 通过service 来操作数据的增删改查</p><p>service 通过 mapper接口来操作数据库</p><p>每一个mapper的实体接口类对应一个xml 中的mapper   中的sql的语句来具体的操作数据库</p><p>redis高速缓存用户信息</p><p>lsof -i :5088</p><p>create-react-app  <a href="https://create-react-app.dev/docs/getting-started">https://create-react-app.dev/docs/getting-started</a></p><p>antdesign</p><p><a href="https://ant.design/docs/react/use-with-create-react-app-cn">https://ant.design/docs/react/use-with-create-react-app-cn</a></p><h2 id="3-9"><a href="#3-9" class="headerlink" title="3.9"></a>3.9</h2><h3 id="vscode下函数自动补全括号"><a href="#vscode下函数自动补全括号" class="headerlink" title="vscode下函数自动补全括号"></a>vscode下函数自动补全括号</h3><p><a href="https://www.jianshu.com/p/676d1833db5e">https://www.jianshu.com/p/676d1833db5e</a></p><h3 id="JavaScript-中-call-、apply-、bind-的用法"><a href="#JavaScript-中-call-、apply-、bind-的用法" class="headerlink" title="JavaScript 中 call()、apply()、bind() 的用法"></a>JavaScript 中 call()、apply()、bind() 的用法</h3><p><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">https://www.runoob.com/w3cnote/js-call-apply-bind.html</a></p><h3 id="JavaScript-this-关键字"><a href="#JavaScript-this-关键字" class="headerlink" title="JavaScript this 关键字"></a>JavaScript this 关键字</h3><p><a href="https://www.runoob.com/js/js-this.html">https://www.runoob.com/js/js-this.html</a></p><h3 id="Linux-find-命令"><a href="#Linux-find-命令" class="headerlink" title="Linux find 命令"></a>Linux find 命令</h3><p><a href="https://www.runoob.com/linux/linux-comm-find.html">https://www.runoob.com/linux/linux-comm-find.html</a></p><h3 id="1-VMess"><a href="#1-VMess" class="headerlink" title="1. VMess"></a>1. VMess</h3><p>VMess 协议是由 V2Ray 原创并使用于 V2Ray 的加密传输协议，如同 Shadowsocks 一样为了对抗墙的<a href="https://zh.wikipedia.org/wiki/%E6%B7%B1%E5%BA%A6%E5%8C%85%E6%A3%80%E6%B5%8B">深度包检测</a>而研发的。在 V2Ray 上客户端与服务器的通信主要是通过 VMess 协议通信。</p><p>本小节给出了 VMess 的配置文件，其实也就是服务器和客户端的基本配置文件，这是 V2Ray 能够运行的最简单的配置。</p><p>V2Ray 使用 inbound(传入) 和 outbound(传出) 的结构，这样的结构非常清晰地体现了数据包的流动方向，同时也使得 V2Ray 功能强大复杂的同时而不混乱，清晰明了。形象地说，我们可以把 V2Ray 当作一个盒子，这个盒子有入口和出口(即 inbound 和 outbound)，我们将数据包通过某个入口放进这个盒子里，然后这个盒子以某种机制（这个机制其实就是路由，后面会讲到）决定这个数据包从哪个出口吐出来。以这样的角度理解的话，V2Ray 做客户端，则 inbound 接收来自浏览器数据，由 outbound 发出去(通常是发到 V2Ray 服务器)；V2Ray 做服务器，则 inbound 接收来自 V2Ray 客户端的数据，由 outbound 发出去(通常是如 Google 等想要访问的目标网站)。</p><h3 id="V2Ray高级技巧：流量伪装"><a href="#V2Ray高级技巧：流量伪装" class="headerlink" title="V2Ray高级技巧：流量伪装"></a>V2Ray高级技巧：流量伪装</h3><p><a href="https://v2xtls.org/v2ray%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/">https://v2xtls.org/v2ray%E9%AB%98%E7%BA%A7%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%B5%81%E9%87%8F%E4%BC%AA%E8%A3%85/</a></p><h3 id="Android-动画之Lottie动画使用"><a href="#Android-动画之Lottie动画使用" class="headerlink" title="Android 动画之Lottie动画使用"></a>Android 动画之Lottie动画使用</h3><p><a href="https://segmentfault.com/a/1190000039131272">https://segmentfault.com/a/1190000039131272</a></p><h3 id="Android矢量动画实践"><a href="#Android矢量动画实践" class="headerlink" title="Android矢量动画实践"></a>Android矢量动画实践</h3><p><a href="https://juejin.cn/post/6844903491652026375">https://juejin.cn/post/6844903491652026375</a></p><p>矢量动画</p><p>svg 矢量图形</p><p>大前端训练营</p><table><thead><tr><th>模块一 函数式编程与JS异步编程，手写Promise</th><th></th></tr></thead><tbody><tr><td>1.为什么说函数是一等公民？</td><td></td></tr><tr><td>2.如何把一个函数赋值给变量？</td><td></td></tr><tr><td>3.如何把一个函数赋值给另一个函数？</td><td>注意：赋值的是函数定义而不是调用</td></tr><tr><td>4.什么是高阶函数？</td><td></td></tr><tr><td>5.手写 数组 forEach 和 filter?</td><td></td></tr><tr><td>6.什么是函数式编程？有什么好处？</td><td></td></tr><tr><td>7.什么是闭包？</td><td></td></tr><tr><td>8.闭包的本质是什么？</td><td></td></tr><tr><td>9.闭包的好处是什么？</td><td></td></tr><tr><td>10.什么是纯函数？</td><td></td></tr></tbody></table><h1 id="3-11"><a href="#3-11" class="headerlink" title="3.11"></a>3.11</h1><h2 id="1-JS"><a href="#1-JS" class="headerlink" title="1.JS"></a>1.JS</h2><h3 id="JS数组reduce-方法详解及高级技巧"><a href="#JS数组reduce-方法详解及高级技巧" class="headerlink" title="JS数组reduce()方法详解及高级技巧"></a>JS数组reduce()方法详解及高级技巧</h3><p><a href="https://www.jianshu.com/p/e375ba1cfc47">https://www.jianshu.com/p/e375ba1cfc47</a></p><p>大前端训练营</p><table><thead><tr><th>1.函数式编程规范</th><th></th></tr></thead><tbody><tr><td>1.组合函数</td><td></td></tr><tr><td>2.lodash 中的组合函数</td><td></td></tr><tr><td>3.组合函数的原理及实现</td><td></td></tr><tr><td>4.组合函数的结合率</td><td></td></tr><tr><td>5.如何调试组合函数？</td><td></td></tr><tr><td>6.lodash中的fp</td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="2-kotlin"><a href="#2-kotlin" class="headerlink" title="2.kotlin"></a>2.kotlin</h2><h6 id="Kotlin中，函数作为参数，T-gt-Unit-和-gt-Unit-的区别"><a href="#Kotlin中，函数作为参数，T-gt-Unit-和-gt-Unit-的区别" class="headerlink" title="Kotlin中，函数作为参数，T.()-&gt;Unit 和 ()-&gt;Unit 的区别"></a>Kotlin中，函数作为参数，T.()-&gt;Unit 和 ()-&gt;Unit 的区别</h6><p><a href="https://blog.csdn.net/weixin_33676492/article/details/92520157?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&amp;utm_relevant_index=1">https://blog.csdn.net/weixin_33676492/article/details/92520157?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=1</a></p><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><p>Kotlin 使用类似 <code>(Int) -&gt; String</code> 的一系列函数类型来处理函数的声明： <code>val onClick: () -&gt; Unit = ……</code>。</p><p>这些类型具有与函数签名相对应的特殊表示法，即它们的参数和返回值：</p><ul><li><p>所有函数类型都有一个圆括号括起来的参数类型列表以及一个返回类型：<code>(A, B) -&gt; C</code> 表示接受类型分别为 <code>A</code> 与 <code>B</code> 两个参数并返回一个 <code>C</code> 类型值的函数类型。 参数类型列表可以为空，如 <code>() -&gt; A</code>。<a href="https://www.kotlincn.net/docs/reference/functions.html#%E8%BF%94%E5%9B%9E-unit-%E7%9A%84%E5%87%BD%E6%95%B0"><code>Unit</code> 返回类型</a>不可省略。</p></li><li><p>函数类型可以有一个额外的<em>接收者</em>类型，它在表示法中的点之前指定： 类型 <code>A.(B) -&gt; C</code> 表示可以在 <code>A</code> 的接收者对象上以一个 <code>B</code> 类型参数来调用并返回一个 <code>C</code> 类型值的函数。 <a href="https://www.kotlincn.net/docs/reference/lambdas.html#%E5%B8%A6%E6%9C%89%E6%8E%A5%E6%94%B6%E8%80%85%E7%9A%84%E5%87%BD%E6%95%B0%E5%AD%97%E9%9D%A2%E5%80%BC">带有接收者的函数字面值</a>通常与这些类型一起使用。</p></li></ul><h1 id="3-12"><a href="#3-12" class="headerlink" title="3.12"></a>3.12</h1><h2 id="1-JS-1"><a href="#1-JS-1" class="headerlink" title="1.JS"></a>1.JS</h2><h3 id="1-变量声明提升"><a href="#1-变量声明提升" class="headerlink" title="1.变量声明提升"></a>1.变量声明提升</h3><p><img src="/../images/image-20220312142127516.png" alt="image-20220312142127516"></p><h3 id="2-形参也是局部变量"><a href="#2-形参也是局部变量" class="headerlink" title="2.形参也是局部变量"></a>2.形参也是局部变量</h3><p><img src="/../images/image-20220312142507590.png" alt="image-20220312142507590"></p><h3 id="3-作用域链"><a href="#3-作用域链" class="headerlink" title="3.作用域链"></a>3.作用域链</h3><p><img src="/../images/image-20220312143007595.png" alt="image-20220312143007595"></p><p>函数只有在调用的时候才会形成作用域，声明的时间不会形成作用域</p><p><img src="/../images/image-20220312143853587.png" alt="image-20220312143853587"></p><p><img src="/../images/image-20220312144122104.png" alt="image-20220312144122104"></p><h3 id="数组的解构"><a href="#数组的解构" class="headerlink" title="数组的解构"></a>数组的解构</h3><p>对应位置声明变量</p><p><img src="/../images/image-20220312163233160.png" alt="image-20220312163233160"></p><p>只要第三个成员</p><p><img src="/../images/image-20220312163259965.png" alt="image-20220312163259965"></p><p>剩余所有的都解构出来</p><p><img src="/../images/image-20220312163327777.png" alt="image-20220312163327777"></p><p>小于长度，按顺序提取</p><p><img src="/../images/image-20220312163345897.png" alt="image-20220312163345897"></p><p>大于长度，undifined 和设置默认值 </p><p><img src="/../images/image-20220312163409686.png" alt="image-20220312163409686"></p><p>应用</p><p>   <img src="/../images/image-20220312163513064.png" alt="image-20220312163513064"></p><h3 id="对象的解构"><a href="#对象的解构" class="headerlink" title="对象的解构"></a>对象的解构</h3><p><img src="/../images/image-20220312163006037.png" alt="image-20220312163006037"></p><p>冲突</p><p>重命名解决</p><p><img src="/../images/image-20220312163053699.png" alt="image-20220312163053699"></p><p>应用</p><p><img src="/../images/image-20220312163120232.png" alt="image-20220312163120232"></p><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>也用· 要转义</p><p><img src="/../images/image-20220312163613850.png" alt="image-20220312163613850"></p><h3 id="带标签的模板字符串"><a href="#带标签的模板字符串" class="headerlink" title="带标签的模板字符串"></a>带标签的模板字符串</h3><p><img src="/../images/image-20220312163819069.png" alt="image-20220312163819069"></p><p><img src="/../images/image-20220312163825973.png" alt="image-20220312163825973"></p><p><img src="/../images/image-20220312164010882.png" alt="image-20220312164010882"></p><p>字符串拓展</p><p><img src="/../images/image-20220312164222387.png" alt="image-20220312164222387"></p><p>参数默认值</p><p><img src="/../images/image-20220312164505563.png" alt="image-20220312164505563"></p><p><img src="/../images/image-20220312164516348.png" alt="image-20220312164516348"></p><p>剩余参数</p><p><img src="/../images/image-20220312164641873.png" alt="image-20220312164641873"></p><p>展开数组参数</p><p><img src="/../images/image-20220312164911230.png" alt="image-20220312164911230"></p><p>箭头函数</p><p><img src="/../images/image-20220312170107616.png" alt="image-20220312170107616"></p><p>箭头函数与this</p><p><img src="/../images/image-20220312170604361.png" alt="image-20220312170604361"></p><p>对象字面量</p><p><img src="/../images/image-20220312171036713.png" alt="image-20220312171036713"></p><p>Object.assign 方法</p><p><img src="/../images/image-20220312171404121.png" alt="image-20220312171404121"></p><p><img src="/../images/image-20220312171811643.png" alt="image-20220312171811643"></p><h3 id="Object-assign-是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？"><a href="#Object-assign-是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？" class="headerlink" title="Object.assign 是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？"></a>Object.assign 是浅拷贝还是深拷贝？实现深拷贝的方法有哪些？</h3><p><a href="https://juejin.cn/post/6844903895550918669">https://juejin.cn/post/6844903895550918669</a></p><p><img src="/../images/image-20220312172807601.png" alt="image-20220312172807601"></p><h1 id="3-13"><a href="#3-13" class="headerlink" title="3.13"></a>3.13</h1><h2 id="1-js"><a href="#1-js" class="headerlink" title="1.js"></a>1.js</h2><h3 id="Proxy-对象"><a href="#Proxy-对象" class="headerlink" title="Proxy 对象"></a>Proxy 对象</h3><p><img src="/../images/image-20220313064023971.png" alt="image-20220313064023971"></p><h3 id="Proxy和Object-defineProperty-的区别"><a href="#Proxy和Object-defineProperty-的区别" class="headerlink" title="Proxy和Object.defineProperty()的区别"></a>Proxy和Object.defineProperty()的区别</h3><p><img src="/../images/image-20220313064132902.png" alt="image-20220313064132902"></p><p>deleteProperty 方法调用等也能监听到</p><p>defineProperty 只能监听属性的设置和访问</p><p><img src="/../images/image-20220313064324070.png" alt="image-20220313064324070"></p><p><img src="/../images/image-20220313064342071.png" alt="image-20220313064342071"></p><p><img src="/../images/image-20220313064619114.png" alt="image-20220313064619114"></p><p><img src="/../images/image-20220313064635076.png" alt="image-20220313064635076"></p><p>Reflect</p><p><img src="/../images/image-20220313102510688.png" alt="image-20220313102510688"></p><p><img src="/../images/image-20220313102540667.png" alt="image-20220313102540667"></p><p><img src="/../images/image-20220313102847233.png" alt="image-20220313102847233"></p><p><img src="/../images/image-20220313103017079.png" alt="image-20220313103017079"></p><p>避免使用各种乱七八糟的方法，而是把这些方法进行统一管理</p><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><p>es6以前</p><p><img src="/../images/image-20220313113103417.png" alt="image-20220313113103417"></p><p>es6 </p><p><img src="/../images/image-20220313113326200.png" alt="image-20220313113326200"></p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p><img src="/../images/image-20220313113548988.png" alt="image-20220313113548988"></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p><img src="/../images/image-20220313113801231.png" alt="image-20220313113801231"></p><p>super指的就是父类，可以调用父类的方法</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p><img src="/../images/image-20220313123142802.png" alt="image-20220313123142802"></p><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><p><img src="/../images/image-20220313123522191.png" alt="image-20220313123522191"></p><h1 id="3-14"><a href="#3-14" class="headerlink" title="3.14"></a>3.14</h1><h2 id="1-js-1"><a href="#1-js-1" class="headerlink" title="1.js"></a>1.js</h2><h3 id="for-of"><a href="#for-of" class="headerlink" title="for of"></a>for of</h3><p><img src="/../images/image-20220314103539988.png" alt="image-20220314103539988"></p><p>遍历 数组</p><p><img src="/../images/image-20220314103616028.png" alt="image-20220314103616028"></p><p>遍历 Set</p><p><img src="/../images/image-20220314103650874.png" alt="image-20220314103650874"></p><p>遍历 Map</p><p><img src="/../images/image-20220314103716823.png" alt="image-20220314103716823"></p><h3 id="ES2015之对象计算属性值"><a href="#ES2015之对象计算属性值" class="headerlink" title="ES2015之对象计算属性值"></a>ES2015之对象计算属性值</h3><p><a href="http://liunian.github.io/blog/es2015-computed-property-name/">http://liunian.github.io/blog/es2015-computed-property-name/</a></p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p><img src="/../images/image-20220314142037888.png" alt="image-20220314142037888"></p><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p><img src="/../images/image-20220314142107508.png" alt="image-20220314142107508"></p><h3 id="let-const"><a href="#let-const" class="headerlink" title="let const"></a>let const</h3><p><img src="/../images/image-20220314143833683.png" alt="image-20220314143833683"></p><p><img src="/../images/image-20220314170743313.png" alt="image-20220314170743313"></p><p><img src="/../images/image-20220314170753679.png" alt="image-20220314170753679"></p><p><img src="/../images/image-20220314171204838.png" alt="image-20220314171204838"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;RecycleView设置滑动监听：&lt;br&gt;mRecycleView.addOnScrollListener(new RecyclerView.OnScrollListener() {undefined&lt;br&gt;            @Override&lt;br&gt;       </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Jetpack系列—paging框架使用和原理(基于paging-runtime-2.1.0版本)</title>
    <link href="http://example.com/2022/02/25/Jetpack%E7%B3%BB%E5%88%97%E2%80%94paging%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/02/25/Jetpack%E7%B3%BB%E5%88%97%E2%80%94paging%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</id>
    <published>2022-02-24T20:23:47.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Jetpack系列—paging框架使用和原理(基于paging-runtime-2.1.0版本)</p><p>基于paging-runtime-2.1.0版本</p><p>先看下pageing的基本使用</p><p>1.构造一个pageData对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LiveData&lt;PagedList&lt;T&gt;&gt; pageData = <span class="keyword">new</span> LivePagedListBuilder(factory, config)</span><br><span class="line">  <span class="comment">//加载初始化数据时需要传递的参数，首页就给传个0就行了，如果是多个参数，需要把多个参数组装成一个javabean对象</span></span><br><span class="line">        .setInitialLoadKey(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">//.setFetchExecutor()</span></span><br><span class="line">  <span class="comment">//这个callback可以知道pagelist加载数据的状态，可以判定界面上有没有数据等异常的状态,看名字就知道，是边界情况回调，但 不是每一次分页 都会回调这里</span></span><br><span class="line">        .setBoundaryCallback(callback)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>2.先看更新数据接收和更新的地方</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//触发页面初始化数据加载的逻辑</span></span><br><span class="line">mViewModel.getPageData().observe(<span class="keyword">this</span>, pagedList -&gt; submitList(pagedList));</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听分页时有无更多数据,以决定是否关闭上拉加载的动画</span></span><br><span class="line">mViewModel.getBoundaryPageData().observe(<span class="keyword">this</span>, hasData -&gt; finishRefresh(hasData));</span><br></pre></td></tr></table></figure><p>本质通过这个pageData去observe进行数据的分发事件通知，进而刷新页面数据，本质上是使用了livedata的能力。</p><p>3.看具体构造pageData对象时还需要一个factory config  callback这些都是什么</p><p>config</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">PagedList.Config config = <span class="keyword">new</span> PagedList.Config.Builder()</span><br><span class="line">        <span class="comment">//一页加载多少条数据</span></span><br><span class="line">        .setPageSize(<span class="number">10</span>)</span><br><span class="line">        <span class="comment">//设置默认加载多少条数据</span></span><br><span class="line">        .setInitialLoadSizeHint(<span class="number">12</span>)</span><br><span class="line">        <span class="comment">//知道列表一共多少条数据</span></span><br><span class="line">        <span class="comment">//.setMaxSize(100)</span></span><br><span class="line">        <span class="comment">//还有多少条的时候的预加载，默认是pageSize 如果不想有这个功能，就让setInitialLoadSizeHint 大于pageSize</span></span><br><span class="line">        <span class="comment">//要不一开始它加载了10条，它马上就执行loadMore了</span></span><br><span class="line">        <span class="comment">//.setPrefetchDistance(4)</span></span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p>factory</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataSource.Factory factory = <span class="keyword">new</span> DataSource.Factory() &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource == <span class="keyword">null</span> || dataSource.isInvalid()) &#123;</span><br><span class="line">            dataSource = createDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>callback 边界</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">PagedList.BoundaryCallback&lt;T&gt; callback = <span class="keyword">new</span> PagedList.BoundaryCallback&lt;T&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onZeroItemsLoaded</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新提交的PagedList中没有数据</span></span><br><span class="line">        boundaryPageData.postValue(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemAtFrontLoaded</span><span class="params">(<span class="meta">@NonNull</span> T itemAtFront)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新提交的PagedList中第一条数据被加载到列表上</span></span><br><span class="line">        boundaryPageData.postValue(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemAtEndLoaded</span><span class="params">(<span class="meta">@NonNull</span> T itemAtEnd)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//新提交的PagedList中最后一条数据被加载到列表上</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看到了吧，在第一次时没有数据，在onZeroItemsLoaded会发送一条boundaryPageData.postValue(false) 这也是livedata.postValue 所以触发第一次加载时页面更新，后续加载更多</p><p>那么具体的实现逻辑，看下原代码 基于paging-runtime-2.1.0版本</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LiveData&lt;PagedList&lt;Value&gt;&gt; build() &#123;</span><br><span class="line">    <span class="keyword">return</span> create(mInitialLoadKey, mConfig, mBoundaryCallback, mDataSourceFactory,</span><br><span class="line">            ArchTaskExecutor.getMainThreadExecutor(), mFetchExecutor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mInitialLoadKey——第一次加载数据时的入参</p><p>mConfig——配置了maxsize pagesize  PrefetchDistance 等等参数</p><p>mBoundaryCallback——数据加载边界的回调</p><p>mDataSourceFactory——提供数据源</p><p>ArchTaskExecutor.getMainThreadExecutor()——主线程</p><p>mFetchExecutor——异步线程</p><p> 静态方法create</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;Key, Value&gt; LiveData&lt;PagedList&lt;Value&gt;&gt; create(</span><br><span class="line">        <span class="meta">@Nullable</span> <span class="keyword">final</span> Key initialLoadKey,</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> PagedList.Config config,</span><br><span class="line">        <span class="meta">@Nullable</span> <span class="keyword">final</span> PagedList.BoundaryCallback boundaryCallback,</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> DataSource.Factory&lt;Key, Value&gt; dataSourceFactory,</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> Executor notifyExecutor,</span><br><span class="line">        <span class="meta">@NonNull</span> <span class="keyword">final</span> Executor fetchExecutor) &#123;</span><br><span class="line">  <span class="comment">//实际上return的是ComputableLiveData.getLiveData</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ComputableLiveData&lt;PagedList&lt;Value&gt;&gt;(fetchExecutor) &#123;</span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">private</span> PagedList&lt;Value&gt; mList;</span><br><span class="line">        <span class="meta">@Nullable</span></span><br><span class="line">        <span class="keyword">private</span> DataSource&lt;Key, Value&gt; mDataSource;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> DataSource.InvalidatedCallback mCallback =</span><br><span class="line">                <span class="keyword">new</span> DataSource.InvalidatedCallback() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        invalidate();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span> <span class="comment">// for casting getLastKey to Key</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> PagedList&lt;Value&gt; <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="meta">@Nullable</span> Key initializeKey = initialLoadKey;</span><br><span class="line">            <span class="keyword">if</span> (mList != <span class="keyword">null</span>) &#123;</span><br><span class="line">                initializeKey = (Key) mList.getLastKey();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (mDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mDataSource.removeInvalidatedCallback(mCallback);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mDataSource = dataSourceFactory.create();</span><br><span class="line">                mDataSource.addInvalidatedCallback(mCallback);</span><br><span class="line"></span><br><span class="line">                mList = <span class="keyword">new</span> PagedList.Builder&lt;&gt;(mDataSource, config)</span><br><span class="line">                        .setNotifyExecutor(notifyExecutor)</span><br><span class="line">                        .setFetchExecutor(fetchExecutor)</span><br><span class="line">                        .setBoundaryCallback(boundaryCallback)</span><br><span class="line">                        .setInitialKey(initializeKey)</span><br><span class="line">                        .build();</span><br><span class="line">            &#125; <span class="keyword">while</span> (mList.isDetached());</span><br><span class="line">            <span class="keyword">return</span> mList;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;.getLiveData();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看ComputableLiveData里都做了啥</p><p>构造方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ComputableLiveData</span><span class="params">(<span class="meta">@NonNull</span> Executor executor)</span> </span>&#123;</span><br><span class="line">    mExecutor = executor;</span><br><span class="line">  <span class="comment">//new了livedata 并且复写了onActive方法</span></span><br><span class="line">    mLiveData = <span class="keyword">new</span> LiveData&lt;T&gt;() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          <span class="comment">//onActive方法执行时机？当且仅当第一个活跃的observer被注册到livedata里的时候就会触发activie</span></span><br><span class="line">            mExecutor.execute(mRefreshRunnable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，只要用调用了pageData.observe(Observer) 就会立马触发 ComputableLiveData里的livedata的onActive的回调</p><p>看下mRefreshRunnable 里做了什么，刷新了数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Runnable mRefreshRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> computed;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            computed = <span class="keyword">false</span>;</span><br><span class="line">          </span><br><span class="line">            <span class="keyword">if</span> (mComputing.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                <span class="comment">// as long as it is invalid, keep computing.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    T value = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> (mInvalid.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                        computed = <span class="keyword">true</span>;</span><br><span class="line">                        value = compute();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (computed) &#123;</span><br><span class="line">                        mLiveData.postValue(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// release compute lock</span></span><br><span class="line">                    mComputing.set(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (computed &amp;&amp; mInvalid.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="function">T <span class="title">compute</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>是一个抽象，具体实现在ComputeLiveData的匿名实现里</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> PagedList&lt;Value&gt; <span class="title">compute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Key initializeKey = initialLoadKey;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.mList != <span class="keyword">null</span>) &#123;</span><br><span class="line">        initializeKey = <span class="keyword">this</span>.mList.getLastKey();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.mDataSource != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.mDataSource.removeInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//通过create方法，生成了一个datasource对象 是一个抽象方法，由用户在上层实现</span></span><br><span class="line">        <span class="keyword">this</span>.mDataSource = dataSourceFactory.create();</span><br><span class="line">        <span class="keyword">this</span>.mDataSource.addInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br><span class="line">        <span class="keyword">this</span>.mList = (<span class="keyword">new</span> androidx.paging.PagedList.Builder(<span class="keyword">this</span>.mDataSource, config)).setNotifyExecutor(notifyExecutor).setFetchExecutor(fetchExecutor).setBoundaryCallback(boundaryCallback).setInitialKey(initializeKey).build();</span><br><span class="line">    &#125; <span class="keyword">while</span>(<span class="keyword">this</span>.mList.isDetached());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.mList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由用户在上层实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> DataSource&lt;Key, Value&gt; <span class="title">create</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>我们在viewmodel中的实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataSource.Factory factory = <span class="keyword">new</span> DataSource.Factory() &#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (dataSource == <span class="keyword">null</span> || dataSource.isInvalid()) &#123;</span><br><span class="line">            dataSource = createDataSource();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>进而由每个具体的viewmodel中的new的datasource对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FeedDataSource</span> <span class="keyword">extends</span> <span class="title">ItemKeyedDataSource</span>&lt;<span class="title">Integer</span>, <span class="title">Feed</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadInitial</span><span class="params">(<span class="meta">@NonNull</span> LoadInitialParams&lt;Integer&gt; params, <span class="meta">@NonNull</span> LoadInitialCallback&lt;Feed&gt; callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//加载初始化数据的</span></span><br><span class="line">        Log.e(<span class="string">&quot;homeviewmodel&quot;</span>, <span class="string">&quot;loadInitial: &quot;</span>);</span><br><span class="line">        loadData(<span class="number">0</span>, params.requestedLoadSize, callback);</span><br><span class="line">        witchCache = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadAfter</span><span class="params">(<span class="meta">@NonNull</span> LoadParams&lt;Integer&gt; params, <span class="meta">@NonNull</span> LoadCallback&lt;Feed&gt; callback)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//向后加载分页数据的</span></span><br><span class="line">        Log.e(<span class="string">&quot;homeviewmodel&quot;</span>, <span class="string">&quot;loadAfter: &quot;</span>);</span><br><span class="line">        loadData(params.key, params.requestedLoadSize, callback);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBefore</span><span class="params">(<span class="meta">@NonNull</span> LoadParams&lt;Integer&gt; params, <span class="meta">@NonNull</span> LoadCallback&lt;Feed&gt; callback)</span> </span>&#123;</span><br><span class="line">        callback.onResult(Collections.emptyList());</span><br><span class="line">        <span class="comment">//能够向前加载数据的</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getKey</span><span class="params">(<span class="meta">@NonNull</span> Feed item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> item.id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着往下看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.mDataSource.addInvalidatedCallback(<span class="keyword">this</span>.mCallback);</span><br></pre></td></tr></table></figure><p>为什么要给datasource注册一个callback呢？先往下看，这个callback干了什么</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//通过原子的方式，把mInvalide标志位设为true</span></span><br><span class="line">    <span class="keyword">if</span> (mInvalid.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">        <span class="keyword">for</span> (InvalidatedCallback callback : mOnInvalidatedCallbacks) &#123;</span><br><span class="line">            callback.onInvalidated();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就会走到</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> InvalidatedCallback mCallback = <span class="keyword">new</span> InvalidatedCallback() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInvalidated</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        invalidate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>走到 ComputableLivedata.invalidate()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArchTaskExecutor.getInstance().executeOnMainThread(mInvalidationRunnable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Runnable mInvalidationRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@MainThread</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> isActive = mLiveData.hasActiveObservers();</span><br><span class="line">        <span class="keyword">if</span> (mInvalid.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isActive) &#123;</span><br><span class="line">                mExecutor.execute(mRefreshRunnable);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个mRefreshRunnable同样在onActive方法中被执行过</p><p>如何通过下拉刷新去触发 执行mRefreshRunnable呢？</p><p>上层执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mViewModel.getDataSource().invalidate();</span><br></pre></td></tr></table></figure><p>就会再次触发我们创建的ComputableLiveData中的mCallback中的onInvalidated方法进而实现invalidate的调用，并执行里面的mRefreshRunnable去刷新数据，所以</p><p>我们第一次创建时会刷新一次，后面就可以通这个注册的callback 上层调用 去主动刷新数据</p><p>再看mRefreshRunnable的后面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Runnable mRefreshRunnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="meta">@WorkerThread</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> computed;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            computed = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// compute can happen only in 1 thread but no reason to lock others.</span></span><br><span class="line">            <span class="keyword">if</span> (mComputing.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line">                <span class="comment">// as long as it is invalid, keep computing.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    T value = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">while</span> (mInvalid.compareAndSet(<span class="keyword">true</span>, <span class="keyword">false</span>)) &#123;</span><br><span class="line">                        computed = <span class="keyword">true</span>;</span><br><span class="line">                      <span class="comment">//拿到value pagedlist</span></span><br><span class="line">                        value = compute();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (computed) &#123;</span><br><span class="line">                      <span class="comment">//通过livedata发送pagelist分发数据，这样注册的地方就可以接收到数据了</span></span><br><span class="line">                        mLiveData.postValue(value);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// release compute lock</span></span><br><span class="line">                    mComputing.set(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (computed &amp;&amp; mInvalid.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jetpack系列—paging框架使用和原理(基于paging-runtime-2.1.0版本)&lt;/p&gt;
&lt;p&gt;基于paging-runtime-2.1.0版本&lt;/p&gt;
&lt;p&gt;先看下pageing的基本使用&lt;/p&gt;
&lt;p&gt;1.构造一个pageData对象&lt;/p&gt;
&lt;fig</summary>
      
    
    
    
    <category term="Jetpack系列" scheme="http://example.com/categories/Jetpack%E7%B3%BB%E5%88%97/"/>
    
    
    <category term="Android" scheme="http://example.com/tags/Android/"/>
    
    <category term="Jetpack" scheme="http://example.com/tags/Jetpack/"/>
    
  </entry>
  
  <entry>
    <title>Socket网络编程-UDP</title>
    <link href="http://example.com/2022/02/23/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-UDP/"/>
    <id>http://example.com/2022/02/23/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-UDP/</id>
    <published>2022-02-22T20:02:51.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>socket网络编程系列之二</p><span id="more"></span><h2 id="Socket网络编程-UDP"><a href="#Socket网络编程-UDP" class="headerlink" title="Socket网络编程-UDP"></a>Socket网络编程-UDP</h2><h3 id="1-UPD是什么"><a href="#1-UPD是什么" class="headerlink" title="1.UPD是什么"></a>1.UPD是什么</h3><p>那么前面一个章节呢咱们算是过得轻松又愉快，因为前面一个章节是一个基础的章节，那本章节呢其实也是一个基础章节，本章节名字叫做socket - u d p快速入门。<br>那么在本章节当中呢最主要的收获是</p><p>第一，带领大家明白u d p是什么。<br>二、udp的主要作用是什么？<br>三、udp的简要用法及其api的学习。<br>第四、就是理解网络当中的单播、广播以及多播的概念。</p><p>当然了，关于api的学习以及广播、多播的概念和运算，那么这是重点，也是本章节需要掌握的重点知识点。<br>好的，废话不多说，我们进入到第一个章节，udp是什么？<br>udp的英文单词是user datagram Protocol，缩写为udp。<br>那么udp是一种用户数据报协议，又称为用户数据报文协议。<br>它是一种基于报文的协议，而不是面向链接的一种协议，它与tcp不同。<br>tcp是基于链接的协议，而udp是基于一种用户数据报的协议，它是一个简单的面向数据报的传输层的协议，正式的规范为rfc 768。<br>那么这个文件呢我们不做细究。<br>好了，我们继续往下看，它是一个用户数据协议，非连接协议，这是重点，它不是连接协议。<br><strong>udp的发起和接收是不需要进通过连接，仅仅只需要直接发送以及你在对应端口上进行监听接收即可，它不需要两个客户端一定是连接的。</strong></p><p><strong>常常我们会说tcp和udp最大的区别是什么？</strong><br>tcp是面向连接的，然后tcp是传输可靠的，而udp是面向数据报的，那么他们两个是不一样的，从而也导致了udp在大家的认知当中是不可靠的。<br>那我们来说一下它为什么不可靠。<br>第一点，它一旦把应用程序给到应用层的数据发送出去之后，就不进行保留数据备份是什么意思呢？<br>就是说在udp的数据层面，他只管发送或者是接收数据，而不对这个数据进行保存、备份、重发等等。<br>ud p在ip数据报的头部，仅仅加入了复用和数据校验的字段.</p><p>那么在后面呢我们会给大家讲解一下它具体加了一些什么样的东西。<br><strong>在发送端是产生数据</strong>，<strong>而在接收端从网络当中去抓取数据，所以说它们两者是不需要进行连接的。</strong></p><p>但是也正因为它不是一个连接的协议，它是靠客户端发送协议，服务器端从网络当中去抓取协议，它抓取的时间以及你发送的时机如果说不相同，那么可能会导致客户端发送的数据服务器端没有接收到。</p><p><strong>在udp当中其实是没有标准的客户端与服务器端的。</strong></p><p>udp结构简单、没有校验速度快、容易丢包。<br>但是呢它有一个优点可以<strong>广播</strong>，那么广播呢也是我们后面讲解的一个重点。</p><p>好的，我们来看一下udp它的主要职能是什么，udp能够做些什么这样的事情。<br>那么第一点是可以作为dns、tftp、snmp<br>当然说一下最后一点，s n m p就是我们之前说的一个网络数据协议传输当中的一个监控的一个协议。<br>t f t p呢跟f t p差不了太多，其实也就是用一种文件传输的协议dns，这是非常常见的一个东西。<br>在咱们访问一个网站防百度、访问谷歌的时候，其实要进行的第一步操作就是dns解析。<br><strong>那么dns解析呢其实实则就是用的udp来完成的的相关功能。</strong><br><strong>那么还可以做什么事情呢可以用于视频、音频的传输以及普通的数据。</strong><br>那么这个普通数据呢要求的是无关紧要的数据，因为咱们前面也说了，udp是不保证传输的可靠性的，udp存在一定的丢包，以及可能存在udp的数据混乱的一个问题。<br>那么所以这里的普通数据一定要是一个无关紧要的数据。<br>那么音频然后视频呢这个就不多说了，因为音频和视频本身就比较大。<br>当然了，音频和视频一般而言是用于咱们的一个实际的直播，或者是用于一个我们家里面的有线电视之类的，那么就是用于udp进行传输。</p><p>而如果说你要下载一个视频或者是一个音频文件，这个时候还用udp吗？<br>肯定不是，他使用的tcp，因为这是一个文件传输，也要保证它的可靠性，所以说这个时候是使用的tcp。</p><p>好的，我们这个来看一下咱们的这个udp的前面的一个报文头，他做了些什么样的事情，也就是咱们的一个数据协议前面udp加了什么东西。</p><p><img src="/../images/image-20220223041049378.png" alt="image-20220223041049378"></p><p>然后我们首先看一下它一共有多少个位一共有64位对不对？<br>64位怎么看前面的第一行是32位，第二行32位加在一起也就是64位。<br>因为四位呢我们来看一下前面的这一个部分，也就是0到15的这个部分，它一共是多少是16位。<br>16位呢的话它存储的是什么存储的是发送源的ip地址，那么后面的16位来存储的是咱们的一个接收者的，也就是目标的一个端口号，对不对？<br>而前面呢16位存储的是我们发送的端口号，对吧？<br>紧跟着后面的16位存储的是什么是一个字节长度，对不对存储的是一个字节长度，以及再到后面这个位置，是咱们的一个头部以及数据的一个校验字段，所以说都在这里了都在这里，它一共是16位。那么加在一起呢也就是64位。<br>好了，这里呢我们需要进行一定的细化，给大家讲解一些从图上面不能直接看出的一些东西。<br>首先我们看第一点，端口号的保存。<br>前面分别用了32位保存端口号，那么这里呢其实有一个点需要说明的是，第一个0到15是多少？<br>是16位，16位的话它其实是多少个字节是2个字节对不对？<br>两个字节其实就是一个短整型。<br>那么紧接着我们往后面看一点，这前面的端口用短整型来存储，这是够的，对吧？<br>因为咱们端口是多少0到65535，对不对？<br>好的。往后面看一下，紧跟着的它的存储的，咱们传输的这个后面的数据的长度是多少数据的长度是放在这16个位当中，而这16个位呢也是相当关于一个短整型，也就是一个短整型的一个长度，用来存储我们的后面的数据部分的长度，对不对用一个短点型存储。<br>那么后面是一个校验的教研的部分呢，我们就不多说，我们来说一下，我们发送一个udp究竟能够带多大的数据出去它究竟能够发多大的包一次udp最多能够发多长的数据出去？<br><strong>一个udp包最大的长度是多少呢？</strong><br>首先我们来看一下，16位，也就是2个字节，也就是咱们说的一个短整型存储的长度信息对吧存储长度信息，那么它的二了16位减去一也就是等于64k减去一也就等于65536减1其实也就等于65535个字节长度。<br>那么是不是我们就可以发六五三五个字节长度呢？<br>其实不是，因为咱们前面的头部还占用了一部分的信息。<br>头部。<br>诶我们说我们前面的头部有多少，未来的64个位，对吧？<br>自身协议其实是占用了多少64位是多少啊？<br>32加32位等于64位，其实也就等于咱们的8字节对吧八字节的长度，65535减去八个字，也就等于六五零七个字节。<br>所以说咱们最多发送的数据长度是六五五零七，这个点一定要记住。</p><p><img src="/../images/image-20220223041928608.png" alt="image-20220223041928608">当你要发送的数据长度大于六五零七的时候，一定要记住自己要进行一次分包然后交给udp进行传输，udp最大的传输一次包的一个大小最多是六五零七个字节长度。<br>好的，当本章节的内容就到此结束，那么下一个章节呢会给大家讲解一下咱们u d p的核心api信息。<br>请大家。</p><h3 id="2-UDP核心API"><a href="#2-UDP核心API" class="headerlink" title="2.UDP核心API"></a>2.UDP核心API</h3><p>咱们接着往下讲，那么我们在本小节来讲解一下u d p 的一些核心a p i 讲解为什么要有这个章节呢？主要是因为为了咱们后面写代码的时候，不至于让大家一下就懵逼了。所以说我们专门有一个小节讲解一下核心的a p i 信息。当然了，这个章节是一个比较小的章节，因为毕竟不是跳代码，所以说咱们只是在p p t 当中过一遍咱们的a p i 即可。好的，我们进入到课程内容。<br>首先咱们来看一下a p i 当中的第一个类datagramsocket。</p><p>这个呢是用于接收与发送u d p 的一个类。这个类是咱们u d p 当中最重要的一个类，它的主要作用与职责是用于接收和发送u d p 信息的一个类。所有的u d p 信息，可以说都是经过disagrees socket 发送出去以及接收u d p 的一个包的协议。<br>也是通过data grasp 的接收到了。<br>负责发送某一个udp 包或者接收一个ud p 包<strong>不同于t c p, u d p 的协议，并没有被合并到socket a p i 当中。因为在咱们的t c p 当中，我们的t c p 的操作其实是有合并到咱们的一个socket 协议当中去</strong>。咱们的开头就是某某什么什么socket。那么我们有一个socket 的一个服务器，以及有一个socket 的一个客户端的存在。</p><p>但是在咱们的u d p 当中是没有服务器与客户端的概念。<strong>你的datagramsocket既是你的服务器，也是你的客户端，他可以发送，也可以接受</strong>。他不需要去监听某一个客户端，因为他不涉及客户端跟他的连接，所以说他不像t c p 一样，需要先去监听一个t c p 的一个来源，然后连接t c p，然后再进行通讯。这里面相当于其实就是直接两个服务器之间的参数了。或者说你可以理解为就是<strong>两个客户端</strong>之间的传输，它没有服务器端，也没有客户端，它既是服务器也是客户端。<br>接着往下说一下datagramsocket就是它的构造函数用于创建一个简单的实例。这个实例当中没有传递任何参数，所以说它不指定端口 i p。如果说这个时候你用这个datagramsocket进行发送，<strong>那么它会自动复用你本地的可用的一个端口进行发送数据</strong>。当然了，i p 就是你自己本机的i p 了，datagramsocket(int port) 指定端口，那么就是创建一个监听固定端口的一个实例。这是用于监听某一个端口的实例，就是说你的数据来源可以通过这个端口进行收到信息。但是你的发送并不是这里指定的这个端口。假如说你想要通过datagramsocket 发送一个数据包出去，你就算在这里指定了两千的端口。那么你想把一个数据发送出去的时候，是发送到哪呢？是发送到这个两千吗？其实并不是你并不是发送到这里指定的那个port 这个端口上面。这个port 端口其实只是指你接收数据的端口。datagramsocket(int port,inetaddress localaddr)这个时候是一个两个构造参数的一个构造函数。那么它创建的是一个固定端口以及指定i p 的一个实例。当你的计算机本地有多个i p 地址的时候，那么这个时候有效你可以指定只监听你的绝网的某一个端口，或者是你想监听你的一个互联网的一个i p 地址的一个端口。<br>因为你的电脑可能具备多个i p 地址，因为你可能处于某一个子网。同时你的电脑下面还有一个子网。那么这个时候你其实是有两个机器以上的i p 地址存在的。接着往下说。<br>我们调用datagramsocket.receive(DatagramPacket d) 的时候。<br>这个时候就是你接收一个什么，接收一个DatagramPacket 这就是一个咱们u d p 报文的一个封装类。<br>他完成了工作呢，咱们后面再讲解发送也是一样，就是DatagramPacket  传输进去的也就是一个DatagramPacket 。可以看到这里我们发送和接收其实都是传入的一个DatagramPacket  这样的一个实例。这个实例既可以用于接收，也可以用发送数据。<br>那么我们看一下一些设置项did so turn out。那么设置一个超时时间，这是用于咱们进行传输或者是监听的时候的一个超时时间。当然还有一个最重要的就是close 关闭以及释放资源。<br>好了，我们来看一下前面所说的describe packet disagreement。packet 是一个用于处理报文。</p><p>同时将byte数组目标地址、目标的端口等数据包封装成报文，或者将报文拆成byte数组的一个封装类。</p><p>它的这个类主要作用是什么呢？就是将咱们的这个byte数组，byte数组是什么？就是咱们要传输的内容，这个数字的长度是多少？我们之前前面有讲过65507，那么这个东西呢就是我们要传输的实际的一个数据，将这个数据以及咱们目标的一个端口地址。其实这个地方没有目标地址，这个目标地址虽然我们可以指定一个目标地址，但是呢它其实是用于发送当中的一个传输协议去做的。而实际的咱们的一个报文呢是没有目标地址的。那么其实相当于就是将byte 数组以及目标端口混装成咱们的报文，或者是将报文反向拆解成为一个bad 数据，以及咱们的一个目标端口。但目标地址就是属于咱们传输当中的一个另外的一个。i p 层面的一个传输地址的协议。data ground package 是u d p 的一个发送实体，也是接收实体。</p><p>我们来看一下它的一些构造函数，这是ground packet。这里呢是传递进去的一个bad 数组，以及一个bad 数组可用的一个区间的指定。这两个参数就是用于指定咱disagree packet 里面的这个buffer 这个内容，它具体的可用区间。那么后面那两个参数是用于指定咱们的接收者的一个地址信息。前三个参数指定的是buffer 以及buffer 的一个使用。<br>后面两个参数主要指定是目标机器地址与端口。<br>那么这个目标机器地址与端口仅仅用于发送时有效。那么在咱们发送一个数据的时候，是通过data grand package 这个东西来指定你具体的接收者的一个信息。他的信息是什么？是通过这些grand packet 来进行设置它接收的信息。我们想要接收别人发过来的信息，那么我们要用的是这是grand socket，也是我们前面用的这是grand socket 去进行一个监听，这也是这个grand packet 的一个各自函数。前面三个不用多说是一样的。<br>那么后面传递的是一个socket address。其实socket address 其实就相当于electorates 加quite electorates，其实就是一个什么呀目标主机的地址，再加上一个端口，socket 其实相对两者的一个封装，以及它的一些协议的封装。<br>那么我们来看一下data ground package 的一些使用方面的一些信息。那么首先第一点shed data。那么我们可以在构造函数创建的时候传入一个吧。<br>同理，我们也可以在构造函数中不传递任何东西。我们传递无参构造函数，然后在后面的过程，我们set data 用于替换一个buffer 音律。buffer 呢可以传递一个buffer 进去，也就是一个bad 数组。然后同时指定这个bad 数组当中的一个长度信息。我们究竟哪部分数据是有效的？那我们可以在这里指定，当然你也可以不指定信息。那么自然也就是从零开始到你整个buffer 结束，就用于单独设置你这个buffer 留下的区间有多长啊？<br>get data, get off, fit, get lunch. 那么这三个方法呢就是前面它的三个信息的一个返回。<br>紧接着我们往下看一下一些设置的信息，sit to s 当然这里也是一样，就是设置目标的地址端口以及目标地址的一个i p 地址信息。<br>get 呢也是一样，get address, get pot 是一样的。<br>后面就是set scott dress 前面我们说了scottish 其实就相当于我们前面的i like dress 和pot 的一个封装。当然了get socket dress 其实也是一样的道理。那么这里我再次重申一下咱们data grand package 这个当中设置的这个目标地址以及端口，其实是用于发送时有效。在我们接收的时候其实是无效的。你指定的端口或者是目标地址其实是无效的。只有仅仅用于你要把一个describe packet 这个信息发送出去的时候，那么这个是有效的。而你接受的时候，这些东西有什么作用呢？这个在你接触的时候，其实这个操作是由系统帮你完成的。当你接收到一个数据报的时候，相当于是他会把报文解析之后给你set 这个信息，以及set 了你的这个八份信息。那么你就可以拿到你接收到的发送过来的就是说你是。<br>你的电脑我的电脑给你发的信息，那么你就可以收到我的电脑的i p 以及我的电脑的端口。那么你就能知道那这个data grandpa 是从哪个电脑的哪个端口传输过来的。<br>那么我想要监听别人发送过来数据肯定要有一个端口。这个端口呢就是在咱们的data grass socket 当中指定的。<br>那么本章节讲解了两个，最主要的类也就是data ground socket 和data ground packet 两个。<br>适用于咱们u d p 传输当中的一个主要的a p i。<br>我们主要的a p i 讲解。最后啊我们下一个章节讲解一下咱们的一个广播以及多播的概念。<br>好的，谢谢大家。</p><h3 id="3-UDP单播、广播、多播"><a href="#3-UDP单播、广播、多播" class="headerlink" title="3.UDP单播、广播、多播"></a>3.UDP单播、广播、多播</h3><p>我们前面呢进行了一些基础的一些信息的一些讲解，以及咱们a p i的一个讲解。<br>这个章节呢给大家讲解一下咱们u d p当中的一个单播、多播以及广播三个概念是什么呢？<br>要给大家讲解一下。<br>这也是u d p最区别于tcp的一个地方，就是单播、多播或者是广播。<br>然后首先第一点，单播。<br>咱们的单播究竟是什么东西呢？<br>就是点对点。<br>假如我的电脑和你的电脑之间发生数据，你的电脑也和我的电脑之间回送数据，我们两个数据不被其他人的电脑所感知，那么这就称之为单播。</p><p><img src="/../images/image-20220223043704494.png" alt="image-20220223043704494"></p><p>顾名思义，假如你在公司，你的老板单独来说，我想要找编号为89757的这个人，叫他来我来办公室一趟，那么这个时候编号89757一定是一个指定的人，一定是一个固定的人，那么这个时候就是一个单播，那么就直接找到你对吧？<br>你就是89757。<br>那么找到一。就是你所以说这就是单播用于单线，两者之间与其他人无关，那么这就是单播的一个概念。<br>要来说一下第二点，多播。</p><p><img src="/../images/image-20220223043759297.png" alt="image-20220223043759297"></p><p>多多是什么意思啊就是说我们从这个图当中可以看得出，红色的点是咱们的一个发送者，对吧？<br>接受的是什么接受者有黄点和咱们的一个绿点，而绿点呢三个都是绿点黄点三个都是黄点。<br>多播是什么意思啊？<br>其实多播它并不叫多播，其实应该叫做组播，它是给一组设备发送。<br>这个当中其实就分为了两个组，一个组呢是咱们的一个绿色组成的一个组，还有一个组呢是咱们的这个黄色组成的组。<br>那么我现在发出来就是给所有绿色的这些设备发送信息，那么黄色的设备自然它无法接收到这个信息，这就称之为多播，或者是叫做组播，组播更为恰当一点。<br>因为它不是说你给多个人发的意思，它其实是给一个组发的一个意思。<br>那么这个东西也很好理解，在你在街上你直接说一下，所有的男生请过来。<br>那么这时候男生和女生是不一样的，男生是一个组，女生以及其他位置性别的一些人，那么就是无关的，对吧？<br>那么你要的其实就是是一部分男性的东西，你要给他们传输什么、说什么，这是你的信息，你要做的事情与其他人无关，他们也不会收到这样的信息，这就称之为多播。</p><p>那么最后一点也就是咱们的广播，广播是什么意思？</p><p><img src="/../images/image-20220223043917355.png" alt="image-20220223043917355"></p><p>就是给所有的设备都发送信息，那么这就称之为广播。<br>就是一个局域网内的所谓设备，或者是你给你局域网以外的设备发送一个广播。<br>那么这里要说的，咱们的广播一定比多播更强嘛？<br>其实不是的，其实最先出来的概念是单播，然后是广播。<br>这也是为什么咱们的title叫做单播广播，最后才是多播。<br>其实多播是后面出来的概念，而多播这个概念它其实涵盖了单播与广播的优点。<br>广播是什么意思？<br>广播就是你在它广场上拿着一个喇叭直接吼了一句，那么所有的人，无论男女老少，全部都能收到你的这个信息对吧？<br>那么至于究竟有哪些人真正有用，那这就是无干的了。<br>就比如你在广场上直接拿着广播，吼了一句，所有的年轻人请过来一下。<br>那么这个时候虽然说你要的是年轻人，但是你在广场上直接用喇叭去吼的，那么所有的年轻人、老年人或者是小孩、或者是男生、女生都能收到你的信息。<br><strong>而之所以只有这部分年轻人过来了，是因为其他设备认为这个信息与我无关，所以说他就选择了不处理。</strong><br>那么这就是广播，广播就是说你对你所在的。<br>网段之内的所有设备直接发送一条信息，究竟这个网段之内哪些设备对你这个信息感兴趣，那么就是对你的设备应该要做的事情的一个处理了。<br>那么当然这会找到造成的问题，就是如果说一旦某一个设备或者是某一批设备一直发送广播的话，会导致咱们的一个局域网或者是某一个网络段之类的一些信息带宽被占满，也就导致了咱们的一个信息的一个混乱。<br><strong>所以说咱们现在的路由器都具备一个拒绝发送广播的一个策略。</strong><br>当你的广播发送出去之后，一般而言仅仅只能够在你的路由器内部进行广播，而不能在你路由器以外的地方去广播。<br>我现在在我家里面我发一个广播，你家里面的电脑能收到吗？<br>肯定不能啊，这就是因为我的广播发送之后，在我家的路由器上面已经被拦截了，仅仅只在咱们家里面的这个路由器下面的这。<br>设备之间进行广播，而路由器以外的设备是无法感知的。<br><strong>而多播的优势是什么呢？</strong></p><p>它能够直接给指定的设备发送这些信息。<br>那同理，我们举的广场上吼喇叭的这个例子来说，我们之前说的是我们直接去吼喇叭，这个时候呢我们换一种东西。<br>我看见下面有男生、有女生、有年轻人对吧，我这时候直接过去，我把所有的男性全部挑出来，挑出来之后我直接对这一部分男性说，这个时候是什么呢？<br>我虽然也是直接对一批人说，但是我<strong>提前会进行一步什么筛选</strong>，我能够提取出我<strong>真正有用的</strong>这一部分的设备，然后我再对这一部分设备进行发送信息。<br>那么这个时候呢我这一批设备一定是对这个东西感兴趣。<br>我对来信的这部分人说，我给你们介绍一个找女朋友的机会对吧，那么这个事就是我对他们说的心，他们都是感兴趣的。<br><strong>这就是多播与广播之间的区别</strong>，多播他一定是能够先进行一定的分组以及筛选之后我直接对这一部分数据发送数据。<br>它的优势是比广播更好，性能也更优越，但是它相对实现起来要复杂一点。<br>当然多播其实有专门的多播的一个地址广播有广播的地址，而我们常用的其实这个广播。<br>所以说咱们后面有个例子呢其实也是用的一个广播。<br>多播呢大家可以了解一下，在今后的一些实现当中呢，自己去实现一下咱们的一个多播，其实多播比广播更优越。<br>当然单播其实这个东西你只是说点对点之间是非常优越的。<br>如果说你想要一次性对六个人发消息，那么你采用点对点的话，你需要给六个目标地址重复发，那么这是你需要发六次。<br>而多么和广播呢其实你只需要发一次，你并不是说你给这些人发了这么多次，你仅仅只需要发一次。<br>至于他们怎么收到这个信息，是由路由器来负责转播的那么。<br>这个操作过程当中不需要你进行操作，所以说你电脑的s带宽以及你电脑cpu的性能消耗是非常低的。<br>前面说了单播广播以及咱们的多播。<br>那么来说一下，具体这几者之间的区别是什么呢？<br>这就涉及到ip地址一个类别的一个选择了。</p><p><img src="/../images/image-20220223044332934.png" alt="image-20220223044332934">这是一个abc de五个网络ip地址的一个类别的一个图，a类地址呢也就是咱们最外围的一部分的地址。<br>那么这部分点前面我们说过，已经被分配完成了，对吧？<br>啊b类以及咱们的c类，其实我们常规使用的家庭里面的这部分设备都是属于c类的。<br>我们的子网源码一般而言都是二五五点二五点零。<br>其实我们可以看得出，指往年嘛，abc分别是前面每到后面就多了一个二五，对吧？<br>那么到我们的cn的时候，其实二五五后面是点名，然后我们的ip地址一般而言是幺九。<br>二点幺六八点多少多少，对吧？<br>所以说这就是幺九二到二二三之间，这就是属于咱们c类的一个地址。<br>第一类呢是从二二四到二三九之间的一个基准。<br>这个地址呢是专门为多播预留的，所以说多播之所以比广播更优越，也是因为多播它是专门有一部分地址用于多播的，这部分地址是一份预留的地址，这是能够被所有的路由器所感知的，所以多播其实是更为优越的。<br>那么一类地址呢是实验性的，用于研究的，那么这部分地址我们不做考究。</p><p>来说一下我们怎么样去得到一个广播地址。<br>首先我们看一下二五，五点二五点二五，四个二五其实是一个受限的广播地址。<br>假如你往这个二五五点二五点二五这下面的两千端口号发送一个信息，其实只有你的局域网内的设备能够收到你发送这个信息。<br>至于他究竟对这个信息感不感兴趣，就看他对没对两千的这个端口进行监听。<br>那么c网的一个广播地址一般而言是前面三位当然是不固定的，那当然了第一位是固定的幺九二对吧，第一位是咱们的幺九二到二二三，至于后面两个呢是不固定的。<br>咱们后面的一个就是二五五，这是咱们的一个非网的一个广播地址。<br>一般而言就是幺九二点幺六、八点幺点二五五。<br>如果说你想要为你家里面的路由器下面的所有设备发送一个广播呢，两个办法。<br>一个呢是发送全二五五的一个授权广播地址，或者是直接发送幺九二点幺六、八点幺点二五，这就是给你下面的设备发送一个广播。<br>当你除了给c网，还可以给b网的一个子网段下面的设备发送一个广播，那么这就涉及到你不同的广播地址的运算了。<br>一般而言，咱们的广播地址就是最后一位为二五五。<br>第一类的ip地址为多报预留，这是我们前面讲过的。<br>来看一下咱们的一个寻常的一个网络信息。<br>这是我的电脑的一个信息。</p><p><img src="/../images/image-20220223044637416.png" alt="image-20220223044637416">可以看出我的电脑的一个信息是ipv四地址对吧，幺九二点幺六、八点幺二、四点七，这是我的ip地址。<br>那么我的路由器的地址是多少呢？<br>幺九二点幺六、八点幺二四点幺，对吧。<br>我的指望颜码是二五五点二五点二五五点零，这是我的指望野马。<br>而指望野马呢一般。<br>而言，最后一位是您，但是您并不是百分百的。<br>我们前面的三位是固定的二五五点二五点二五，那么后面一位并不一定就是零，前面三位都是二五，就是c网地址。<br>那么最后一个呢取决于咱们的一个路由器的一个分配策略。<br>我们后面来看一下ip地址的一个构成。</p><p><img src="/../images/image-20220223044730763.png" alt="image-20220223044730763"></p><p>这是一个ip地址，幺九二点幺六八点一百点一，我们把它分为四个部分，其实四个部分加在一起，每一个部分呢是一个int，对吧？<br>其实呢正方我们用的不是一个硬的去存储这个值，这一个整体呢是用了一个什么短点型去存储的，这是一个八位这也是一个八位。<br>其实这个东西用一个bat这一个bad case，一共就是四个比特，四个字节去惩处它。<br>那么其实四个字节就是int，指咱们的一个ip地址，用一个int值全部就可以完成。<br>就是有人说。<br>明明这里是四个int对吧？<br>那么这里要说的是这个地方的四个input，它最大数是多少是零到多少，零到二五或者是负的幺二七到幺二八之间，对不对？<br>那么这是咱们的一个范围。<br>那么这个范围呢其实并不是占用了一个全部的int的值范围，我们把它进行一定的概括之后的话，在下面可以看得出其实是八位八位加八位，其实这一共就是高八位以及低八位的一个过程嘛对吧？<br>我们把四个八位加在一起其实就是三十二位，三十二位其实就相当于一个intent值，我们把这一个东西全部加在一起，其实可以直接构成一个intent值。<br>那么来看一下幺九二，其实就是幺幺后面六个零对吧，这个地方比较重要。<br>幺九二前面两位是幺幺，后面几位是零。<br>而最后一个点幺的话那么就是最后一个为零，这个东西呢涉及到一个二进制的一个转换，那么这个点大家记一下就好。<br>来看一下我们一个广播地址的一个运算。<br>广播地其实是可以运算出来的，而不是固定的。<br>来看一下我们的ip地址，就拿我的电脑来说，幺九二点幺六、八点幺二、四点七对吧，就是我的电脑的ip地址。<br>而我的磁网源码是多少呢？<br>是二五五点二五点二、五点零。<br>二五五相当于什么二五五相当于我们前面刚刚说的那个地方是多少三十二位对吧三十二位当中分为八位八位八位八位的对吧分别是四个八位，那么二五五就相当于八位全部为一零就相当于八位全部为零对吧，所以前面就是八位全部唯一八位后面全部为零。<br>那么我的网络地址是多少呢？<br>我的网络地址其实相当于就是把一和上面的这个东西进行一个以后运算，那么最后得到的就是幺九二点幺六、八点幺二、四点零，因为我最后一位是零，那么您与前面的每一个运算中其实就是一个零。<br>那么我的广播地址是多少呢？<br>前面的。<br>个网段的最后一位就是我的广播地址我前面网络地址，这个网段磁网源码是二五五点二五点零。<br>那么我具备的设备是多少多少位？<br>我基本的设备是二百五十五个设备我允许分配二百五十五个ip地址，那么我的第一个ip地址是我的网络地址，最后一个ip地址是我的广播地址。<br>这个问题就比较简单，你把你的指纹源码和你ip的进行一个有效运算，然后最终会得到你的网络地址，而网络地址得到之后同时再去看最后一位，最后一位如果是零，您的话代表着我的八个比特全部都是，八个比的全部都是零的情况下，我允许分配二百五十五个ip地址，那么我的第一个零就代表我的网络地址，我的最后一位二五五就代表我的广播地址。<br>那么是不是所有的推广的广播地址后面都是点二五五的？<br>错的。<br>那继续往下看一下，这里也是一个网络列表。<br>也是我的本级地理幺九二点幺六、八点幺二、四点七。<br>假如我的指网点码是二五五点二五五点二五点幺九二呢，那么这时候我的网络地址是多少？<br>一样的，网上面以后运算掉我的值是一样的，依然是幺九二点幺六、八点幺二、四点零。<br>而我的广播地址是多少？<br>广播地址其实后面并不是点二五五了，为什么呢？<br>因为在这里有多少个一就代表着我有多少个网段地址，那么网的地址怎么运算呢？<br>其实我们说了，它其实是八个位，八个位的话前面两位为幺幺，后面是零零。<br>那么幺幺就带有两个对吧？<br>我们按照二进制来算，二的两次方其实就是四我可以分为四个段。<br>而我的幺幺九、二点幺六、八点幺二、四点七是处于咱们的第一个段当中，所以说我的ip地址是属于我的第一个段的最后一个ip。<br>那么我第一个段的最后一个id就是幺九二点幺六。<br>八点幺二、四点六三。<br>我们需要往后面再给大家看一下。<br>怎么算的呢？<br>二五五点二五点二五点幺九二，其实它相当于就是三十二个比特，对吧？<br>前面都是幺幺幺，最后一个把握的前面是幺幺，后面是六个零。<br>那么我允许划分的网段是二的多少次方呢？<br>两个幺二的二次方，也就是四个网段。<br>分别是哪四个网段？<br>分别是最后一位为零到六十三，六十四到一百二十七、一百二十八到一百九十一，一百九十二到二五五。<br>而我前面一台我自己的设备是属于幺九二点幺六、八点幺二、四点七，对吧？<br>那么七是属于第一个网站。<br>第一个我的我的一个保留地址是多少？<br>幺九二点幺六八点幺二、四点零，那我的广播地址是最后一位，也就是幺九二点幺六八点幺二、四点六三，这也就是。<br>我的广播地址，所以说广播地址最后一位不一定是二五五。<br>同理，我们来说一下广播通讯的一个问题。<br>我们来说一下两台主机之间是否允许广播直接通讯。<br>第一个主机幺九二点幺六，八点幺二四点七，它的主板源码是二五五点二五点二、五点幺九二。<br>第二台主机幺九二点幺六、八点幺二、四点一百，它的子网源码呢也是一样的。<br>那么这两台主机可以直接允许广播通讯，把我的主机发送广播之后，主机二能够收到吗？<br>其实这是不能的。<br>为什么呢？<br>我们前面也说了，运算广播地址之后，其实主机的广播地址是幺九二点幺六、八点幺二四点六三，而我的主机二是处于第二个网段内，我主机二的广播地址只是幺九二点幺六、八点幺二、四点幺二七，那么它两个的广播地址本身就不一样，你在主机一类发的广播，其实主机二并不能收到。<br>就算你发送的是一个受限广播地址二五五点。<br>二、五点二五点二五，那么依然指标也无法收到，这就是广播通讯之间的一个广播地址的运算的问题。<br>那么大家呢在后面的过程当中可以自己再去查询一下我们的一个广播地址如何运算。<br>那么好的，我们本章节呢就差不多到此结束了。<br>那后面一个章节呢我们会进行一个案例的一个实操，真正的来进行实现一个广播的一个发送以及广播的一个信息接收。<br>谢谢大家。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;socket网络编程系列之二&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Socket网络编程-入门</title>
    <link href="http://example.com/2022/02/22/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%85%A5%E9%97%A8/"/>
    <id>http://example.com/2022/02/22/Socket%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B-%E5%85%A5%E9%97%A8/</id>
    <published>2022-02-21T20:29:25.000Z</published>
    <updated>2022-05-17T03:58:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>socket网络编程系列之一</p><span id="more"></span><h2 id="Socket网络编程-入门"><a href="#Socket网络编程-入门" class="headerlink" title="Socket网络编程-入门"></a>Socket网络编程-入门</h2><h3 id="网络模型-对应关系"><a href="#网络模型-对应关系" class="headerlink" title="网络模型-对应关系"></a>网络模型-对应关系</h3><p><img src="/../images/image-20220222043112279.png" alt="image-20220222043112279"></p><h3 id="Socket-与TCP、UDP"><a href="#Socket-与TCP、UDP" class="headerlink" title="Socket 与TCP、UDP"></a>Socket 与TCP、UDP</h3><p>socket 是什么呢？其实socket 就是一个套节字，在不同的操作系统，安卓或者是windows 或者是mac 当中都有提供套节字a p i 的一个基础的功能。那么我们通过调用socket 的对应的功能去使用t c p 或者是u d p 进行对应的一个数据发送。</p><p>那么为什么要这样呢？这里来给大家进行一个扩展。在我们前面我们有说到对于计算机而言，我们把数据从a 手机传递到b 手机。我们最主要的就是把一个数串传递过去，对吧？那么我们怎么样才能传递过去呢？我们需要把这个数据加工成最底层的一个网络的电信号或者是光信号进行一个传输。那么在这个过程当中，我们是不是一定要去关心我们的一句话，比如说hello word这个字母，它究竟变成了光信号的哪一个东西呢？</p><p>其实我们不需要关心这个东西。因为如果说你每次都要去关心这些东西的话，那么对你的程序开发也是非常非常麻烦的。而且对于整个系统的稳定性而言，是非常不健壮的。所以说就会出现我们前面所说的网络汽车模型。</p><p>那么在这里呢也给大家再进行一个巩固。<strong>打个比方</strong>，我们从a 公司和b 公司之间的一个关系，a 公司要把一个货物发送到b 公司，对吧？首先a 公司要做什么事情？a 公司要把这个货物进行一个包装，对吧？他把货物进行包装，那么这个包装它其实就是一个层面的一个操作。就它的底层公司与公司之间的一个约定，你需要把这个货物进行一个包装，对吧？再后面一点，首先包装了之后的话，你要把你包装的这个货物进行一个标签的打包，对不对？你要打包。那么这就是说货物部门之间的一个关系了，你贴标签、打包以及后面你要进行运输过程当中呢。就涉及到你可能要走水路，走空运，走铁路，对吧？这个时候你要涉及到，你要贴上你对应的一个方式，你的车厢号。那么这个就是物理层面的一个传输了。所以说当你把你的货物丢到了一个火车上的，到了对应的地址的时候，火车上拿出来。他首先要看见的是什么？看见的就是我是从什么地方到达我这里来的，那么我需要做什么事情呢？我首先把我的这个车厢到了，对吧？我就把它卸货。然后呢，我看一下标签，哎，标签上面说的是到哪一个哪一个区，对吧？我要把它丢到哪一个区里面去。然后区里面呢它又一层一层的往下走，最终呢才能走到b 公司去，这就是不同协议层之间的一个交互过程。而如果说你一个公司要去管究竟这个货物走空运还是走水运，通过什么样的汽车去送你自己去把这个货物送到b 公司去。那么其实非常浪费人力的，你自己去把你的货物送到公司，一个货物还好多个货物的话。其实就非常麻烦了，所以说就不同层级之间的一个关系，运输交给快递来做就好，对不对？</p><p>所以说这就是咱们的一个传输模型的一个七层网络模型的概念。之所以存在的一个原理，那么socket 与tcp udp之间的关系呢，<strong>其实socket 就是对tcp udp 之间的一个封装</strong>。</p><p>还有我们来说一下<strong>socket 究竟是什么</strong>？简单来说socket 就是i p 地址与端口的一个结合协议。这个协议名称叫做RFC 793。那么大家可以去查询一下，是一种地址与端口结合的一个描述协议。</p><p>因为它是一个描述协议，对不对？它用来描述什么，<strong>描述地址与端口之间的一个关系</strong>。这个就是i p 地址端口，就是我们电脑上所谓的端口。这里呢给大家提一下端口。比如说你访问一个网站，那么你访问的其实就是80端口，就是咱们约定好的一个h t t p 协议的一个简单的端口。其实就是80端口。</p><p>接着往下走，TCP&#x2F;IP协议的相关a p i 的一个总称是网络a p i 的集合实现，对吧？它其实呢就是对t c p i p 的协议，相关的a p i 的一个总称。TCP&#x2F;IP 它有对应的协议，对吧？说起来就是对这些协议的一个实现一个描述，然后集合在一起。</p><p><strong>涵盖了什么呢</strong>？涵盖了我们的流套接字，以及咱们的其实这个地方就是咱们的t c p 和udp 了。</p><p><strong>那我们来说一下socket 的一个组成与作用</strong>。首先在网络传输当中，它是用于标识两个端点之间的连接，什么意思呢？在传输的整个过程当中，比如说你的a 计算机和b 计算机之间，我们通过socket 进行连接。</p><p>在你看来，认为是物理层面的连接吗？不一定，它物理层面不一定是时时刻刻都有连接的，它有可能断开，有可能在你这个程序之外它还连接。所以说你的程序这个socket 并不管物理层面的一个连接，它是用来标识的，是唯一标识两个端点之间的连接。</p><p>那我们接着往下说端点包括什么？包括i p 和的一个端口 Port。<br>一个计算机有非常多的端口，那么它对外有一个i p 我们的作用。所谓的作用就是标识这个i p 一个i p 代表一个计算机的话，它就代表的是两个计算机之间某一个端口上面连接，这个怎么说呢？</p><p>就好比你的家i p 就是你的家，端口就是你的窗户，通过你家卧室的窗户打开门，就能看见你对面女神的那个窗户口，对吧？这个之间你们之间通过眼神进行连接，对吧？所以说这就是端点与端点之间的一个连接。</p><p>它最主要的四个要素就是<strong>客户端的地址</strong>，<strong>客户端的端口</strong>以及<strong>服务器端的地址</strong>和<strong>服务器端的端口</strong>。</p><p>我们接着往下讲socket 的一个传输原理，在这里给大家描述的是一个客户端和一个服务器。</p><p><img src="/../images/image-20220222044912926.png" alt="image-20220222044912926"></p><p>首先呢我们的客户端呢它有一个地址等于i p 一，服务器端的地址等于i p 二，就是满足两个条件之一了，对吧？i p 地址有了。那么首先第二点我们来说一下它的端口是什么，端口是二五端口，对不对？二十五号端口。<br>那么我们的i p 地址加上端口，就等于咱们的socket 的一个协议。同时呢它做了一个什么作用？就是email 对吧？它是一个email 服务，就是咱们那个web server。我们的数据呢其实就通过咱们的这个i p 地址与端口之间的这种连接方式，我们就能实现客户端与服务器端之间的一个交互。你要去取一个邮件，对吧？你就通过二十五号端口去取邮件说唉我有没有邮件，有的话，我去给我一个返回，对吧？这个过程就是咱们那个socket 它的一个传输原理的一个过程。</p><p>再往下细讲，socket. 当中的一个t c p，我们来说一下t c p 是什么呢？t c p 是面向连接的一个通讯协议，面向连接对方。要注意一点是面向连接的，它是通过三次握手建立连接通讯完成时要拆除连接。就说你和你的女神要进行连接的时候，你首先要问他一下，哎，你有没有空啊，我可不可以给你说说话。然后你的女生跟你说，哎，我有空对吧？那么这个时候呢才会进行到第三次说，哎，好吧，我们现在连接连接之后呢，那么你们之间就可以交流进行谈话了。然后后面到拆除连接，拆除连接就是说你们两个之间说哎，我要走了，我有事我要走了，对面就说好吧，那你走吧。然后你对面说，那我就能走了，然后对面说好吧，你走了，然后最后你走了，他断开了，他也不再关注你的窗户了。那么你们两个之间就不会再经过窗户之间的一个对望了，对吧？你要告诉他 就走了，对面的人才知道。接着我们往下说，由于t c p 是面向连接的，所以只能通信于端到端的一个通信。什么意思啊？你在看你的女神的时候，你在跟你的女神之间进行交流的时候，你是不能去看其他人。这就是t c p 的一个东西。你在某一个时刻你只能去连接到它的某一个端口。所以说它是端到端的一个通信，是面向端到端的一个通信。</p><p>我们再说一下u d p，u d p 这个东西啊跟t c p 差别是蛮大的。首先第一点u d p 是面向无连接的通信方式，你不需要连接。u d p 的数据包括<strong>目的端口号</strong>和<strong>原端口号</strong>的信息。<br>什么意思呢？u d p 的数据里面它涵盖了一个目的的端口号，就是说包括了目标的端口号和你自己的一个端口号。你在对外说的时候，比如说现在你要说一句话，对你的女生讲对吧？这时候你你女神是不在的，你是可能说给了他的妈妈，你给他说，我想要对某某人说，哎，我喜欢你，对吧？这句话首先呢你说出这句话的时候，你妈妈作为一个转接者，那么她给她的女儿讲的时候怎么说呢？哎，某某某某公子对你说了一句，我喜欢你这句话，对不对？<br>他的妈妈之所以能够找到他的女儿，那么就一定能够知道说你是对他女儿说的。那么这时候就包括了目标端口号。当他妈妈在转述这句话的时候呢，其实就包括了说某某公子，对吧？某某公子就是原端口号。哎，对，就是说的你。<br>由于通讯是不需要连接的，所以说可以实现广播的发送并不局限于端到端之间的一个发送。这个东西很简单，假如说你是一个老师要传输学校的一个通知，让你的班上去，对吧？你是一个一个学生的，找学生对他说某一个安排呢，还是说你在上课的时候直接对着全班说一下这样来的哈，对吧？这个时候就是t c p 和u d p 最大的区别了，t c p 是一个一个个的来。那么u d p 你可以在班上直接说，哎呦，吼一句，明天不上课对不对？这个东西就完成了。<br>那么ok 这就是咱们的一个u d p 的一个协议。当然。</p><p>我们后面还会讲解一下t c p u d p 具体的一些区别。</p><p>我们来说一下t c p 的一个传输图解。</p><p><img src="/../images/image-20220222045503857.png" alt="image-20220222045503857"></p><p>t c p 的传输图解，一个设备传输到服务器上。唉，它首先是进行一个t c p 的数据发送，同时呢或它会收到一条t c p 的回复，代表这条数据收到了。那么这个回复呢并不是由你来完成的，而是t c p 层面，数据层面已经完成了这个工装。当你要发送一个数据的服务器的时候，其实这条数据只有两种状态，一种是发送成功，一种是发送失败。只有这两个状态，只有成功与失败，没有说发送一半，他接收到一半的情况一定是你发送过去，他真的收到了。同时他给你了一次回送之后，他收到了这条数据才代表成功了。所以他只有两个状态，要么成功，要么失败。</p><p><img src="/../images/image-20220222045530164.png" alt="image-20220222045530164"></p><p>udp就不一样了，他只管发送数据，他不管回送的，他只管把数据往下发。他不管回送的，比如说你现在去班上给那些学生说明天不上课吧。哎，假如这个学生他没在班上怎么办？你难道还单独去找一下这个学生？不会的，u d p 其实不会的，他直接就吼一句，明天不上课，ok 完了就完了。他对全班同学一说，说完了就完事了，不存在一个某个学生，他有没有听到要对你进行一个反馈，不存在这个东西，不存在说每个学生还要对你说，哎，我听到了，我明天不会来上课了，不存在这个东西。</p><p>所以说这就是u d p 和t c p 最大的一个区别。好的，我们本小节讲了一个t c p u d p 的一个图解，也讲了咱们的socket 究竟是一些什么东西。那么我们前面两个小节都讲了一些理论的知识，后面一个章节我们会给大家讲解一下一个实际的案例。那么在讲解实际的案例之前呢，给大家说一下一个cat serious i p u d i c a t i o n 就是咱们所谓的c s 模型。在t c p i p 协议当中，两个之间的主要方式就是。<br>c s 模型c s 其实就是客户端与服务器之间交互的一个模型，就称之为c s 模型。最主要的目的就是协同网络当中的计算机资源，服务器模式进程间的数据共享。为什么要有c s 模型？比如说你访问一个网站，你有没有想过为什么这个网站一定要部署在服务器上？这个呢其实也蛮好理解的。比如说你自己做一个网站，你难道把你的这个网页发给全世界的每个人都发一份备份给他，说我的网站是这个。然后呢，你的网站有更新的时候，你难道给全世界的人都说一下你的网站有副本更新的，全部叫他们更新一下吗？不会的，你直接把你的网站部署在一个服务上当某人真正需要看的时候，他通过这个c s 模型，他的客户端去访问你的这个服务器，得到你的网站，来看你的网站。所以</p><p>说这就是c s 模型，也就是协同的计算机当中的一个网络资源服务器模式以及进程间的一个数据共享。<br>进程间的网络数据模型共享呢，其实这个也蛮简单的。在你的实际的开发过程中，可能你的某一个软件提供的某一个服务，对吧？比如你现在一个网站，你自己的有有一个程序提供了一个一加一等于二的这个过程，你不想其他软件再去实现，一加一等于二的这个过程。那么你可以把你的这个软件对外暴露出去，说我可以实现某个数据加上某个数据，等于某个数据的过程。其他人呢就只需要把前面两个数据传递给你，然后他就能得到他的结果，这就是进程之间进行数据共享。常见的呢就是f t p ，sm t p 和h t t p  这就是本小节主要的讲解。</p><h3 id="Socket-TCP牛刀小试"><a href="#Socket-TCP牛刀小试" class="headerlink" title="Socket TCP牛刀小试"></a>Socket TCP牛刀小试</h3><h3 id="报文、协议、Mac地址"><a href="#报文、协议、Mac地址" class="headerlink" title="报文、协议、Mac地址"></a>报文、协议、Mac地址</h3><p>同学们，我们前面一个章节来讲解了一些简单的代码，那么在这里呢我们紧接着要进行的是一些理论知识的一个扩充。<br>之所以要讲这些理论知识，并不是说这些理论知识你一定能够在后面的开发当中能够用上，但是这有助于你对整个socket体系的一个了解，以及也是扩充你的一个思维上的一种思考方式的一种额外知识点。<br>所以说我认为理论还是蛮重要的。<br>首先我们来讲报文段。<br><strong>什么是报文？</strong><br>报文是指tcpip协议传输过程呢起着路由导航作用的一个东西。<br>那么在tcpip协议当中，你要发送一个数据到b客户端。<br>就拿我们上一节所讲的demo来说，你要从a这个进程发送一个数据到b进程，它其实并不是说简单地把一个字符串转换成byte数据传递过去而已。它在整个过程当中还需要把拜托数据进行一定的报文解析，然后加上对应的字节头，然后再把这个字节头信息传递到b程序。<br>然后在b程序当中，呢，他会把头解析开之后，最终得到我们后面的报文段。然后也就是咱们的一个buffer数据。<br>拿了buffer数据之后再丢给应用层，应用层最终再把buffer数据解析成咱们的这个字符串，也就实现了咱们一个字符串的一个交互过程。<br>它的主要作用呢，报文段是用以查询各个路由段的ip地址、交换协议的ip数据包，那么这个报文数据呢就包括这些信息，同样的报文充当整个tcp协议数据包的一个路由功能。<br>报文在传输过程中是会不断地封装成组封装成包、封装成针来进行传输。</p><p><strong>那么这些东西呢主要的目的是为了什么？</strong></p><p>当你的一个数据过于太大了时候，那么他会把你的一批大数据转换成对应的一些组合，是包或者是帧，然后解析成一个一个小的数据点，然后通过小的数据点传输过去。</p><p>比如说你想发送一个大文件，对吧，文件是一个很长很长的一个包数据，但是呢你在发送的过程当中，它是需要不断的校验的，tcpip协议当中是先要发送，然后收到一个返回的信息，对不对？它是有一个校验的过程，所以说我需要先发送一部分过去，然后呢在回送这一部分成功与否，那么整个过程呢它会把你的整个buffer解析成很多很多小的buffer，然后在前面加上一定的咱们的一个报文头，然后呢进行一个批量的发送，每一批数据它都有一定的校验作用。<br>封装的方式呢就像我说的，就是在一些控制信息上面加上一个头部及报文头。</p><p>然后后面来说一下我们所谓的<strong>传输协议</strong>。顾名思义就是一种规定、一种约束。<br>约定待遇配置在网络传输过程依然是适用的，网络传输的流程之所以是健壮的、稳定的，其实也是得益于咱们的一个基础的协议的构成，必须要双方遵守共同的协议。<br><strong>简单来说就是a到b的一个传输数据，b能够识别，反之b返回给a的传输数据a也能识别，这就是协议。</strong><br>两个人之间遵循这样一个协议的关系。<br>那我举个例子来说，你想要打电话给你的妈妈，那你首先需要进行一个拨号，然后你的妈妈手机会进行响铃，然后你妈妈接电话，然后呢跟你进行通话，你说一句话，他回一句话，对吧？<br>然后你们直接进行一个交互的一个过程。</p><p>那么在这里你首先是需要进行拨号，你妈妈电话才能够响铃，同时他要接听电话之后，你们俩这样才可以进行通话。那么这整个过程当中要经过一系列约定好的、规定好的一个过程，这就称之为协议。</p><p>那么同样的，你去访问一个网站，你首先是需要输入这个网站的地址，那么它需要进行一个网站的一个地址查询，然后呢去访问这个网站对应的服务器上面的ip地址和端口号，然后呢网站会返回它的首页信息给你，那么整个过程就依次往下进行交互，所以说这样的一个过程就称之为传输协议。</p><p>那么第三点，我们来讲一下<strong>mac地址</strong>。<br>mac地址呢是一个media accept control的一个缩写，译为媒体控制访问。<br>媒体访问控制或称之为<strong>物理地址</strong>、<strong>硬件地址</strong>。<br>在所有所有的硬件地址上都有这样的一个信息，叫做mac地址，无论是你的手机还是。<br>你的路由器，还是你的电脑，以及你的每一台通讯设备，其实都有一个地址叫做mac地址，其实它用的重就是标识这个物理设备它在网络上的一个地址。<br>那mac地址其实是有限的，mac地址用来定义网络设备的一个位置，对吧</p><p>形如：44-45-53-54-00-00 就是一个mac地址，其实就是与你的身份证类似，你有你的身份证，每个人都有自己的身份证，那么就用来标识你这个人。那么每一台可以上网的设备它都有这样的一个mac地址，用来标识这个设备它的位置。</p><p><img src="/../images/image-20220222061132943.png" alt="image-20220222061132943">哎我们来看一下，这是一个手机端的一个检测图，我们来看一下这里面有些什么样的信息。<br>在这里我们可以看到安卓对吧系统是安卓，然后呢有一些蓝牙版本啊什么什么之类的。<br>那么我们在这里呢并不关注这些东西，我们。<br>需要关注的是什么mac地址在这里。</p><p> 这就是咱们的一个mac地址，当然这前面还有一个b s s id，然后它也是一个类似mac地址一样的东西，它是一个无线的网络的一个他自己的一个网卡的一个地址。<br>所以说这个地方那它是和mac地址非常类似的。<br>当然下面还有一个咱们的ip地址，是咱们当前的一个网络的ip地址，对吧，以及这边有咱们的一个普通网络的一个信息。<br>好了，我们再接着往下看一下。</p><p><img src="/../images/image-20220222061212075.png" alt="image-20220222061212075"></p><p>这是第二幅图。<br>第二幅图上的话把上面的一些细节进行一个简单的归类、总结。那我们接着来看一下ip地址，这是咱们的一些基础的ip信息的一个设置，以及咱们的mac地址对吧那么可以说咱们每一台设备都有这样的信息的存在，有咱们的ip地址，有咱们的mac地址。</p><p>我们之所以有ip地址。其实也是因为咱们先要有mac地址，mac地址代表你这台硬件设备的一个物理地址，同时你的i p地址呢是当前局域网根据你的mac地址分配给你的一个临时的、可用的一个ip地址而已。</p><h3 id="IP、端口、远程服务器"><a href="#IP、端口、远程服务器" class="headerlink" title="IP、端口、远程服务器"></a>IP、端口、远程服务器</h3><p>我们上一个章节来讲解了一下咱们那个报文、mac地址，以及咱们的一些协议方面的一些信息，那我们本章节来讲解一下咱们的ip以及咱们端口、以及远程服务器的概念。<br>本章节呢我会用一些示意图给大家讲解一下基础的一些原理，尽可能的让大家不感到枯燥。<br>好了，我们首先来说一下ip地址。<br>ip地址即互联网当中的一个协议地址，缩写为一个ip地址。<br>那么当然上面就是咱们一个互联网的一个协议地址，是分配给网络上使用，网际协议设备，数字标签。<br>常见的ip地址分为ipv4和ipv6两大类。</p><p>那我们来看一下，ip地址由三十二位二进制组成，常以192.168.0.1的形式出现 </p><p>xxx.xxx.xxx.xxx<br>每一组叉叉代表着小于或等于255的十进制数，当然它是大于零的。</p><p>比如说208.80.152.2</p><p>后面我们来说一下ip地址分为abcd一大类，其中e类属于特殊的保留的地址，总的数量是多长啊总的数量是四十二亿个。<br>最终的时候是在二零幺幺年二月三日的时候，其实所有的地址就已经被分配尽了，所有的ip地址其实已经被分配完成了，你现在所用的ip地址其实并不是整个因特网的一个ip地址，你的ip地址其实只是一个局域网类的一个地址，你的局域网上面可能还有局域网。<br>那么一直到整个因特网的时候呢，它的那个地址其实是已经固定好了，不可变的。<br>如果主机号全部都是1，那么这个地址直接为广播地址，就比如说1.1.1.1，这就是一个直接广播地址，</p><p>地址255.255.255.255 受限的广播地址代表着你当天局域网的一个广播地址。<br>你如果说使用udp往这个ip地址发送信息，那么你的局域网内的其他设备全部会收到你的udp的广播。</p><p>如果说你往1.1.1.1的这个地址发送一个udp的话，理论来说它会往整个因特网发送一个udp协议，但是其实它是会被对应的局域网的防火墙所拦截，并不会发送出去。<br>紧接着来说一下ipv6，因为ipv4的一个数量是有限的，而且比较少，四十二亿了，所以说它已经被分配完成了。<br>那么在后面呢为了解决新增的一些设备在因特网当中的一个地位，就提出了i p v6的概念，总共有128位长ipv6的地址表达形式一般采用32十六进制数，也可以想象成是1632。</p><p>有两个逻辑部分组成，这六十四位的网络前缀和一个六十四位的主机地址，主机地址常常是根据物理地址自动生成，这个地方的主机地址呢就是一般而言是会根据你的mac地址啊或者是你的一些硬件设备信息来组成。<br>那么一个六十四位的网络前缀呢就在代表着你的当前网络的一个状态，那么加在一起其实就形成了你的ipv6地址，这就是一个ipv六地址，看起来比较复杂。</p><p><img src="/../images/image-20220222062526773.png" alt="image-20220222062526773"></p><p><strong>ipv6和ipv4之间的关系是什么？</strong><br>因为ipv6是大于ipv4的，它的数量是大于它的，同时ipv4的地址一定是可以转换成一个ipv6的一个地址的，但是ipv6的地址是不一定能够转换成ipv4的地址。</p><p>那我简单来说一下第二个大点<strong>端口</strong>。<br>如果说把ip地址当作一间房子端口，就是进入这个房子的门或者是窗户，这是咱们之前提过的概念，在不同的窗户后有不同的人。<br>那么房子当中的用户与外界交流的出口就是咱们的房子和端口组成了这个人对外交流的一个出口。<br>外界的鸽子也就是信息飞到不同的窗口，也就是给不同的人传递信息。<br>那么你在一个房子里面有不同的人，就代表着你的不同的程序的进程，而外面不同的鸽子飞来的时候，就代表着不同的进程发送信息。<br>从0到1023端口以及1024到49151端口都是特殊端口。<br>那么特殊端口呢后面我会补充到一份文档当中，特殊端口里面有非常多的一些特殊意义。<br>那么这些端口呢是我们不能够直接使用的一个端口号地址，这是一些基本的一些特殊端口号。</p><p><img src="/../images/image-20220222062807481.png" alt="image-20220222062807481">那么首先我们来说一下二零二幺号端口一般会用作于f t p协议，它是一个tcp的一个端口号。<br>二十二号端口呢。<br>一个s s h，二十三号是care night，二十五号是s m t p。<br>当然五十三号是dns。<br>你说之所以能够访问一个网站，其实是因为它首先去进行一个dns解析，然后拿到你的域名对应的i p地址和端口号之后才能够进行访问。<br>那么当然还有t f t p、h t t p对吧，h t p是咱们非常常见的八零端口，还有咱们邮件协议等等，还有h tt ps是四四三协议。</p><p>上面来讲了下特殊的端口，那么紧接着往下说，计算机之间依照互联网传输层面的tcpip协议通讯，不同的协议对应的不同的端口号，这是我们上面已经说。<br>后面的49152到65535端口是属于动态端口范围。<br>就比如说我们之前客户端连接到服务器的时候，生成的这个端口号，其实就是处于这个区间的一个动态的一个端口。<br>没有端口是可以被正式的注册使用的，就是说你不可能说某个端口号就是我一定要用的，你不能对外面的人说这个端口号就一定是我用的，外面的人不能用这个端口不能这样的，这个端口号都是一个动态的端口。<br>所以说你不能够固化它。<br>那么来说问题第一点，端口号的总数是六五五三六，那么能够建立多少个连接？<br>六五三六个?<br>其实不是。<br>这个地方的六五三六是代表着你自己的本地的电脑的端口号。<br>那么这个端口号呢有几个点，首先端口它对应的ip你可以理解为ip，就是房子，端口就是窗户。<br>不同的ip就是不同的房子。<br>所以说不同的房子之间就有不同的这个端口号。<br>也就说你的电脑如果说一旦具备多个ip地址的一个方法的话，那么你可以有多个端口号。<br>也就是说你的端口号虽然说每一个ip地址都是这么多，但。<br>在你有多个ip地址的情况下，你的本地的电脑可以建立的连接数会远远大于六五三六个。<br>当然了，你依然是有限的，但是对于服务器而言，端口是复用的。<br>比如说服务器他监听八零幺端口，无论多少个客户端来，他都是通过把你号端口进行交互的，不会创建额外多余的端口。<br>来说一下数据传输的一个层次，这是咱们的之前说的四层模型。</p><p><img src="/../images/image-20220222063117707.png" alt="image-20220222063117707"></p><p>程序也就咱们数据进入到传输层面的时候，传输层面有一个udp的数据，那么udp数据他会干一件事情，加上一个udp的头部，进入到后面的一个internet课程，那么这时候会进入ip数据。<br>ip数据呢前面会被加上ip header，也是ip头部，他会把前面的udp的这个一个整体全部转换成ip的一个数据，前面加上一个ip的投。<br>那么再到后面数据链接层的时候，它会把你上面的整个协议全部转换成一个真数据，代表的一帧数据，那么它会有一个帧的头部和帧的尾部。<br>这样的话它发送给b的手b的链路层，它会把头部和尾部去掉，然后得到ip数据层，往上一次丢，最终到程序层的时候又是咱们的原始数据了。<br>所以说咱们数据的发送过程是会经过层层的一个头部的追加。</p><p>那么来说一下<strong>远程服务器</strong>是什么?<br>远程服务器一般而言局域网，也就是指你家里面或者是你公司里面的网络都是属于局域网的。<br>我和你们的电脑之间是属于互联网的，而非局域网。<br>我的电脑和你的电脑之间的关系属于互联网的关系，而不是局域网，但是你的电脑和你的手机之间的关系是属于一个局域网，当然你的手机很简。<br>和电脑要连接同一个无线路由器才行。<br>默认的我的电脑是无法直接链接到你们的电脑的，因为你们的电脑在你们的局域网当中我的电脑在我的局域网当中，你虽然电脑上有一个ip地址，但是那个ip地址并不是你的互联网ip地址，而是你的局域网ip地址，我的电脑上也有ip地址，我的地址呢也是我的局网地址。<br>所以说我就算知道你的ip，只知道你的端口，你能够建立一个socket的一个服务器，但是我是无法连接你的，我连接的永远是我的这个局域网进行扫描的。<br>如果说我想要连接你怎么办呢？<br>看后面。</p><p><img src="/../images/image-20220222063359835.png" alt="image-20220222063359835"></p><p>这是咱们的一个局网里面的一些设备，这个是另外一个局网里面也是一些设备。<br>我们尝试把这台电脑跟这台电脑之间进行连接，传输数据能不能呢？<br>对不对？<br>这也是说了两个局域网之间内部的设备是无法直接进行通讯的，无法直接进。<br>连接的。<br>你可以说哎为什么你的qq可以给我的qq发送消息，那么一定是你的手机跟我的手机之间直接连接的吗？<br>不是。<br>其实是这样的，这也是一个局域网这也是另外一个局域网。</p><p><img src="/../images/image-20220222063511103.png" alt="image-20220222063511103"></p><p>我们通过一个服务器，这个服务器来具备的外网地址，就我们前面说的ipv四、ipv六，它前面都有一部分已经分配的地址，分配的这个地址就是咱们整个互联网外部的一个id，这部分地址是已经分配出去了，已经是固定的。<br>比如说咱们的一些政府的服务器，或者说咱们的主干上面的一些服务器，它的ip地址永远是固定的，而且是一个对外所有的设备都有效的一个ip地址。<br>你的电脑连接到服务器，然后呢服务器呢也连接到我的电脑，然后就实现了一个数据的交换，你把数据先发送到服务器，服务器呢再把数据通知到我，ok。<br>这就实现了我们之间的数据交互，也就是qq的一个作用。<br>qq它之所以能够你发送下去给我也是这样。<br>请接着我们来说一下我们的一个web请求流程。</p><p><img src="/../images/image-20220222063650938.png" alt="image-20220222063650938"></p><p>你的电脑去访问一个网页，你请求一个网页的时候，你的地址是幺九二点幺六八点幺点幺幺二，这个地址是你的局域网地址幺九二点幺六八。<br>遇到这样的地址一定是你的局有网地址，那么外网服务器的地址你要想访问的地址一定是一个外网服务器的地址，它的地址是什么幺幺零点九、零点四、五点六，这是一台外网地址的服务器。<br>那么首先你要进行的是你访问，比如你访问百度，你首先你你输入的是一个百度点com，对吧？<br>那么这个东西是一个域名，首先它要进行一个域名服务器的一个查询，所以说它会经过一个域名服务器的一个udp五三的这个端口。<br>下面我们也说了，五十三号端口是一个udp的一个协议端口，去查询它的地址，你的电脑就会拿。<br>好，想访问的这个百度这个服务器的具体的地址以及它的端口号。<br>他的地址假如他就是幺幺零点九、零点四、五点六，它的端口号是什么呀？<br>你访问网页端口号永远都是八零后，当你没有指定的情况下，那么就或者是八连号端口就进行一个http的协议，ok，就进行交互，然后你们两个人就可以进行传数据了。<br>当然对https就是443号端口号，都是tcp协议。<br>我们所谓的http或者是h tt ps，其实都是基于tcp进行的一个封装。<br>好的。<br>这就是我们本章节的一个主要的一些知识点。<br>那么下个章节呢我们会开始讲解一下udp相关的一些知识点，以及udp的案例。<br>好的，谢谢大家。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;socket网络编程系列之一&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Android - 在Fragment中观察LiveData时，为什么要使用viewLifecycleOwner[转]</title>
    <link href="http://example.com/2022/02/16/Android%20-%20%E5%9C%A8Fragment%E4%B8%AD%E8%A7%82%E5%AF%9FLiveData%E6%97%B6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8viewLifecycleOwner/"/>
    <id>http://example.com/2022/02/16/Android%20-%20%E5%9C%A8Fragment%E4%B8%AD%E8%A7%82%E5%AF%9FLiveData%E6%97%B6%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8viewLifecycleOwner/</id>
    <published>2022-02-16T02:37:54.000Z</published>
    <updated>2022-05-12T07:32:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用LiveData 在调用observe时传入this会报提醒，要求使用viewLifecycleOwner原因是什么？</p><span id="more"></span><p><a href="https://www.jianshu.com/p/7073ec569f7f">原文链接</a></p><h1 id="Android-在Fragment中观察LiveData时，为什么要使用viewLifecycleOwner"><a href="#Android-在Fragment中观察LiveData时，为什么要使用viewLifecycleOwner" class="headerlink" title="Android - 在Fragment中观察LiveData时，为什么要使用viewLifecycleOwner"></a>Android - 在Fragment中观察LiveData时，为什么要使用viewLifecycleOwner</h1><p>官网建议使用viewLifecycleOwner<br> 在Fragment中对LiveData对象调用Observe方法的时候，如果传递的LifecycleOwner参数为this，也就是Fragment的时候，会受到AndroidStudio的提醒，要求使用viewLifecycleOwner：</p><p><img src="https://upload-images.jianshu.io/upload_images/26005601-7b7f5e71aad256c9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>fragment.png</p><p>从类型上来说，Fragment与viewLifecycleOwner的类型FragmentViewLifecycle两者都继承了LifecycleOwner，像之前那样直接this，大部分情况下运行也是正常的，那么这里的Lint提醒是什么呢？</p><p>通过在官网寻找androidx.fragment:fragment的文档，可以看到1.2.0版本更新的内容有一条：</p><p><img src="https://upload-images.jianshu.io/upload_images/26005601-68a5cd8a1a63cf92.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>26005601-ff3b75c18a8b2c79.png</p><p>可以知道，这肯定是有他的道理。我们来一起分析一下原因：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">viewLifecycleOwner相关生命周期</span><br><span class="line">找到viewLifecycleOwner相关代码( 只看关键点 )：</span><br><span class="line"></span><br><span class="line"><span class="comment">//Fragment.java中</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performCreateView</span><span class="params">(<span class="meta">@NonNull</span> LayoutInflater inflater, <span class="meta">@Nullable</span> ViewGroup container,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">mChildFragmentManager.noteStateNotSaved();</span><br><span class="line">    mPerformedCreateView =<span class="keyword">true</span>;</span><br><span class="line">    mViewLifecycleOwner =<span class="keyword">new</span> FragmentViewLifecycleOwner(); <span class="comment">//此处创建了FragmentViewLifecycleOwner</span></span><br><span class="line">    mView = onCreateView(inflater, container, savedInstanceState); <span class="comment">//创建完成之后，调用了onCreateView()方法</span></span><br><span class="line">    ... <span class="comment">//省略无关代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//FragmentManager.java</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destroyFragmentView</span><span class="params">(<span class="meta">@NonNull</span> Fragment fragment)</span> </span>&#123;</span><br><span class="line">    fragment.performDestroyView(); <span class="comment">//此方法中执行了onDestroyView()方法</span></span><br><span class="line">    fragment.mViewLifecycleOwner =<span class="keyword">null</span>; <span class="comment">//在执行完onDestroyView()方法之后，将viewLifecycleOwner置空</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Fragment.java</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">performDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    onDestroyView(); <span class="comment">// fragment.performDestroyView()方法调用中，执行了onDestroyView()方法</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">可以发现mViewLifecycleOwner的赋值在onCreateView()之前，置空在onDestroyView()之后，</span><br><span class="line">mViewLifecycleOwner的注释也说明了这点：</span><br><span class="line">    <span class="comment">// 这在performCreateView中初始化，在外部不可用</span></span><br><span class="line">    <span class="comment">// This is initialized in performCreateView and unavailable outside of the</span></span><br><span class="line">    <span class="comment">// onCreateView/onDestroyView生命周期</span></span><br><span class="line">    <span class="comment">// onCreateView/onDestroyView lifecycle</span></span><br><span class="line">    <span class="meta">@Nullable</span> FragmentViewLifecycleOwner mViewLifecycleOwner;</span><br></pre></td></tr></table></figure><p>正如类名所示，这个FragmentViewLifecycle代表的是Fragment中View的LifecycleOwner，Fragment中View的生命周期与Fragment本身并不相同。<br> 看到这里，想必有些同学对Fragment的生命周期也半知半解，顺便温习一下：</p><p><img src="https://upload-images.jianshu.io/upload_images/26005601-c27d3b6f0b2afead.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/317/format/webp" alt="img"></p><p>Fragment.png</p><p>Fragment入back stack的过程会执行onDestroyView但不执行之后的onDestroy与onDetach，而出back stack是从onCreateView开始执行，而没有之前的onAttach与onCreate。</p><h2 id="LiveData的observe过程"><a href="#LiveData的observe过程" class="headerlink" title="LiveData的observe过程"></a>LiveData的observe过程</h2><p>温习了相关生命周期后，下面来看一下LiveData的observe过程。</p><p>我们知道在LiveData的observe方法内，会将参数owner与observer包装起来，使得observer的回调受owner的生命周期的影响，只有在owner处于活跃状态才回调observer，而活跃状态指的是当前owner的生命周期至少为STARTED，即如下（1）处，owner与observer的包装类中否活跃的判断方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LifecycleBoundObserver</span> <span class="keyword">extends</span> <span class="title">ObserverWrapper</span> <span class="keyword">implements</span> <span class="title">LifecycleEventObserver</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="keyword">final</span> LifecycleOwner mOwner;</span><br><span class="line">    LifecycleBoundObserver(<span class="meta">@NonNull</span> LifecycleOwner owner, Observer&lt;? <span class="keyword">super</span> T&gt; observer) &#123;</span><br><span class="line">        <span class="keyword">super</span>(observer);</span><br><span class="line">        mOwner = owner;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shouldBeActive</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mOwner.getLifecycle().getCurrentState().isAtLeast(STARTED);</span><br><span class="line">    &#125;<span class="comment">//(1)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStateChanged</span><span class="params">(<span class="meta">@NonNull</span> LifecycleOwner source,</span></span></span><br><span class="line"><span class="params"><span class="function">            <span class="meta">@NonNull</span> Lifecycle.Event event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mOwner.getLifecycle().getCurrentState() == DESTROYED) &#123;</span><br><span class="line">            removeObserver(mObserver);<span class="comment">//(2)</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        activeStateChanged(shouldBeActive());</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是，Fragment与Fragment中的View在活跃的生命周期状态是一致的，这里的owner使用fragment还是viewLifecycleOwner并无不同，二者只有在onCreateView到onDestroyView之外有区别。</p><p>包装类中的onStateChanged方法会执行observer的适时移除工作，而（2）处的移除observer正是在owner处于DESTROYED时发生的。对于Fragment，状态会在onDestroyView执行前夕，变为DESTROYED，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Fragment.java 也对应了上边的内容</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">performDestroyView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mChildFragmentManager.dispatchDestroyView();</span><br><span class="line">        <span class="keyword">if</span> (mView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mViewLifecycleOwner.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY);</span><br><span class="line">        &#125;</span><br><span class="line">        mState = CREATED;</span><br><span class="line">        onDestroyView();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>此时，一切都解释得通了，在Fragment中对LiveData对象调用observe方法时，使用viewLifecycleOwner代替this的原因是：Fragment与Fragment中的View的生命周期并不一致，需要让observer感知Fragment中的View的生命周期而非Fragment，因此Android专门构造了Fragment中的View的LifecycleOwner，即viewLifecycleOwner。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;使用LiveData 在调用observe时传入this会报提醒，要求使用viewLifecycleOwner原因是什么？&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
