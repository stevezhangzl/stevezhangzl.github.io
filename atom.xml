<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SteveZhang博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-10-29T11:29:48.000Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>张龙</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android平台的虚拟机是基于栈的码？</title>
    <link href="http://example.com/2022/10/26/Android%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E7%A0%81?/"/>
    <id>http://example.com/2022/10/26/Android%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E7%A0%81?/</id>
    <published>2022-10-26T11:46:26.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h2><p><img src="/../images/image-20221026194958803.png" alt="image-20221026194958803"></p><ul><li>class文件通过ClassLoader被加载</li><li>字节码执行引擎会在运行时执行字节码</li><li>运行时数据区其实就是字节码在运行时的一个状态， 运行时数据区里最重要的一个地方就是堆，垃圾回收主要针对的就是这个部分</li><li>方法区就是存放字节码加载出来的类信息</li><li>堆和方法区是线程共享的</li><li>非线程共享区，程序计数器，虚拟机栈，本地方法栈</li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>数据结构-栈：FILO（先进后出）</p><p><img src="/../images/image-20221026195511155.png" alt="image-20221026195511155"></p><ul><li>方法的调用是基于栈的，在一个方法中调用另一个方法，后被调用的方法最先结束，最早被调用的方法最后结束。</li><li>Android平台的Activity，同一时间只有最上层的activity是可见的，其他activity想要显示的话，就只有让最上层的activity出栈</li></ul><h2 id="运行时栈帧"><a href="#运行时栈帧" class="headerlink" title="运行时栈帧"></a>运行时栈帧</h2><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul><li>记录线程内方法的执行状态</li></ul><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><ul><li>栈中的元素，对应每一个方法执行情况</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  foo()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><img src="../images/image-20221026200015206.png" alt="image-20221026200015206" style="zoom:50%;" /><p>先调用main()方法，main方法入栈，再调用foo方法，foo方法再入栈，foo方法就在栈顶，foo方法执行完，就会出线，并释放所有的局部变量，这就是为什么虚拟机栈部分不需要垃圾回收。而堆需要垃圾回收的原因。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">val</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">val</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">val</span> c = (a + b)*<span class="number">9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行时栈帧-1"><a href="#运行时栈帧-1" class="headerlink" title="运行时栈帧"></a>运行时栈帧</h3><img src="../images/image-20221027075654379.png" alt="image-20221027075654379" style="zoom:50%;" /><p>下面的东西都是线程私有的</p><ul><li>局部变量表：存放局部变量的区域，有4个 this,a,b,c</li><li>操作数栈：用于字节码执行时处理一些中间状态的一块内存区域，在这个例子里，操作数栈的容量是2个，为什么是2个呢？其实是在编译期间，根据代码的逻辑推算出来的，然后再把这个数值记录在字节码里，foo方法只需要2个容量的操作数栈就可以完成运算。<strong>所谓的基于栈实现的栈，并不是前面所说的虚拟机栈，而是操作数栈</strong></li><li>方法出口：方法该返回给谁，返回什么</li><li>程序计数器：它能帮助记录当前执行的字节码是哪一行</li></ul><p>我们看foo方法的字节码</p><img src="../images/image-20221027075736745.png" alt="image-20221027075736745" style="zoom:50%;" /><ul><li>字节码：每一个单元就是一个字节，有的指令是一个字节，有的指令是两个字节，比如第7行，占用两个单元。</li><li>助记符：帮助我们记住每个字节码的含义</li></ul><img src="../images/image-20221027075937265.png" alt="image-20221027075937265" style="zoom:50%;" /><p>1）当执行第0行的时候，把一个int型的1推送至栈顶，此时程序计数器指向第0行</p><img src="../images/image-20221027080104082.png" alt="image-20221027080104082" style="zoom:50%;" /><p>2）接下来看第1行，将栈顶的int型数据存入第1个本地变量(局部变量)，并弹出栈，然后程序计数器指向1</p><img src="../images/image-20221027080302150.png" alt="image-20221027080302150" style="zoom:50%;" /><p>3）第2行，同上，把int型的数据2推送至栈顶，程序计数器变为2</p><img src="../images/image-20221027080402254.png" alt="image-20221027080402254" style="zoom:50%;" /><p>4）第3行，把栈顶的int型存入第2个局部变量b，并出栈</p><img src="../images/image-20221027080525495.png" alt="image-20221027080525495" style="zoom:50%;" /><p>5）第4行，第5行都是iload 把两个局部变量中的值，放入在操作栈上分别是1，2 因为要开始计算了</p><img src="../images/image-20221027080718158.png" alt="image-20221027080718158" style="zoom:50%;" /><p>6）第6行，将栈顶的两个数相加，并压入栈顶，那么栈顶上就是一个int型数据3</p><img src="../images/image-20221027080826308.png" alt="image-20221027080826308" style="zoom:50%;" /><p>7）第7行，将单字节的常量，这里是一个9 压入栈顶，这一行占用了两个字节码，所以下一行的行号是9</p><img src="../images/image-20221027080952871.png" alt="image-20221027080952871" style="zoom:50%;" /><p>8）这一行将栈顶的两上元素相乘，并将结果压入栈顶，那现在栈顶的数值是27</p> <img src="../images/image-20221027081102002.png" alt="image-20221027081102002" style="zoom:50%;" /><p>9）第a行，把栈顶的数据存入第三个本地变量，并出栈</p><p>10）最后执行return这个函数的执行就结束了。</p><blockquote><p>每初始化一个变量，每做一步运算，都要把数据放入操作数栈的栈顶，所有的指令都是操作这个操作数栈的，所以这个名字才叫做操作数栈，这就是基于栈的虚拟机的最基本的一个实现思路</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;JVM运行时数据区&quot;&gt;&lt;a href=&quot;#JVM运行时数据区&quot; class=&quot;headerlink&quot; title=&quot;JVM运行时数据区&quot;&gt;&lt;/a&gt;JVM运行时数据区&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../images/image-202210261949588</summary>
      
    
    
    
    <category term="Android基础" scheme="http://example.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>由一道面试题,说一下Java双亲委派模型</title>
    <link href="http://example.com/2022/10/25/%E7%94%B1%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98,%E8%AF%B4%E4%B8%80%E4%B8%8BJava%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2022/10/25/%E7%94%B1%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98,%E8%AF%B4%E4%B8%80%E4%B8%8BJava%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-10-24T21:39:59.000Z</published>
    <updated>2022-10-29T11:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><blockquote><p>你能不能自己写一个，叫做java.lang.Object的类？</p></blockquote><p>背后要考的是<strong>Classloader</strong>和<strong>双亲委派模型</strong></p><ul><li>ClassLoader是做什的？加载过程，加载给谁？</li><li>双亲委派模型的源码，原理</li></ul><p>这样设计的<strong>好处</strong>是什么？有些情况要<strong>打破</strong>双亲委派模型？</p><h2 id="字节码加载"><a href="#字节码加载" class="headerlink" title="字节码加载"></a>字节码加载</h2><p><img src="/../images/image-20221025074502762.png" alt="image-20221025074502762"></p><p>class文件由ClassLoader加载到运行时数据区的方法区</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>在内存中，存放class文件的逻辑结构，也就是类的元(meta)信息</p><ul><li>包括常量池、类信息、字段、方法、属性等。</li></ul><h2 id="方法区的实现"><a href="#方法区的实现" class="headerlink" title="方法区的实现"></a>方法区的实现</h2><p>JVM只是一个规范，所以方法区也只是一个规范，有不同的实现方式。</p><ul><li>在Java8以前的版本，被实现“永久代”，名称与堆中的“年轻代”、“养老代”相对应，和堆一样，同为线程共有，但又没有垃圾回收，所以又被称为“非堆”。（没有垃圾回收也是能理解的，如果方法区里的元信息被回收了，我们就不能创建类的实例了）</li><li>在Java8以后的版本，被称为元空间（meta space），直接放在本地内存，所以理论上没有大小上限。</li></ul><h2 id="Java程序的双亲委派模型"><a href="#Java程序的双亲委派模型" class="headerlink" title="Java程序的双亲委派模型"></a>Java程序的双亲委派模型</h2><p><img src="/../images/image-20221025075050885.png" alt="image-20221025075050885"></p><p>双亲委派模型其实是一个约定俗成的翻译，其实双亲的双并没有实际的意义，大家可以理解为家长委派，其实这个更符合ClassLoader的本意。</p><p>图中画了5个ClassLoader，它们互为父子ClassLoader的关系</p><blockquote><p>记住，父子ClassLoader并不是父子类的关系。</p></blockquote><p>先看辈分最低的，我们自定义的ClassLoader 可以用来加载额外的Class 没有特殊需求，我们平时不太需要自己去写ClassLoader，上面深 红色的三个是系统所提供的，也是程序运行所必须的。</p><p>两个自定义ClassLoader的直接父ClassLoader是ApplicationClassLoader也就是应用类加载器，应用类加载器换句话说呢，也就是用来加载我们自己写出的代码的类加载器。</p><p>应用类ClassLoder的直接父ClassLoader呢就是扩展类加载器ExtensionClassLoader，用于加载jre&#x2F;lib&#x2F;ext目录下的jar。</p><p>最顶层的加载器叫做启动类加载器BootstrapClassLoader，它加载的是最核心的类库，也就是jre&#x2F;lib目录下的类库，比如我们jre&#x2F;lib目录下有一个叫做rt.jar，我们平时最常用的一些系统类，比如java.lang&#x2F;java.io&#x2F;java.net&#x2F;java.util其实都是在这个jar包中，所以我们在题目中提到的java.lang.Object就是用启动类加载器加载的。</p><p><img src="/../images/image-20221025080039864.png" alt="image-20221025080039864"></p><h2 id="Android中的双亲委派模型"><a href="#Android中的双亲委派模型" class="headerlink" title="Android中的双亲委派模型"></a>Android中的双亲委派模型</h2><p><img src="/../images/image-20221025075952066.png" alt="image-20221025075952066"></p><p>其实整体上区别并不大，只不过系统提供的类加载器从三个变成了两个，额外加载自定义的变成了DexClassLoader，因为我们加载的是Dex文件，再往上一层呢，是PathClassLoader，和java中的应用类加载器一样，用于加载我们自己实现的代码，最顶层的加载器是BootClassLoader，类似于Java中的BootstrapClassLoader用于加载framework层的class</p><h2 id="Android程序的双亲委派模型类图"><a href="#Android程序的双亲委派模型类图" class="headerlink" title="Android程序的双亲委派模型类图"></a>Android程序的双亲委派模型类图</h2><p><img src="/../images/image-20221025080404287.png" alt="image-20221025080404287"></p><ul><li>ClassLoader是一个抽象类，每一个ClassLoader都有一个parent属性，用来记录自己的父类是谁，还有两个关键的方法，一个是loadClass一个是findClass</li><li>BootClassLoader是ClassLoader的子类。</li><li>BaseDexClassLoader也是ClassLoader的子类。它的作用呢就是，提供一些加载dex文件的基本方式。</li><li>PathClassLoader是BaseDexClassLoader的子类，用于加载我们实现的代码的class，因为最终会被编译成dex文件</li><li>DexClassLoader也是BaseDexClassLoader的子类</li></ul><h2 id="ClassLoader源码"><a href="#ClassLoader源码" class="headerlink" title="ClassLoader源码"></a>ClassLoader源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoader</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Finds the class with the specified &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt;.</span></span><br><span class="line"><span class="comment">     * This method should be overridden by class loader implementations that</span></span><br><span class="line"><span class="comment">     * follow the delegation model for loading classes, and will be invoked by</span></span><br><span class="line"><span class="comment">     * the &#123;<span class="doctag">@link</span> #loadClass &lt;tt&gt;loadClass&lt;/tt&gt;&#125; method after checking the</span></span><br><span class="line"><span class="comment">     * parent class loader for the requested class.  The default implementation</span></span><br><span class="line"><span class="comment">     * throws a &lt;tt&gt;ClassNotFoundException&lt;/tt&gt;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">     *         The &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  The resulting &lt;tt&gt;Class&lt;/tt&gt; object</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span>  ClassNotFoundException</span></span><br><span class="line"><span class="comment">     *          If the class could not be found</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span>  1.2</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *真正从字节码文件中根据类名，返回Class实例的方法，应该被子类实现者重写</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>findClass的实现细节由子类来决定，这一样一来不同层级的ClassLoader就可以从不同的位置加载不同的代码，比如启动类加载器就可以加载jre&#x2F;lib下的class，应用类加载器就可以加载我们编译出来的class</p><p>然后就是我们的loadClass方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">//外部通过loadClass获取Class实例</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; loadClass(String className) </span><br><span class="line">           <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        Class&lt;?&gt; clazz = findLoadedClass(className);<span class="comment">//已经被加载的类直接返回结果</span></span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(clazz == <span class="keyword">null</span>)&#123;</span><br><span class="line">          <span class="keyword">if</span>(parent!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            c = parent.loadClass(className);<span class="comment">//递归调用父类加载器的loadClass</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="keyword">null</span>) &#123;</span><br><span class="line">            clazz = findClass(className);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>这个方法暴露给外部，外部通过这个方法来获得class实例</p><ul><li>第一行首先调用了一个findLoadedClass的方法，可以理解为读取缓存的操作，当前的类加载器如果已经加载过某个类，可以直接返回结果，不用考虑其他因素</li><li>然后就是没有缓存的情况下，如果有父类加载器，就会递归调用父类加载器loadClass方法，直到某一个父类加载器能够返回一个非空结果，或者说一直调用到最顶层的类加载器，才会跳出递归。</li><li>如果所有的类加载器都加载不到这个类的话，就会交给当前的类加载器，才会调用自己的findClass方法，才会真正的加载class</li></ul><h2 id="加载自己写的Object类会发生什么？"><a href="#加载自己写的Object类会发生什么？" class="headerlink" title="加载自己写的Object类会发生什么？"></a>加载自己写的Object类会发生什么？</h2><p><img src="/../images/image-20221025082643603.png" alt="image-20221025082643603"></p><p>所以自己写的java.lang.Object 正常情况下，只能被编译，但不会被类加器加载</p><h2 id="Class的双亲委派模型有什么好处？"><a href="#Class的双亲委派模型有什么好处？" class="headerlink" title="Class的双亲委派模型有什么好处？"></a>Class的双亲委派模型有什么好处？</h2><ul><li>能够对类划分优先级层次关系（系统的类永远比我们的类的层次要高）</li><li>避免类的重复加载（已经加载过的类，就不会再有机会再次加载，父类加载器一旦加载过某个类，相关的子类加载器就不会再有机会重复加载同一个类了）</li><li>沙箱安全机制，避免代码被篡改（系统的核心类库，相对来说就是一个沙箱，我们无法通过常规手段干扰核心类库的执行，同样的自定义类加载器也无法干预我们写的程序的代码）</li></ul><h2 id="为什么要打破双亲委派模型呢？"><a href="#为什么要打破双亲委派模型呢？" class="headerlink" title="为什么要打破双亲委派模型呢？"></a>为什么要打破双亲委派模型呢？</h2><h3 id="解决某些版本冲突问题"><a href="#解决某些版本冲突问题" class="headerlink" title="解决某些版本冲突问题"></a>解决某些版本冲突问题</h3><p><img src="/../images/image-20221025083338854.png" alt="image-20221025083338854"></p><h3 id="热部署（重复加载已经被加载的类）"><a href="#热部署（重复加载已经被加载的类）" class="headerlink" title="热部署（重复加载已经被加载的类）"></a>热部署（重复加载已经被加载的类）</h3><p><img src="/../images/image-20221025083531883.png" alt="image-20221025083531883"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;面试题&quot;&gt;&lt;a href=&quot;#面试题&quot; class=&quot;headerlink&quot; title=&quot;面试题&quot;&gt;&lt;/a&gt;面试题&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;你能不能自己写一个，叫做java.lang.Object的类？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="Android基础" scheme="http://example.com/categories/Android%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>气象数据-第2章如何保证服务程序永不停机-6-Linux共享内存</title>
    <link href="http://example.com/2022/10/24/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-6-Linux%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <id>http://example.com/2022/10/24/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-6-Linux%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/</id>
    <published>2022-10-24T00:27:43.000Z</published>
    <updated>2022-10-29T11:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Linux中每个进程是互相独立的，互相不能访问，共享内存允许多个进程访问同一块内存，是进程之间共享和传递数据最高效的方式，没有之一。</p><h2 id="共享内存的操作"><a href="#共享内存的操作" class="headerlink" title="共享内存的操作"></a>共享内存的操作</h2><ul><li>1.调用shmget函数获取或创建共享内存。</li><li>2.调用shmat函数把共享内存连接到当前进程的地址空间。</li><li>3.调用shmdt函数把共享内存从当前进程中分离。</li><li>4.调用shmctl函数删除共享内存。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Linux中每个进程是互相独立的，互相不能访问，共享内存允许多个进程访问同一块内存，是进程之间共享和传递数据最高效的方式，没有之一。&lt;/p&gt;</summary>
      
    
    
    
    <category term="C气象数据项目" scheme="http://example.com/categories/C%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>由undefined reference to __gxx_personality_v0错误，看下g++和gcc的区别</title>
    <link href="http://example.com/2022/10/22/%E7%94%B1undefined-reference-to-gxx-personality-v0%E9%94%99%E8%AF%AF%E7%9C%8B%E4%B8%8Bg-%E5%92%8Cgcc%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://example.com/2022/10/22/%E7%94%B1undefined-reference-to-gxx-personality-v0%E9%94%99%E8%AF%AF%E7%9C%8B%E4%B8%8Bg-%E5%92%8Cgcc%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2022-10-21T20:56:13.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个编译例子"><a href="#一个编译例子" class="headerlink" title="一个编译例子"></a>一个编译例子</h2><p>之前编译一个cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *pargv[argc];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ii =<span class="number">2</span>;ii&lt;argc;ii++)&#123;</span><br><span class="line">pargv[ii <span class="number">-2</span>] = argv[ii];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pargv[argc<span class="number">-2</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">execv</span>(argv[<span class="number">2</span>],pargv);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="built_in">wait</span>(&amp;status);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用指令进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o procctl procctl.cpp</span><br></pre></td></tr></table></figure><p>然后报错了</p><p><img src="/../images/image-20221022050317567.png" alt="image-20221022050317567"></p><p>没有去链接c++的标准库，我们使用gcc编译就要加上<code>-lstdc++</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o procctl procctl.cpp -lstdc++</span><br></pre></td></tr></table></figure><p>这样才会去链接c++的标准库，可以编译成功</p><p>实际上使用g++编译就不会有问题了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g++ -o procctl procctl.cpp</span><br></pre></td></tr></table></figure><p>也是可以编译的</p><h2 id="g-和gcc的区别"><a href="#g-和gcc的区别" class="headerlink" title="g++和gcc的区别"></a>g++和gcc的区别</h2><p>gcc 最开始的时候是 GNU C Compiler, 如你所知，就是一个c编译器。但是后来因为这个项目里边集成了更多其他不同语言的编译器，GCC就代表 the GNU Compiler Collection，所以表示一堆编译器的合集。 g++则是GCC的c++编译器。</p><p>gcc 和 g++ 的区别无非就是调用的编译器不同, 并且传递给链接器的参数不同.</p><p>具体而言</p><p><strong>g++</strong> 会把 <code>.c</code> 文件当做是 C++ 语言 (在 <code>.c</code> 文件前后分别加上 <code>-xc++</code> 和 <code>-xnone</code>, 强行变成 C++), 从而调用 <code>cc1plus</code> 进行编译.</p><p><strong>g++</strong> 遇到 <code>.cpp</code> 文件也会当做是 C++, 调用 <code>cc1plus</code> 进行编译. </p><p><strong>g++</strong> 还会默认告诉链接器, 让它链接上 C++ 标准库.</p><p><strong>gcc</strong> 会把 <code>.c</code> 文件当做是 C 语言. 从而调用 <code>cc1</code> 进行编译.</p><p><strong>gcc</strong> 遇到 <code>.cpp</code> 文件, 会处理成 C++ 语言. 调用 <code>cc1plus</code> 进行编译. </p><p><strong>gcc</strong> 默认不会链接上 C++ 标准库.</p><p>我们编译c的时候最好使用gcc 编译c++的时候最好使用g++能避免麻烦</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一个编译例子&quot;&gt;&lt;a href=&quot;#一个编译例子&quot; class=&quot;headerlink&quot; title=&quot;一个编译例子&quot;&gt;&lt;/a&gt;一个编译例子&lt;/h2&gt;&lt;p&gt;之前编译一个cpp文件&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>气象数据-第2章如何保证服务程序永不停机-5-服务程序调度</title>
    <link href="http://example.com/2022/10/19/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-5-%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E8%B0%83%E5%BA%A6/"/>
    <id>http://example.com/2022/10/19/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-5-%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E8%B0%83%E5%BA%A6/</id>
    <published>2022-10-18T23:37:40.000Z</published>
    <updated>2022-10-29T11:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务程序的调度"><a href="#服务程序的调度" class="headerlink" title="服务程序的调度"></a>服务程序的调度</h2><ul><li>周期性的启动后台服务程序。</li><li>常驻内存中的服务程序异常中止，在短时间内重启。</li></ul><p>execl函数，执行ls命令</p><p>procctl.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">execl</span>(<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;-lt&quot;</span>,<span class="string">&quot;./&quot;</span>,(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第一个参数，传入执行程序全路径</li><li>第二个参数，伟入执行程序（可不传全路径）</li><li>第三个参数后开始传入执行程序的可变参数</li><li>。。。</li><li>最后一个参数传入(char*)0</li></ul><p>我们再来看</p><p>procctl1.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaa\n&quot;</span>);</span><br><span class="line"><span class="built_in">execl</span>(<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;-lt&quot;</span>,<span class="string">&quot;./&quot;</span>,(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbb\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221020080146799.png" alt="image-20221020080146799"></p><p>发现只打印了aaa ，没有打印bbb</p><blockquote><p>exec是用参数中指定程序替换了当前进程的正文段、数据段、堆和栈。</p></blockquote><p>调用execl 使用ls的影像替换了当前进程，当前进程已经不存在了，所以后面bbb的代码都不会执行，写再多也没用。如果调用失败，后面的代码还是会执行的。</p><blockquote><p>解决方案</p><p>先执行fork函数，创建一个子进程，让子进程调用execl执行新的程序。</p><p>新程序将替换子进程，不会影响父进程。</p><p>在父进程中，可以调用wait函数等待新程序运行的结果，这样就可以实现调度的功能。</p></blockquote><p>实现程序每隔5秒执行一次ls</p><p>procctl2.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">execl</span>(<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;/usr/bin/ls&quot;</span>,<span class="string">&quot;-lt&quot;</span>,<span class="string">&quot;./&quot;</span>,(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="built_in">wait</span>(&amp;status);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把程序按传参的形式补全</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//execl(&quot;/usr/bin/ls&quot;,&quot;/usr/bin/ls&quot;,&quot;-lt&quot;,&quot;./&quot;,(char*)0);</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(argc == <span class="number">3</span>) <span class="built_in">execl</span>(argv[<span class="number">2</span>],argv[<span class="number">2</span>],(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span>(argc == <span class="number">4</span>) <span class="built_in">execl</span>(argv[<span class="number">2</span>],argv[<span class="number">2</span>],argv[<span class="number">3</span>],(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span>(argc == <span class="number">5</span>) <span class="built_in">execl</span>(argv[<span class="number">2</span>],argv[<span class="number">2</span>],argv[<span class="number">3</span>],argv[<span class="number">4</span>],(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">      <span class="keyword">if</span>(argc == <span class="number">6</span>) <span class="built_in">execl</span>(argv[<span class="number">2</span>],argv[<span class="number">2</span>],argv[<span class="number">3</span>],argv[<span class="number">4</span>],argv[<span class="number">5</span>],(<span class="keyword">char</span>*)<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="built_in">wait</span>(&amp;status);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会发现，我们要不停的判断参数的个数，来补全execl函数，好麻烦，一般要提前判断20个参数左右才行。为了支持参数不确定的情况，我们使用exec家族另一个函数比较合适。</p><ul><li>execv</li></ul><p>procctl3.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc,<span class="keyword">char</span> *argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭信号和IO，本程序不希望被打扰。</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">0</span>;ii&lt;<span class="number">64</span>;ii++)&#123;</span><br><span class="line"><span class="built_in">signal</span>(ii,SIG_IGN);<span class="built_in">close</span>(ii);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成子进程，父进程退出，让程序运行在后台，由系统1号进程托管</span></span><br><span class="line"><span class="keyword">if</span>(fork()!=<span class="number">0</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//启用SIGCHILD信号，让父进程可以wait子进程的退出的状态。</span></span><br><span class="line"><span class="built_in">signal</span>(SIGCHLD,SIG_DFL);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//1.声明一个长度为argc的字符数组</span></span><br><span class="line"><span class="keyword">char</span> *pargv[argc];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> ii =<span class="number">2</span>;ii&lt;argc;ii++)&#123;</span><br><span class="line">    <span class="comment">//2.把从命令开始的参数，赋值给pargv</span></span><br><span class="line">    <span class="comment">//argv[0]是procctl argv[1]是执行次数 argv[2] 才是/usr/bin/ls</span></span><br><span class="line">pargv[ii <span class="number">-2</span>] = argv[ii];</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//3.设置指令结尾为NULL</span></span><br><span class="line">pargv[argc<span class="number">-2</span>] = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(fork() == <span class="number">0</span>)&#123;</span><br><span class="line">      <span class="comment">//4.第一人参数为指令，第二个参数为可变参数</span></span><br><span class="line"><span class="built_in">execv</span>(argv[<span class="number">2</span>],pargv);</span><br><span class="line"><span class="comment">//这行代码在execv成功的时候不会执行，在execv失败的时候会退。</span></span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">int</span> status;</span><br><span class="line"><span class="built_in">wait</span>(&amp;status);</span><br><span class="line"><span class="built_in">sleep</span>(<span class="built_in">atoi</span>(argv[<span class="number">1</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;服务程序的调度&quot;&gt;&lt;a href=&quot;#服务程序的调度&quot; class=&quot;headerlink&quot; title=&quot;服务程序的调度&quot;&gt;&lt;/a&gt;服务程序的调度&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;周期性的启动后台服务程序。&lt;/li&gt;
&lt;li&gt;常驻内存中的服务程序异常中止，在短时间内重</summary>
      
    
    
    
    <category term="C气象数据项目" scheme="http://example.com/categories/C%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>气象数据-第2章如何保证服务程序永不停机-4-Linux多进程</title>
    <link href="http://example.com/2022/10/13/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-4-Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    <id>http://example.com/2022/10/13/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-4-Linux%E5%A4%9A%E8%BF%9B%E7%A8%8B/</id>
    <published>2022-10-12T23:27:53.000Z</published>
    <updated>2022-10-29T11:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux的0、1、2号进程"><a href="#Linux的0、1、2号进程" class="headerlink" title="Linux的0、1、2号进程"></a>Linux的0、1、2号进程</h2><ul><li><strong>idel进程：</strong>系统创建的第一个进程，加载系统。系统启动的时候，它开始加载系统，加载完成后，演变成1号和2号进程。</li><li><strong>systemd进程：</strong>系统初始化，是所有其它用户进程的祖先。负责启动系统服务，例如网络服务、防火墙，SSH服务，ftp服务。有些系统叫init</li><li><strong>kthreadd进程：</strong>负责所有内核线程的调度和管理。</li></ul><h2 id="进程标识"><a href="#进程标识" class="headerlink" title="进程标识"></a>进程标识</h2><ul><li>每个进程都有一个非负整数表示的唯一进程ID。</li><li>查看进程：<code>ps -ef|grep 进程名</code> 可以查看进程的详细信息</li></ul><p><img src="/../images/image-20221013074013314.png" alt="image-20221013074013314"></p><p>可以分别去查看进程的详情，能看到层层的父进程ID</p><ul><li>getpid(void)，获取进程ID。</li><li>getppid(void)，获取父进程ID。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getpid()=%d\n&quot;</span>,getpid());</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getppid()=%d\n&quot;</span>,getppid());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        sleep(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221013074804676.png" alt="image-20221013074804676"></p><h2 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h2><ul><li>一个现有的进程调用函数fork创建一个新的进程。新的进程叫做子进程，原有的进程叫做父进程。</li><li>子进程和父进程继续执行fork函数后的代码。</li><li>fork函数调用一次返回两次。</li><li>子进程返回0，父进程返回子进程的进程ID。</li><li>子进程是父进程的副本。</li><li>子进程获得了父进程的数据空间、堆和栈的副本，不是共享。</li><li>父进程中打开文件描述符也被复制到子进程中。</li><li>如果父进程先退出，子进程会成为孤儿进程。</li><li>如果子进程先退出，内核向父进程发送SIGCHLD信号，如果父进程不处理这个信号，子进程会成为僵尸进程。</li></ul><p>book03.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//- 一个现有的进程调用函数fork创建一个新的进程。新的进程叫做子进程，原有的进程叫做父进程。</span></span><br><span class="line"><span class="comment">//- 子进程和父进程继续执行fork函数后的代码。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;aaa=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bbb=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        fork();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ccc=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">        <span class="built_in">sleep</span>(<span class="number">30</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ddd=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果，子进程和父进程都打印了ccc 和ddd 而且两个进程的id是不同的</p><p><img src="/../images/image-20221013083301770.png" alt="image-20221013083301770"></p><p>book04.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//- fork函数调用一次返回两次。</span></span><br><span class="line"><span class="comment">//- 子进程返回0，父进程返回子进程的进程ID。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaa=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbb=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pid=%d\n&quot;</span>,pid);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ccc=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">30</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ddd=%d\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221013083840483.png" alt="image-20221013083840483"></p><p>看运行结果，fork后面，pid打印了两次，一个是0 一个非0 子进程的返回0 父进程的返回子进程的id。fork函数中一个进程分叉成了两个进程，fork返回了两次。</p><p>book05.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">20</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line">                <span class="built_in">sleep</span>(<span class="number">30</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221014073721111.png" alt="image-20221014073721111"></p><blockquote><p>getpid()调用失败，返回-1 一般是子进程太多，或者内存不足，比较极端的情况</p></blockquote><p>我们来做这样一个事情，在父进程中定义一个变量，然后在子进程中修改变量的值，然后看变量是否会改变</p><p>book06.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//- 子进程是父进程的副本。</span></span><br><span class="line"><span class="comment">//- 子进程获得了父进程的数据空间、堆和栈的副本，不是共享。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ii = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaa ii = %d\n&quot;</span>,ii++); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaa ii = %d\n&quot;</span>,ii++); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaa ii = %d\n&quot;</span>,ii++); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaa ii = %d\n&quot;</span>,ii++); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;aaaaaa ii = %d\n&quot;</span>,ii++); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bbbb ii = %d\n&quot;</span>,ii); <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221014074339553.png" alt="image-20221014074339553"></p><p>子进程做了改变，父进程不会改变，原因就是子进程是父进程的一个副本，子进程获得了父进程的数据空间、堆和栈的副本，不是共享。就像把一张纸复印了一份，你在复印件上修改，并不会影响原件上的内容，同样在原件上修改，也不会影响复印件。</p><blockquote><p>补充一点：</p><p>父进程打开的文件描述符也被复制到子进程中</p></blockquote><p>book07.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;./tmp/tmp.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;我要成为优秀的程序员。\n&quot;</span>);</span><br><span class="line"><span class="keyword">int</span> ii = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;aaaa 我我我我我我我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221014093055959.png" alt="image-20221014093055959"></p><p>看现象，我要成为优秀的程序员，这句话写入两次，原因是刚开始写在了内存中，然后内存被复制，所以父子进程各最终写入了一次。这是因为有内存缓冲区，写入文件会先写到缓冲区上，缓冲区满了才会一次性写入文件，如果想到达到我们理想的状态，那在fork调用之前，要刷新一次缓冲区，把缓冲区内容强制刷到文件上，就没问题了。</p><blockquote><p>fork之前数据空间被复制了一份，数据空间包括缓冲区，父进程的缓冲区有这个内容，子进程的缓冲区也有这个内容。改一下加入fflush(fp); 强刷。</p></blockquote><p>book08.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;./tmp/tmp.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;我要成为优秀的程序员。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fflush</span>(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ii = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;aaaa 我我我我我我我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这回的输出就对了</p><p><img src="/../images/image-20221014094521812.png" alt="image-20221014094521812"></p><blockquote><p>说明：bbb我我我我我我 和aaaa我我我我我  这两个的写入顺序是不确定的，因为执行fork以后，父子进程执行的顺序是不确定的，跟操作系统的算法有关，一般来说，我们也不关注哪个进程先执行。</p></blockquote><p>父进程和子进程虽然是父子进程，但是是两个独立的进程，如果在子进程中关闭的文件，不会影响父进程，如果在父进程中关闭的文件，也不会影响子进程。</p><p>我们在子进程关闭文件操作符，在父进程中每隔1秒接着往文件里继续写。</p><p>book09.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">FILE *fp = <span class="built_in">fopen</span>(<span class="string">&quot;./tmp/tmp.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;我要成为优秀的程序员。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fflush</span>(fp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ii = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;aaaa 我我我我我我我。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">fprintf</span>(fp,<span class="string">&quot;bbbb 我我我多我我我。\n&quot;</span>);  <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">fclose</span>(fp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221014164017466.png" alt="image-20221014164017466"></p><p>发现子进程关闭操作符后，子进程不能再写入，但父进程不受影响，还能继续写入文件。</p><h2 id="僵尸进程"><a href="#僵尸进程" class="headerlink" title="僵尸进程"></a>僵尸进程</h2><h3 id="什么是僵尸进程？"><a href="#什么是僵尸进程？" class="headerlink" title="什么是僵尸进程？"></a>什么是僵尸进程？</h3><p>我们接下来看看僵尸进程</p><p><strong>如果子进程先退出，内核向父进程发送SIGCHLD信号，如果父进程不处理这个信号，子进程会成为僵尸进程。</strong></p><p>book10.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让子进程sleep 5秒后退出，父进程sleep 10秒后退出，然后通过ps -ef|grep book10来查看父子进程</p><p>5秒后，子进程退出，出现了僵尸进程</p><p><img src="/../images/image-20221017074358725.png" alt="image-20221017074358725"></p><p>20秒后，父进程也退出，僵尸进程也消失了，这就是僵尸进程</p><p><img src="/../images/image-20221017074427136.png" alt="image-20221017074427136"></p><blockquote><p>僵尸进程的危害：</p><p>如果子进程在父进程之前终止，内核为每个子进程保留了一个数据结构，包括进程编号、终止状态和使用CPU时间等，父进程如果处理了子进程退出的信息，内核就会释放这个数据结构，如果父进程没有处理子进程退出的信息，内核就不会释放这个数据结构，子进程编号就会一直被占用，但是系统可用的进程号是有限的，如果大量的产生僵尸进程，将因为没有可用的进程号而导致系统不能产生新的进程，这就是僵尸进程的危害。</p></blockquote><h3 id="僵尸进程解决方法"><a href="#僵尸进程解决方法" class="headerlink" title="僵尸进程解决方法"></a>僵尸进程解决方法</h3><p><strong>方法一：直接忽略这个信号</strong></p><p>book11.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">signal</span>(SIGCHLD,SIG_IGN);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们再观察结果，发现5秒后子进程退了，并没有产生僵尸进程</p><p><img src="/../images/image-20221017080731676.png" alt="image-20221017080731676"></p><p><strong>方法二：父进程wait子进程退出</strong></p><p>book12.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//signal(SIGCHLD,SIG_IGN);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="keyword">int</span> sts;</span><br><span class="line"><span class="built_in">wait</span>(&amp;sts);</span><br><span class="line"></span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>wait函数 父进程等待子进程的退出，子进程退出后，父进程才执行wait后面的代码。</p></blockquote><p>这种方法有一个问题，就是阻塞在这里。</p><p><strong>方法三：设置CHLD这个信号的处理函数，在这个处理函数中wait</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> sts;</span><br><span class="line"><span class="built_in">wait</span>(&amp;sts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">signal</span>(SIGCHLD,func);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pid = fork();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是子进程%d，将执行子进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">5</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pid&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;这是父进程%d,将执行父进程的任务。\n&quot;</span>,<span class="built_in">getpid</span>());</span><br><span class="line"><span class="built_in">sleep</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这样不影响父进程执行后面的函数，信号到达了，就执行func，注意这里面并不代表父进程一定会等待子进程的退出，因为父进程可能会先退出，如果sleep(1) 那么父进程退出后就不再关心信号处理函数了。</p><blockquote><p>如果父进程先退出，子进程会成为孤儿进程，将被1号进程收养，由1号进程对它们完成状态收集工作。</p><p>如果子进程先退出，内核向父进程发送SIGCHLD信号，如果父进程不处理这个信号，子进程会成为僵尸进程。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Linux的0、1、2号进程&quot;&gt;&lt;a href=&quot;#Linux的0、1、2号进程&quot; class=&quot;headerlink&quot; title=&quot;Linux的0、1、2号进程&quot;&gt;&lt;/a&gt;Linux的0、1、2号进程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;idel进程：&lt;</summary>
      
    
    
    
    <category term="C气象数据项目" scheme="http://example.com/categories/C%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>气象数据-第2章如何保证服务程序永不停机-3-Linux信号</title>
    <link href="http://example.com/2022/10/12/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-3-Linux%E4%BF%A1%E5%8F%B7/"/>
    <id>http://example.com/2022/10/12/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-3-Linux%E4%BF%A1%E5%8F%B7/</id>
    <published>2022-10-11T23:31:10.000Z</published>
    <updated>2022-10-29T11:29:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="程序实践"><a href="#程序实践" class="headerlink" title="程序实践"></a>程序实践</h2><p>先来看一段程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221012073818201.png" alt="image-20221012073818201"></p><p>程序运行结果如图所示。每一秒执行一次任务，然后我们通过control + c 或者 killall book都可以终止程序。其实是<strong>发送了信号</strong>linux进程一共有<strong>64个信号</strong>，我们往程序里添加一段代码，把它们都打印出来。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了信号%d\n&quot;</span>,sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>;ii &lt;= <span class="number">64</span>; ii++)</span><br><span class="line">                signal(ii,handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>sighandler_t signal(int signum, sighandler_t handler);</code> </p><p>信号处理函数，第一个参数是信号值，0-64。第二个参数是信号处理函数。如果我们给信号设置了处理函数，那么当我们发送信号，比如control + c 或者 killall book 的时候，会执行信号处理函数；如果没有设置处理函数，则会执行系统缺省的行为，也就是系统默认的信号处理行为就是杀死进程。</p><p>程序如图所示</p><p><img src="/../images/image-20221012074824441.png" alt="image-20221012074824441"></p><p>在接到信号2和15的时候，并没有像之前一样被杀死。而是执行了我们的信号处理函数。直到我们发送了信号9，强制杀死进程，进程才终止。</p><p><code>signal(int signum,SIG_IGN);</code></p><p>对信号进行忽略处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了信号%d\n&quot;</span>,sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>;ii &lt;= <span class="number">64</span>; ii++)</span><br><span class="line">                signal(ii,handler);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//信号忽略</span></span><br><span class="line">        signal(<span class="number">15</span>,SIG_IGN);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们对15信号进行了忽略，那么我们就不会接到15信号，尽管我们发送了killall book 发送了15号信号，但是处理函数并没有处理。</p><p><img src="/../images/image-20221012075432590.png" alt="image-20221012075432590"></p><p>能处理信号2，但信号9并没有处理。</p><blockquote><p>信号9 既不能捕获处理，也不能忽略。</p></blockquote><p><code>signal(15,SIG_DFL)</code></p><p>信号缺省处理</p><p>对该信号进行捕获，并进行系统默认缺省处理，也就是杀死进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了信号%d\n&quot;</span>,sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>;ii &lt;= <span class="number">64</span>; ii++)</span><br><span class="line">                signal(ii,handler);</span><br><span class="line"></span><br><span class="line">        signal(<span class="number">15</span>,SIG_IGN);</span><br><span class="line"></span><br><span class="line"><span class="comment">//信号缺省处理</span></span><br><span class="line">        signal(<span class="number">15</span>,SIG_DFL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20221012075747261.png" alt="image-20221012075747261"></p><h2 id="信号的概念"><a href="#信号的概念" class="headerlink" title="信号的概念"></a>信号的概念</h2><p>信号signal是软件中断，是进程之间相互传递消息的一种方法，用于通知进程发生了事件，但是，不能给进程传递任何数据。</p><p>信号产生的原因很多，在Linux下，可以用kill和killall命令发送信号。kill后面要跟进程id </p><p>通过ps -ef|grep book 可以查book的pid 然后通过kill进行信号发送</p><h2 id="常用信号"><a href="#常用信号" class="headerlink" title="常用信号"></a>常用信号</h2><p><img src="/../images/image-20221012080202254.png" alt="image-20221012080202254"></p><p><img src="/../images/image-20221012080216373.png" alt="image-20221012080216373"></p><p><img src="/../images/image-20221012080225139.png" alt="image-20221012080225139"></p><p><img src="/../images/image-20221012080237675.png" alt="image-20221012080237675"></p><h2 id="发送时钟信号ALRM"><a href="#发送时钟信号ALRM" class="headerlink" title="发送时钟信号ALRM"></a>发送时钟信号ALRM</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handler</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了信号%d\n&quot;</span>,sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//时钟处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">alarmfunc</span><span class="params">(<span class="keyword">int</span> num)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了时钟信号%d。\n&quot;</span>,num);</span><br><span class="line">  alarm(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>;ii &lt;= <span class="number">64</span>; ii++)</span><br><span class="line">                signal(ii,handler);</span><br><span class="line"><span class="comment">//时钟信号捕获</span></span><br><span class="line">        signal(SIGALRM,alarmfunc);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//发送时钟信号，第3秒开始，只会发送一次，如果想要每隔3秒发送一次，要在处理函数中发送alarm(3)</span></span><br><span class="line">        alarm(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        signal(<span class="number">15</span>,SIG_DFL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>只发送一次</p><p><img src="/../images/image-20221012083103915.png" alt="image-20221012083103915"></p><p>每隔3秒发送一次</p><p><img src="/../images/image-20221012083407102.png" alt="image-20221012083407102"></p><h2 id="信号有什么用"><a href="#信号有什么用" class="headerlink" title="信号有什么用"></a>信号有什么用</h2><p>服务程序运行在后台，如果想让中止它，杀掉不是个好办法，因为程序被杀的时候，程序突然死亡，没有安排善后工作。</p><p>如果向服务程序发送一个信号，服务程序收到这个信号后，调用一个函数，在函数中编写善后的代码，程序就可以有计划的退出。</p><p><strong>向服务程序发送0的信号，可以检测程序是否存活。</strong></p><h2 id="信号应用示例"><a href="#信号应用示例" class="headerlink" title="信号应用示例"></a>信号应用示例</h2><p>在实际开发中，在main开始的地方，程序会先屏蔽全部的信号。</p><p><code>for(int ii = 1; i&lt;= 64 ; ii++) signal(ii,SIG_IGN);</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//善后处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EXIT</span><span class="params">(<span class="keyword">int</span> sig)</span></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;接收到了信号%d\n&quot;</span>,sig);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="comment">//全部忽略，避免被干扰</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> ii = <span class="number">1</span>;ii &lt;= <span class="number">64</span>; ii++)</span><br><span class="line">                signal(ii,SIG_IGN);</span><br><span class="line"><span class="comment">//对感兴趣的信号进行善后处理</span></span><br><span class="line">        signal(SIGINT,EXIT);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;执行了一次任务。\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;程序实践&quot;&gt;&lt;a href=&quot;#程序实践&quot; class=&quot;headerlink&quot; title=&quot;程序实践&quot;&gt;&lt;/a&gt;程序实践&lt;/h2&gt;&lt;p&gt;先来看一段程序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;</summary>
      
    
    
    
    <category term="C气象数据项目" scheme="http://example.com/categories/C%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>气象数据-第2章如何保证服务程序永不停机-1-生成测试数据</title>
    <link href="http://example.com/2022/10/01/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-1-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/"/>
    <id>http://example.com/2022/10/01/%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE-%E7%AC%AC2%E7%AB%A0%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%9C%8D%E5%8A%A1%E7%A8%8B%E5%BA%8F%E6%B0%B8%E4%B8%8D%E5%81%9C%E6%9C%BA-1-%E7%94%9F%E6%88%90%E6%B5%8B%E8%AF%95%E6%95%B0%E6%8D%AE/</id>
    <published>2022-10-01T00:05:03.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    
    
    
    <category term="C气象数据项目" scheme="http://example.com/categories/C%E6%B0%94%E8%B1%A1%E6%95%B0%E6%8D%AE%E9%A1%B9%E7%9B%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>NDK系列(一)-Makefile详解</title>
    <link href="http://example.com/2022/09/27/NDK-Makefile%E8%AF%A6%E8%A7%A3/"/>
    <id>http://example.com/2022/09/27/NDK-Makefile%E8%AF%A6%E8%A7%A3/</id>
    <published>2022-09-27T01:19:25.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="makefile、cmake与shell之间的联系"><a href="#makefile、cmake与shell之间的联系" class="headerlink" title="makefile、cmake与shell之间的联系"></a>makefile、cmake与shell之间的联系</h2><ul><li><p>makefile:帮助我们管理编译项目</p></li><li><p>cmake:CMake 是一个跨平台的安装（编译）工具，可以用简单的语句来描述所有平台的安装（编译过程）他能够输出各种各样Makefile或者project文件。CMake并不直接构建出最终的软件，而是产生标准的构建文档（如Makefile或projects）</p></li><li><p>shell脚本：一系列命令和语法</p></li></ul><h2 id="makefile自动编译和链接"><a href="#makefile自动编译和链接" class="headerlink" title="makefile自动编译和链接"></a>makefile自动编译和链接</h2><p>gcc的四个步骤中生成.o比较耗时(汇编阶段)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -c sub.cpp -o sub.o</span><br><span class="line">gcc -c add.cpp -o add.o</span><br><span class="line">gcc -c div.cpp -o div.o</span><br><span class="line">gcc -c hello.cpp -o hello.o</span><br></pre></td></tr></table></figure><h3 id="怎么把这些写在Makefile文件中？"><a href="#怎么把这些写在Makefile文件中？" class="headerlink" title="怎么把这些写在Makefile文件中？"></a>怎么把这些写在Makefile文件中？</h3><h4 id="一个规则"><a href="#一个规则" class="headerlink" title="一个规则"></a>一个规则</h4><p>目标:依赖条件</p><p>(一个tab缩进)命令</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">a.out:a.c</span></span><br><span class="line">gcc a.c -o a.out</span><br></pre></td></tr></table></figure><p>把上面的生成的hello.o改成写Makefile形式</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">hello.out:hello.o sub.o add.o div.o</span></span><br><span class="line">gcc -c hello.o sub.o add.o div.o -o hello.out</span><br><span class="line"><span class="section">sub.o:sub.cpp</span></span><br><span class="line">gcc -c sub.cpp -o sub.o</span><br><span class="line"><span class="section">div.o:div.cpp</span></span><br><span class="line">gcc -c div.cpp -o div.o</span><br><span class="line"><span class="section">add.o:add.cpp</span></span><br><span class="line">gcc -c add.cpp -o add.o</span><br><span class="line"><span class="section">hello.o:hello.cpp</span></span><br><span class="line">gcc -c hello.cpp -o hello.o</span><br></pre></td></tr></table></figure><blockquote><p>注意：默认只会执行第一个，所以要把hello.out的命令放在第一个，然后会把所有的依赖都执行</p></blockquote><h4 id="两个函数"><a href="#两个函数" class="headerlink" title="两个函数"></a>两个函数</h4><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> *.c)</span> <span class="comment">#找到当前目录下所有后缀为.c的文件，然后赋值给src</span></span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %cpp,%o,<span class="variable">$(src)</span>)</span> <span class="comment">#就是把，src变量里所有的xxxcpp的字符串替换成xxxo</span></span><br></pre></td></tr></table></figure><p>通过这两个函数，可以把多个.o进行替换，省略了</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %cpp,%o,<span class="variable">$(src)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="section">hello.out:<span class="variable">$(obj)</span></span></span><br><span class="line">gcc -c <span class="variable">$(obj)</span> -o hello.out</span><br><span class="line"><span class="section">sub.o:sub.cpp</span></span><br><span class="line">gcc -c sub.cpp -o sub.o</span><br><span class="line"><span class="section">div.o:div.cpp</span></span><br><span class="line">gcc -c div.cpp -o div.o</span><br><span class="line"><span class="section">add.o:add.cpp</span></span><br><span class="line">gcc -c add.cpp -o add.o</span><br><span class="line"><span class="section">hello.o:hello.cpp</span></span><br><span class="line">gcc -c hello.cpp -o hello.o</span><br><span class="line"></span><br><span class="line"><span class="section">clean:</span></span><br><span class="line">rm -rf <span class="variable">$(obj)</span> hello.out</span><br></pre></td></tr></table></figure><blockquote><p>通过自定义clean指令，可以执行make clean执行rm -rf 指令，在执行前可以先加-n 看执行的是不是需要的指令make clean -n</p></blockquote><p>但还是很麻烦，如果我们动态的增加一个.cpp或者改动一个.cpp每次都要去改Makefile文件，所以看三个规则。</p><h4 id="三个自动变量"><a href="#三个自动变量" class="headerlink" title="三个自动变量"></a>三个自动变量</h4><ul><li>$@:表示规则中的目标。</li><li>$^:表示规则中所有的依赖条件，组成一个列表，以空格隔开，如果这个列表有重复项则消除重复</li><li>$&lt;:表示模式套用规则中的第一个依赖条件，如果运行在模式套用中，相当于依次取出依赖条件套用该模式规则</li></ul><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src = <span class="variable">$(<span class="built_in">wildcard</span> *.cpp)</span></span><br><span class="line">obj = <span class="variable">$(<span class="built_in">patsubst</span> %cpp,%o,<span class="variable">$(src)</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="section">hello.out:<span class="variable">$(obj)</span></span></span><br><span class="line">gcc <span class="variable">$^</span> -o <span class="variable">$@</span></span><br><span class="line"><span class="comment">#模式套用规则</span></span><br><span class="line"><span class="section">%o:%cpp</span></span><br><span class="line">gcc -c <span class="variable">$&lt;</span> -o %@</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;makefile、cmake与shell之间的联系&quot;&gt;&lt;a href=&quot;#makefile、cmake与shell之间的联系&quot; class=&quot;headerlink&quot; title=&quot;makefile、cmake与shell之间的联系&quot;&gt;&lt;/a&gt;makefile、cm</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>chromium 网络栈研究</title>
    <link href="http://example.com/2022/08/17/chromium-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%A0%94%E7%A9%B6/"/>
    <id>http://example.com/2022/08/17/chromium-%E7%BD%91%E7%BB%9C%E6%A0%88%E7%A0%94%E7%A9%B6/</id>
    <published>2022-08-17T06:57:03.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>网络栈位于net目录下</p><p>顶层网络栈对象是UrlRequestContext</p><p>位于net&#x2F;url_request&#x2F;url_request_context.cc</p><p>context含有创建和发出URL请求需要的对象的非所有权指针。Context的生命期必须比所有使用它的request的生命期要长。创建Context是一个相当复杂的过程，通常由URLRequestContextBuilder管理。</p><p>net&#x2F;url_request&#x2F;url_request_context_builder.cc</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">std::unique_ptr&lt;URLRequest&gt; <span class="title">URLRequestContext::CreateRequest</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> GURL&amp; url,</span></span></span><br><span class="line"><span class="params"><span class="function">    RequestPriority priority,</span></span></span><br><span class="line"><span class="params"><span class="function">    URLRequest::Delegate* delegate,</span></span></span><br><span class="line"><span class="params"><span class="function">    NetworkTrafficAnnotationTag traffic_annotation,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">bool</span> is_for_websockets,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">const</span> absl::optional&lt;net::NetLogSource&gt; net_log_source)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> base::<span class="built_in">WrapUnique</span>(<span class="keyword">new</span> <span class="built_in">URLRequest</span>(url, priority, delegate, <span class="keyword">this</span>,</span><br><span class="line">                                         traffic_annotation, is_for_websockets,</span><br><span class="line">                                         net_log_source));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>URLRequestContext 的主要用途是使用URLRequestContext::CreateRequest()来创建URLRequest对象</p><p>URLRequest是网络栈consumer使用的主要接口。它负责加载使用http、https、ws、wss的URLs。使用其他协议的URLs，例如file、filesystem、blob、chrome和data，都被&#x2F;&#x2F;net外的对象管理。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;网络栈位于net目录下&lt;/p&gt;
&lt;p&gt;顶层网络栈对象是UrlRequestContext&lt;/p&gt;
&lt;p&gt;位于net&amp;#x2F;url_request&amp;#x2F;url_request_context.cc&lt;/p&gt;
&lt;p&gt;context含有创建和发出URL请求需要的对象的非所</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ViewModel的原理</title>
    <link href="http://example.com/2022/08/16/ViewModel%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://example.com/2022/08/16/ViewModel%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2022-08-16T02:18:59.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ViewModel原理"><a href="#ViewModel原理" class="headerlink" title="ViewModel原理"></a>ViewModel原理</h2><p>在页面中通过ViewModelProvider类来实现化ViewModel。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> timerViewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(TimerViewModel::<span class="keyword">class</span>.java)</span><br></pre></td></tr></table></figure><p>ViewModelProvider接收一个ViewModelStoreOwner对象作为参数。在以上示例代码中该参数是this,指代当前的Activity。这是因为我们的Activity继承自FragmentActivity，而在androidx依赖包中，FragmentActivity默认实现了ViewModelStoreOwner接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComponentActivity</span> <span class="keyword">extends</span> <span class="title">androidx</span>.<span class="title">core</span>.<span class="title">app</span>.<span class="title">ComponentActivity</span> <span class="keyword">implements</span></span></span><br><span class="line"><span class="class">        <span class="title">ContextAware</span>,</span></span><br><span class="line"><span class="class">        <span class="title">LifecycleOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ViewModelStoreOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">HasDefaultViewModelProviderFactory</span>,</span></span><br><span class="line"><span class="class">        <span class="title">SavedStateRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">OnBackPressedDispatcherOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ActivityResultRegistryOwner</span>,</span></span><br><span class="line"><span class="class">        <span class="title">ActivityResultCaller</span></span></span><br></pre></td></tr></table></figure><p>ViewModelStoreOwner.java 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ViewModelStoreOwner</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns owned &#123;<span class="doctag">@link</span> ViewModelStore&#125;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a &#123;<span class="doctag">@code</span> ViewModelStore&#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="function">ViewModelStore <span class="title">getViewModelStore</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接口返回类型是ViewModelStore</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelStore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;String, ViewModel&gt; mMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(String key, ViewModel viewModel)</span> </span>&#123;</span><br><span class="line">        ViewModel oldViewModel = mMap.put(key, viewModel);</span><br><span class="line">        <span class="keyword">if</span> (oldViewModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">            oldViewModel.onCleared();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">final</span> ViewModel <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">keys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;&gt;(mMap.keySet());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Clears internal storage and notifies ViewModels that they are no longer used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (ViewModel vm : mMap.values()) &#123;</span><br><span class="line">            vm.clear();</span><br><span class="line">        &#125;</span><br><span class="line">        mMap.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从源码可以看出，ViewModel实际上是以HashMap&lt;String,ViewModel&gt;的形式被缓存起来了。ViewModel与页面之间没有直接关联，它们通过ViewModelProvider索要，ViewModelProvider检查该ViewModel是否已经存在于缓存中，若存在，则直接返回，若不存在，则实例化一个。因此Activity由于配置变化导致的销毁重建并不会影响ViewModel，ViewModel是独立于页面而存在的。<strong>也正因为此，我们使用ViewModel时，需要特别注意，不要向ViewModel中传入任何类型Context或带有Context引用的对象，这可能会导致页面无法被销毁，从而引发内存泄漏。</strong></p><p>需要注意的是，除了Activity，androidx依赖包中的Fragment也默认实现了ViewModelStoreOwner接口。因此我们也可以在Fragment中正常使用ViewModel。</p><h2 id="ViewModel与AndroidViewModel"><a href="#ViewModel与AndroidViewModel" class="headerlink" title="ViewModel与AndroidViewModel"></a>ViewModel与AndroidViewModel</h2><p>前面提到过，使用ViewModel时，不能将任何类型的Context或含有Context引用的对象传入ViewModel，因为可能会导致内存泄漏。但如果你希望在ViewModel中使用Context，该怎么办？可以使用AndroidViewModel，它继承自ViewModel，并接收Application作为Context。这意味着，它的生命周期和Applicatioin是一样的，那么这就不算是一个内存泄漏了。</p><h2 id="ViewModel与onSaveInstanceState-方法"><a href="#ViewModel与onSaveInstanceState-方法" class="headerlink" title="ViewModel与onSaveInstanceState()方法"></a>ViewModel与onSaveInstanceState()方法</h2><p>对于页面数据的保存与恢复，也许你会有这样的疑问，onSaveInstanceState()方法同样可以解决屏幕旋转带来的数据丢失问题，那么是不是没有必要使用ViewModel呢？好问题！请注意，onSaveInstanceState方法只能保存少量的、能支持序列化的数据，而ViewModel没有这个限制。ViewModel能支持页面中所有的数据。同样需要注意的是，ViewModel不支持数据的持久化，当界面被彻底销毁时，ViewModel及其持有的数据就不存在了，但是onSaveInstanceState方法没有这个限制，它可以持久化页面的数据。可见，onSaveInstance方法有其特殊用途，二者不可混淆。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ViewModel原理&quot;&gt;&lt;a href=&quot;#ViewModel原理&quot; class=&quot;headerlink&quot; title=&quot;ViewModel原理&quot;&gt;&lt;/a&gt;ViewModel原理&lt;/h2&gt;&lt;p&gt;在页面中通过ViewModelProvider类来实现化ViewMo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Android 平台Native代码崩溃捕获机制及实现</title>
    <link href="http://example.com/2022/08/01/Android-%E5%B9%B3%E5%8F%B0Native%E4%BB%A3%E7%A0%81%E5%B4%A9%E6%BA%83%E6%8D%95%E8%8E%B7%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <id>http://example.com/2022/08/01/Android-%E5%B9%B3%E5%8F%B0Native%E4%BB%A3%E7%A0%81%E5%B4%A9%E6%BA%83%E6%8D%95%E8%8E%B7%E6%9C%BA%E5%88%B6%E5%8F%8A%E5%AE%9E%E7%8E%B0/</id>
    <published>2022-08-01T06:25:05.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="信号机制"><a href="#信号机制" class="headerlink" title="信号机制"></a>信号机制</h2><h3 id="程序崩溃"><a href="#程序崩溃" class="headerlink" title="程序崩溃"></a>程序崩溃</h3><ul><li>在Unix-like系统中，所有的崩溃都是编程错误或者硬件错误相关的，系统遇到不可恢复的错误时会触发崩溃机制让程序退出，如除零、段地址错误等。</li><li>异常发生时，CPU通过异常中断的方式，触发异常处理流程。不同的处理器，有不同的异常中断类型和中断处理方式。</li><li>linux把这些中断处理，统一为信号量，可以注册信号量向量进行处理。</li><li>信号机制是进程之间相互传递消息的一种方法，信号全称为软中断信号。</li></ul><h3 id="信号机制-1"><a href="#信号机制-1" class="headerlink" title="信号机制"></a>信号机制</h3><p>函数运行在用户态，当遇到系统调用、中断或是异常的情况时，程序会进入内核态。信号涉及到了这两种状态之间的转换。</p><p><img src="/../images/image-20220801142645905.png" alt="image-20220801142645905"></p><h4 id="1-信号的接收"><a href="#1-信号的接收" class="headerlink" title="(1) 信号的接收"></a>(1) 信号的接收</h4><p>接收信号的任务是由内核代理的，当内核接收到信号后，会将其放到对应进程的信号队列中，同时向进程发送一个中断，使其陷入内核态。注意，此时信号还只是在队列中，对进程来说暂时是不知道有信号到来的。</p><h4 id="2-信号的检测"><a href="#2-信号的检测" class="headerlink" title="(2) 信号的检测"></a>(2) 信号的检测</h4><p>进程陷入内核态后，有两种场景会对信号进行检测：</p><ul><li><strong>进程从内核态返回到用户态前进行信号检测</strong></li><li><strong>进程在内核态中，从睡眠状态被唤醒的时候进行信号检测</strong></li></ul><p>当发现有新信号时，便会进入下一步，信号的处理。</p><h4 id="3-信号的处理"><a href="#3-信号的处理" class="headerlink" title="(3) 信号的处理"></a>(3) 信号的处理</h4><p>信号处理函数是运行在用户态的，调用处理函数前，内核会将当前内核栈的内容备份拷贝到用户栈上，并且修改指令寄存器（eip）将其指向信号处理函数。</p><p>接下来进程返回到用户态中，执行相应的信号处理函数。</p><p>信号处理函数执行完成后，还需要返回内核态，检查是否还有其它信号未处理。如果所有信号都处理完成，就会将内核栈恢复（从用户栈的备份拷贝回来），同时恢复指令寄存器（eip）将其指向中断前的运行位置，最后回到用户态继续执行进程。</p><p>至此，一个完整的信号处理流程便结束了，如果同时有多个信号到达，上面的处理流程会在第2步和第3步骤间重复进行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;信号机制&quot;&gt;&lt;a href=&quot;#信号机制&quot; class=&quot;headerlink&quot; title=&quot;信号机制&quot;&gt;&lt;/a&gt;信号机制&lt;/h2&gt;&lt;h3 id=&quot;程序崩溃&quot;&gt;&lt;a href=&quot;#程序崩溃&quot; class=&quot;headerlink&quot; title=&quot;程序崩溃&quot;&gt;&lt;/a</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ELF文件学习-符号表</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E7%AC%A6%E5%8F%B7%E8%A1%A8/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E7%AC%A6%E5%8F%B7%E8%A1%A8/</id>
    <published>2022-07-18T07:49:19.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们常常调试错误说需要<a href="https://so.csdn.net/so/search?q=%E7%AC%A6%E5%8F%B7%E8%A1%A8&spm=1001.2101.3001.7020">符号表</a>，那么符号表是什么？符号表仅仅用来调试？</p><p>符号表本质就是一个映射表，举个例子：某行<a href="https://so.csdn.net/so/search?q=%E4%BA%8C%E8%BF%9B%E5%88%B6&spm=1001.2101.3001.7020">二进制</a>汇编代码映射到源码第几行。</p><p>符号表的作用：</p><ol><li>调试</li><li>重定位</li></ol><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>重定位可以大致分为两种类别<code>动态重定位</code>与<code>静态重定位</code></p><h3 id="静态重定位"><a href="#静态重定位" class="headerlink" title="静态重定位"></a>静态重定位</h3><p>看下面源代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mainA.c</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> globalvar=<span class="number">0x123</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mainB.c</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="title">test</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> globalvar;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testFunB</span><span class="params">()</span></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;I am  %d\r\n&quot;</span>,globalvar)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们程序有两个源代码，我们知道我编译的时候我们首先先将程序编译成目标文件。</p><p>也就是<code>mainB.o mainA.o</code>，在目标文件中<code>mainB.o</code>不知道test函数和globalvar变量的地址，因此我们需要在链接时修正<code>mainB.o</code>函数调用地址。</p><p>在编译成目标文件时，编译器会把文件中所有的函数与变量地址放入一个符号表中。<br>在链接时把所有目标文件的符号表合成一个，然后利用重定位表和符号表完成函数调用地址修正。</p><p>我们看<code>链接前</code>示意图：</p><p><img src="/../images/image-20220718155420553.png" alt="image-20220718155420553"></p><p>链接后：</p><p><img src="/../images/image-20220718155437037.png" alt="image-20220718155437037"></p><h3 id="动态重定位"><a href="#动态重定位" class="headerlink" title="动态重定位"></a>动态重定位</h3><p>假设A程序需要<code>xxx.so</code>中的<code>yyyy</code>函数那么就需要从<code>xxx.so</code>中的符号表进行读取。</p><p>动态重定位和静态符号表原理都差不多，不过重定位操作延迟到调用时</p><h2 id="静态符号表"><a href="#静态符号表" class="headerlink" title="静态符号表"></a>静态符号表</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mystaticVar = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> myglobalvar=<span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> myglobalvar2=<span class="number">6</span>;</span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">testfun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> *inp= <span class="number">0x00</span>;</span><br><span class="line">        *inp=<span class="number">2</span>;</span><br><span class="line">        testfun();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world %d \r\n&quot;</span>,mystaticVar);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hell</span><span class="params">()</span></span>&#123;</span><br><span class="line">testfun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成目标文件：<br><code>gcc -c -o main.o main.c</code></p><p>首先我们查看对应头表</p><p><img src="/../images/image-20220718160221857.png" alt="image-20220718160221857"></p><p>可以看到一个<code>.symtab</code>这个就是我们符号表数组起始地址</p><p>他的结构如下所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf32_Wordst_name;</span><br><span class="line">Elf32_Addrst_value;</span><br><span class="line">Elf32_Wordst_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf32_Halfst_shndx;</span><br><span class="line">&#125; Elf32_Sym;<span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf64_Wordst_name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf64_Halfst_shndx;</span><br><span class="line">Elf64_Addrst_value;</span><br><span class="line">Elf64_Xwordst_size;</span><br><span class="line">&#125; Elf64_Sym;<span class="comment">//64位</span></span><br></pre></td></tr></table></figure><p>相应的符号表的用命令查看</p><p><img src="/../images/image-20220718161048429.png" alt="image-20220718161048429"></p><h3 id="st-name"><a href="#st-name" class="headerlink" title="st_name"></a>st_name</h3><p>数值表示该符号字符串位于字符串表(.)中的下标。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们常常调试错误说需要&lt;a href=&quot;https://so.csdn.net/so/search?q=%E7%AC%A6%E5%8F%B7</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>ELF文件学习-通过GDB学习PLT和GOT</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E9%80%9A%E8%BF%87GDB%E5%AD%A6%E4%B9%A0PLT%E5%92%8CGOT/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0-%E9%80%9A%E8%BF%87GDB%E5%AD%A6%E4%B9%A0PLT%E5%92%8CGOT/</id>
    <published>2022-07-18T05:37:08.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们知道<code>printf</code>代码的实现位于<code>libc.so</code>中，而我们知道我们的so是在运行通过加载器进行加载的。</p><p>如下代码所示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译指令 gcc -o main2.out main2.c -zlazy  </span></span><br><span class="line"><span class="comment">//zlazy是启用延迟绑定。部分发行版本连接器直接程序加载的时候会进行绑定so函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello %d&quot;</span>,<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd main2.out</span><br></pre></td></tr></table></figure><p>ldd 可以查看程序所需求的动态库</p><p><img src="/../images/image-20220718134312662.png" alt="image-20220718134312662"></p><p>在<code>so</code>编译的时候<code>printf</code>是不知道函数地址的，因为你不知道<code>so</code>中被加载到内存哪个地址。</p><p><img src="/../images/image-20220718134504139.png" alt="image-20220718134504139"></p><h2 id="解决方案1"><a href="#解决方案1" class="headerlink" title="解决方案1"></a>解决方案1</h2><p>我们直接在程序被加载时重写改写所有so的函数调用地址。</p><p>比如如下汇编在编译时的指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call xxx1</span><br><span class="line">call xxx2</span><br><span class="line">call xxx3</span><br></pre></td></tr></table></figure><p>加载后修改所有地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">call yyy1</span><br><span class="line">cal yyy2</span><br><span class="line">call yyy3</span><br></pre></td></tr></table></figure><p>但是弊端异常明显，假设一个程序需要重定位100万个地址的话，那么程序启动会异常的慢，而且你程序不可能所有指令都会被调用(也许用户刚打开就关闭，你的代码基本没怎么执行却浪费大量的时间在加载时)。</p><h2 id="解决方案2"><a href="#解决方案2" class="headerlink" title="解决方案2"></a>解决方案2</h2><p>延迟绑定重定位的地址，也就是我们在调用某条指令的时候再去修改他的调用地址。为了实现延迟绑定ELF推出了两个节 <code>.GOT</code>，<code>PLT</code>.</p><p>首先我們要明白其中的一些格式</p><p><code>.got</code>其实本质是一张表，每一项都是一个地址，也许是变量的地址或者函数的。某个需要重定位的函数被调用后<code>.got</code>表里的与之关联的地址会被改成真正函数地址（未被调用之前got的地址指向plt某个函数）。</p><p><code>.plt</code>存储的是桩代码，负责解析与调用真正的重定位地址函数。</p><p>我们用一个例子举例说明：</p><p>我们原始调用某个函数的汇编指令：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">call</span>   xxxx <span class="meta">#调用&lt;printf&gt;实际所在地址</span></span><br></pre></td></tr></table></figure><p>启用延迟绑定后这个指令会改为调用plt某处代码</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">call</span>   <span class="number">1050</span> <span class="meta">#改为调用plt的某处代码</span></span><br></pre></td></tr></table></figure><p>跳转处plt代码如下所示</p><p><img src="/../images/image-20220718150645957.png" alt="image-20220718150645957"></p><p>0x2fe2 指向.got.plt表中的第二个地址</p><p>0x2fe3 指禹.got.plt表中的第三个地址</p><p>0x2fe2 传入的是link_map结构，可以让我们查找函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> link_map</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/* These first few members are part of the protocol with the debugger.</span></span><br><span class="line"><span class="comment">       This is the same format used in SVR4.  */</span></span><br><span class="line"></span><br><span class="line">    <span class="constructor">ElfW(Addr)</span> l_addr;<span class="comment">/* Difference between the address in the ELF</span></span><br><span class="line"><span class="comment">   file and the addresses in memory.  */</span></span><br><span class="line">    <span class="built_in">char</span> *l_name;<span class="comment">/* Absolute file name object was found in.  */</span></span><br><span class="line">    <span class="constructor">ElfW(Dyn)</span> *l_ld;<span class="comment">/* Dynamic section of the shared object.  */</span></span><br><span class="line">    <span class="keyword">struct</span> link_map *l_next, *l_prev; <span class="comment">/* Chain of loaded objects.  */</span></span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><p>而0x2fe3 其实是一个名叫<code>_dl_runtime_resolve</code>函数，他的作用有两个</p><ol><li>根据传入的函数id和link_map修改got表地址为函数地址</li><li>跳转查找的函数地址</li></ol><p>_dl_runtim_resolve 函数执行完了，</p><p>得到目标函数的地址然后写回.got表，然后才执行目标函数，这样就动态的找到了目标函数地址并执行，这时查看.got表中之前的地址，目录函数的地址已经被替换。</p><p>方便理解使有gdb调试进行演示：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//编译指令 gcc -o main2.out main2.c -zlazy  </span></span><br><span class="line"><span class="comment">//zlazy是启用延迟绑定。部分发行版本连接器直接程序加载的时候会进行绑定so函数</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello %d&quot;</span>,<span class="number">23</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先<code>gbd main2.out</code>进入gdb调试界面</p><p><img src="/../images/image-20220718135532983.png" alt="image-20220718135532983"></p><p><code>layout asm</code>打开汇编面板</p><p><img src="/../images/image-20220718135600331.png" alt="image-20220718135600331"></p><p>b main 在main函数上打断点</p><p>r 运行程序</p><p>si 单独调试</p><p>运行到callq 0x1050 &lt;printf@plt&gt;</p><p><img src="/../images/image-20220718135743116.png" alt="image-20220718135743116"></p><p>si 步入 跳到0x555555555050地址</p><p><img src="/../images/image-20220718135938881.png" alt="image-20220718135938881"></p><p>*0x2fbd(%rip) 是got表中的某一项地址，也就是printf地址，但是由于没有重定向，此时got中的地址会指向另一个plt函数地址</p><p>在图中的就是 0x555555558018 这个地址中存储的地址</p><p><img src="/../images/image-20220718140249906.png" alt="image-20220718140249906"></p><p>接着调用 si 去步入 程序跳到 0x555555555030</p><p><img src="/../images/image-20220718140333604.png" alt="image-20220718140333604"></p><p>pushq 0x0 是printf函数的id 这个由编译器&#x2F;连接器决定函数id是什么，这个地址的代码是ptl.sec中的代码，这段代码最后又跳到</p><p>0x555555555020 </p><p>我们接着si 跳转</p><p><img src="/../images/image-20220718140556739.png" alt="image-20220718140556739"></p><p>.got.plt 第二项是link_map</p><p>.got.plt 中第三项是_dl_runtime_resolve函数地址</p><p>ni 跳过pushq </p><p>si 步入到_dl_runtime_resolve函数</p><p><img src="/../images/image-20220718141012315.png" alt="image-20220718141012315"></p><p>ni不停的一步步跳</p><p>最后执行到printf函数</p><p><img src="/../images/image-20220718145545953.png" alt="image-20220718145545953"></p><p>bt看到当前执行栈</p><p><img src="/../images/image-20220718145717029.png" alt="image-20220718145717029"></p><p>执行到printf函数了</p><p>这里我们查看.got表中的地址，已经替换</p><p><img src="/../images/image-20220718145944304.png" alt="image-20220718145944304"></p><p>已经替换成了真实的地址</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们知道&lt;code&gt;printf&lt;/code&gt;代码的实现位于&lt;code&gt;libc.so&lt;/code&gt;中，而我们知道我们的so是在运行通过加载</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>ELF格式学习-elf头部与节头</title>
    <link href="http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    <id>http://example.com/2022/07/18/ELF%E6%96%87%E4%BB%B6%E5%AD%A6%E4%B9%A0/</id>
    <published>2022-07-18T01:11:53.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>ELF</code>是<code>linux</code>动态库,可执行文件的格式。可以类比到windows下exe的格式。首先推荐一个写的不错文档<a href="https://refspecs.linuxfoundation.org/elf/gabi4+/">ELF格式</a></p><p>我们知道<code>程序</code>需要加载<a href="https://so.csdn.net/so/search?q=%E5%86%85%E5%AD%98&spm=1001.2101.3001.7020">内存</a>后才能运行。但是ELF文件加载到内存后布局会变化，和原始ELF文件相比，<code>加载器</code>会将相同的节属性（比如只读）合并一个段。所以<code>ELF</code>也就有了两种视图，一种未加载前静态视图，另一种是加载后的动态视图。</p><p>我们首先了解<code>静态视图</code>下<code>ELF</code>文件格式如下：</p><p><img src="/../images/b285b3b11743431d8141594ad4b3f8de.png" alt="图1"></p><p>你可以把ELF内容大致分为四个部分:</p><p>(1) ELF头部</p><p>(2) 节</p><p>(3) 节表头</p><p>(4) 程序头</p><blockquote><ol><li><code>ELF头部</code>固定在ELF文件开始</li><li>需要留意程序头和节表头可以位于ELF任意位置，他们位置被<code>ELF头部</code>中的属性指定</li><li>节分有很多种格式需要根据节类别区分，比如重定义节 与代码节</li></ol></blockquote><p>本文根据以下代码作为示例</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mystaticVar = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">int</span> myglobalvar=<span class="number">3</span>;</span><br><span class="line"><span class="comment">//函数来自test.so</span></span><br><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">testfun</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *inp= <span class="number">0x00</span>;</span><br><span class="line">*inp=<span class="number">2</span>;</span><br><span class="line">testfun();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> myLocalVar1 = <span class="number">3</span> ;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> myUnintLocallvar;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;hello world %d \r\n&quot;</span>,mystaticVar);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hell</span><span class="params">()</span></span>&#123;</span><br><span class="line">testfun();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c -o main.o main.c</span><br></pre></td></tr></table></figure><p>生成目录文件 main.o</p><p>再执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -o main.out main.o</span><br></pre></td></tr></table></figure><p>生成可执行文件main.out</p><h2 id="ELF头部"><a href="#ELF头部" class="headerlink" title="ELF头部"></a>ELF头部</h2><p>在linux系统下执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718092450493.png" alt="image-20220718092450493"></p><ul><li>ELF 64-bit 告诉我们这个文件是一个64位系统下的ELF文件</li><li>LSB是least significant bit缩写表示第一个字节是多字节中最低有效位，简而言之就是小端模式</li><li>x86-64 是指该文件运行在那个处理器的ABI下</li><li>version 1(SYSV)是该ELF标准是UNIX_System_V具体参阅SYSV</li><li>not stripped表示该ELF存在符号表</li><li>relocatable 表示该文件是可重定位，因为main.o是目标文件而不是可执行文件，部分代码地址是不确定的</li></ul><p>上面信息其实file程序读取该文件的elf头部得到，我们使用readelf -h文件头查看详细的信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -h main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718092719040.png" alt="image-20220718092719040"></p><p>我们通过010Editor查看main.o</p><p><img src="/../images/image-20220718092849857.png" alt="image-20220718092849857"></p><p>数据结构，我们通过查看elf.h头文件，可以看到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> EI_NIDENT16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf32_hdr</span>&#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[EI_NIDENT];</span><br><span class="line">  Elf32_Halfe_type;</span><br><span class="line">  Elf32_Halfe_machine;</span><br><span class="line">  Elf32_Worde_version;</span><br><span class="line">  Elf32_Addre_entry;  <span class="comment">/* Entry point */</span></span><br><span class="line">  Elf32_Offe_phoff;</span><br><span class="line">  Elf32_Offe_shoff;</span><br><span class="line">  Elf32_Worde_flags;</span><br><span class="line">  Elf32_Halfe_ehsize;</span><br><span class="line">  Elf32_Halfe_phentsize;</span><br><span class="line">  Elf32_Halfe_phnum;</span><br><span class="line">  Elf32_Halfe_shentsize;</span><br><span class="line">  Elf32_Halfe_shnum;</span><br><span class="line">  Elf32_Halfe_shstrndx;</span><br><span class="line">&#125; Elf32_Ehdr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">elf64_hdr</span> &#123;</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">char</span>e_ident[<span class="number">16</span>];<span class="comment">/* ELF &quot;magic number&quot; */</span></span><br><span class="line">  Elf64_Half e_type;</span><br><span class="line">  Elf64_Half e_machine;</span><br><span class="line">  Elf64_Word e_version;</span><br><span class="line">  Elf64_Addr e_entry;<span class="comment">/* Entry point virtual address */</span></span><br><span class="line">  Elf64_Off e_phoff;<span class="comment">/* Program header table file offset */</span></span><br><span class="line">  Elf64_Off e_shoff;<span class="comment">/* Section header table file offset */</span></span><br><span class="line">  Elf64_Word e_flags;</span><br><span class="line">  Elf64_Half e_ehsize;</span><br><span class="line">  Elf64_Half e_phentsize;</span><br><span class="line">  Elf64_Half e_phnum;</span><br><span class="line">  Elf64_Half e_shentsize;</span><br><span class="line">  Elf64_Half e_shnum;</span><br><span class="line">  Elf64_Half e_shstrndx;</span><br><span class="line">&#125; Elf64_Ehdr;</span><br></pre></td></tr></table></figure><h3 id="e-ident"><a href="#e-ident" class="headerlink" title="e_ident"></a>e_ident</h3><p>一个<code>16</code>字节数组大小</p><p><img src="/../images/image-20220718093450294.png" alt="image-20220718093450294"></p><p>在<code>elf.h</code>有<code>EI_XXX</code>表示上面下标位置</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG00<span class="comment">/* e_ident[] indexes */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG11</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG22</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_MAG33</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_CLASS4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_DATA5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_VERSION6</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>EI_PAD7</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG00x7f<span class="comment">/* EI_MAG */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG1<span class="meta-string">&#x27;E&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG2<span class="meta-string">&#x27;L&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG3<span class="meta-string">&#x27;F&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFMAG<span class="meta-string">&quot;177ELF&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>SELFMAG4</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASSNONE0<span class="comment">/* EI_CLASS */</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASS321</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASS642</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>ELFCLASSNUM3</span></span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718093919418.png" alt="image-20220718093919418"></p><h3 id="e-type"><a href="#e-type" class="headerlink" title="e_type"></a>e_type</h3><p>表示当前ELF文件类型，下面举例常见的类型</p><p><img src="/../images/image-20220718093953767.png" alt="image-20220718093953767"></p><h3 id="e-machine"><a href="#e-machine" class="headerlink" title="e_machine"></a>e_machine</h3><p>制定当前ELF运行的CPU架构<br>下面举例常见的类型</p><p><img src="/../images/image-20220718094032677.png" alt="image-20220718094032677"></p><h3 id="e-version"><a href="#e-version" class="headerlink" title="e_version"></a>e_version</h3><p>用于指定ELF版本一般都为1</p><h3 id="e-entry"><a href="#e-entry" class="headerlink" title="e_entry"></a>e_entry</h3><p>elf 代码运行的入口</p><h3 id="e-flags"><a href="#e-flags" class="headerlink" title="e_flags"></a>e_flags</h3><p>在e_machine指定的处理器下的一些特性</p><h2 id="节头表相关字段"><a href="#节头表相关字段" class="headerlink" title="节头表相关字段"></a>节头表相关字段</h2><h3 id="e-shoff"><a href="#e-shoff" class="headerlink" title="e_shoff"></a>e_shoff</h3><p>节头表在文件的偏移</p><h3 id="e-shentsize"><a href="#e-shentsize" class="headerlink" title="e_shentsize"></a>e_shentsize</h3><p>节头表中每个条目的大小</p><h3 id="e-shnum"><a href="#e-shnum" class="headerlink" title="e_shnum"></a>e_shnum</h3><p>节头表中条目的数目</p><h2 id="程序头相关字段"><a href="#程序头相关字段" class="headerlink" title="程序头相关字段"></a>程序头相关字段</h2><h3 id="e-phoff"><a href="#e-phoff" class="headerlink" title="e_phoff"></a>e_phoff</h3><p>程序头在文件中的偏移</p><h3 id="e-phentsize"><a href="#e-phentsize" class="headerlink" title="e_phentsize"></a>e_phentsize</h3><p>指定程序头中每个条目的大小</p><h3 id="e-phnum"><a href="#e-phnum" class="headerlink" title="e_phnum"></a>e_phnum</h3><p>指定程序头中每个条目的个数</p><h3 id="e-shstrndx"><a href="#e-shstrndx" class="headerlink" title="e_shstrndx"></a>e_shstrndx</h3><p>每个节头都一个名称，这些名称都存储一个特殊节中。而e_shstrndx 指定这个特殊的节所在节头表的下标</p><p>我们先看看这个程序中所有节如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -S --wide main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718094250408.png" alt="image-20220718094250408"></p><p>一共13个节，其中<code>.shstrtab</code>表示的存储字符串节 。<br><code>.shstrtab</code>是<code>section head string table</code></p><p>我们查看这个节内容如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -x .shstrtab main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718094358146.png" alt="image-20220718094358146"></p><p>大致结构如下：</p><p><img src="/../images/image-20220718094417879.png" alt="image-20220718094417879"></p><h2 id="节头"><a href="#节头" class="headerlink" title="节头"></a>节头</h2><p>依旧使用<code>main.o</code>我们可以到节头表信息如下：</p><p><img src="/../images/image-20220718094852445.png" alt="image-20220718094852445"></p><p><img src="/../images/image-20220718094924806.png" alt="image-20220718094924806"></p><blockquote><p>节头表的第一项固定为空节不存储实际内容</p></blockquote><p>readelf指令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readelf -S --wide main.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220718095050505.png" alt="image-20220718095050505"></p><p>节头的数据结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  Elf64_Wordsh_name;<span class="comment">/* Section name (string tbl index) */</span></span><br><span class="line">  Elf64_Wordsh_type;<span class="comment">/* Section type */</span></span><br><span class="line">  Elf64_Xwordsh_flags;<span class="comment">/* Section flags */</span></span><br><span class="line">  Elf64_Addrsh_addr;<span class="comment">/* Section virtual addr at execution */</span></span><br><span class="line">  Elf64_Offsh_offset;<span class="comment">/* Section file offset */</span></span><br><span class="line">  Elf64_Xwordsh_size;<span class="comment">/* Section size in bytes */</span></span><br><span class="line">  Elf64_Wordsh_link;<span class="comment">/* Link to another section */</span></span><br><span class="line">  Elf64_Wordsh_info;<span class="comment">/* Additional section information */</span></span><br><span class="line">  Elf64_Xwordsh_addralign;<span class="comment">/* Section alignment */</span></span><br><span class="line">  Elf64_Xwordsh_entsize;<span class="comment">/* Entry size if section holds table */</span></span><br><span class="line">&#125; Elf64_Shdr;</span><br></pre></td></tr></table></figure><blockquote><p>elf节头规则详细文档 <a href="https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.sheader.html">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.sheader.html</a></p></blockquote><h3 id="sh-name"><a href="#sh-name" class="headerlink" title="sh_name"></a>sh_name</h3><p>节名在字符串节中下标,本例中字符串节名称为<code>.shstrtab</code>.我们举例其中一个节<code>.text</code></p><p><img src="/../images/image-20220718130046385.png" alt="image-20220718130046385"></p><p>我们看到.text节的sh_name为20h也就是十进制32.我们看下<code>.shstrtab</code>指向的字节数组的32位</p><p><img src="/../images/image-20220718130203341.png" alt="image-20220718130203341"></p><h3 id="sh-type"><a href="#sh-type" class="headerlink" title="sh_type"></a>sh_type</h3><p>这个字段根据节的内容(<strong>content</strong>)和语义(<strong>semantics</strong>)对节进行分类。<br>分类类型有很多种，我们只举例其中比较常见的类型。</p><p><img src="/../images/image-20220718130235147.png" alt="image-20220718130235147"></p><p><img src="/../images/image-20220718130300749.png" alt="image-20220718130300749"></p><p><code>.text</code>与<code>.data</code>一般就是<code>SHT_PROGBITS</code> （text存储代码 data存储数据）<br><code>.shstrtab</code>一般是<code>SHT_STRTAB</code><br><code>.bss</code>一般是<code>SHT_NOBITS</code> (存储全局未初始化数据等)</p><h3 id="sh-flags"><a href="#sh-flags" class="headerlink" title="sh_flags"></a>sh_flags</h3><p>字段标记是否可读可写可执行等，以及是否在内存中分配内存(<code>SHF_ALLOC</code>)<br>下图为枚举值表：</p><p><img src="/../images/image-20220718130358562.png" alt="image-20220718130358562"></p><h3 id="sh-addr"><a href="#sh-addr" class="headerlink" title="sh_addr"></a>sh_addr</h3><p>这个节被加载后对应VA地址</p><h3 id="sh-offset"><a href="#sh-offset" class="headerlink" title="sh_offset"></a>sh_offset</h3><p>这个节在文件中的偏移</p><h3 id="sh-size"><a href="#sh-size" class="headerlink" title="sh_size"></a>sh_size</h3><p>节大小（不是指节头大小哦）</p><h3 id="sh-link"><a href="#sh-link" class="headerlink" title="sh_link"></a>sh_link</h3><p>一般用于关联节所在节头表的数组下标，一般为0<br>举例说明：<br>我们节中有一个专门用于重定位的节如.rela.text 就是用来重定位代码段部分代码的。<br>sh_link表示这个节所使用的的符号表节在节头表的下标<br>sh_info表示哪个节需要重定向。这个值指向在节头表中的索引。</p><p><img src="/../images/image-20220718130534011.png" alt="image-20220718130534011"></p><h3 id="sh-info"><a href="#sh-info" class="headerlink" title="sh_info"></a>sh_info</h3><p>一般用于关联节所在节头表的数组下标，一般为0</p><h3 id="sh-addralign"><a href="#sh-addralign" class="headerlink" title="sh_addralign"></a>sh_addralign</h3><p>对其数值。如果为0或者1表示不对齐。<br>sh_addr必须为0或者对其sh_addralign取模</p><h3 id="sh-entsize"><a href="#sh-entsize" class="headerlink" title="sh_entsize"></a>sh_entsize</h3><p>ent是entry缩写。</p><p>部分节内部存储是固定数据结构条目数组,针对这类别节sh_entsize指代的是每个条目的字节大小。</p><p>举例说明：<br>符号表节名为<code>.symtab</code>,它存储若干固定结构的符号信息。如下图所示</p><p><img src="/../images/image-20220718130746798.png" alt="image-20220718130746798"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf32_Wordst_name;</span><br><span class="line">Elf32_Addrst_value;</span><br><span class="line">Elf32_Wordst_size;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf32_Halfst_shndx;</span><br><span class="line">&#125; Elf32_Sym;<span class="comment">//32位</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">Elf64_Wordst_name;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_other;</span><br><span class="line">Elf64_Halfst_shndx;</span><br><span class="line">Elf64_Addrst_value;</span><br><span class="line">Elf64_Xwordst_size;</span><br><span class="line">&#125; Elf64_Sym;<span class="comment">//64位</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>sh_entsize指的就是Elf64_Sym或者Elf32_Sym的大小</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;code&gt;ELF&lt;/code&gt;是&lt;code&gt;linux&lt;/code&gt;动态库,可执行文件的格式。可以类比到windows下exe的格式。首先</summary>
      
    
    
    
    <category term="NDK" scheme="http://example.com/categories/NDK/"/>
    
    
  </entry>
  
  <entry>
    <title>Android-VPN学习笔记</title>
    <link href="http://example.com/2022/06/21/Android-VPN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://example.com/2022/06/21/Android-VPN%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2022-06-21T02:24:25.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>android设备上，如果已经使用了VpnService框架，建立起了一条从设备到远端的VPN链接，那么数据包在设备上大致经历了如下四个过程的转换：</p><p>在介绍如何使用这些新增的API之前，先来说说其基本的原理。</p><p>android设备上，如果已经使用了VpnService框架，建立起了一条从设备到远端的VPN链接，那么数据包在设备上大致经历了如下四个过程的转换：</p><p><img src="/../images/image-20220801145524870.png" alt="image-20220801145524870"></p><p>1）应用程序使用socket，将相应的数据包发送到真实的网络设备上。一般移动设备只有无线网卡，因此是发送到真实的WiFi设备上；</p><p>2）Android系统通过iptables，使用NAT，将所有的数据包转发到TUN虚拟网络设备上去，端口是tun0；</p><p>3）VPN程序通过打开&#x2F;dev&#x2F;tun设备，并读取该设备上的数据，可以获得所有转发到TUN虚拟网络设备上的IP包。因为设备上的所有IP包都会被NAT转成原地址是tun0端口发送的，所以也就是说你的VPN程序可以获得进出该设备的几乎所有的数据（也有例外，不是全部，比如回环数据就无法获得）；</p><p>4）VPN数据可以做一些处理，然后将处理过后的数据包，通过真实的网络设备发送出去。为了防止发送的数据包再被转到TUN虚拟网络设备上，VPN程序所使用的socket必须先被明确绑定到真实的网络设备上去。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>要实现Android设备上的VPN程序，一般需要分别实现一个继承自Activity类的带UI的客户程序和一个继承自VpnService类的服务程序。</p><p><strong>申明权限</strong></p><p>要想让你的VPN程序正常运行，首先必须要在AndroidManifest.xml中显式申明使用“android.permission.BIND_VPN_SERVICE”权限。</p><p><strong>客户程序实现</strong></p><p>客户程序一般要首先调用VpnService.prepare函数：</p><p><img src="/../images/image-20220621102623859.png" alt="image-20220621102623859"></p><p>Vpnservice是安卓提供给开发者用于开发自己的VPN的服务。开发者继承这个Vpnservice，从而实现VPN。手机本身是有一块网卡，安卓虚拟出一个网卡，然后通过NAT，将真实网卡上的出站流量转发到虚拟网卡上，然后Vpnservice获取这个虚拟网卡上的“流量”，并转发给Vpn的服务端。其实还是挺好理解的。问题在于，上面说的流量，并不是<strong>传输层的tcp&#x2F;udp流量</strong>，而是<strong>ip数据报</strong>。</p><p>现在要处理ip数据报，而且java语言只提供了传输层（tcp&#x2F;udp）的socket传输api。这意味着，开发Vpn必定有一部分需要使用其他语言（C&#x2F;C++）。</p><p>看安卓example的<a href="https://android.googlesource.com/platform/development/+/master/samples/ToyVpn">ToyVpn</a>中server的代码，发现他的代码就是直接open &#x2F;dev下的网卡文件，然后读写来收取ip数据。</p><h2 id="解决方案一"><a href="#解决方案一" class="headerlink" title="解决方案一"></a>解决方案一</h2><p>这也是ToyVpn所采用的实现方式，将IP数据包通过UDP发送给vps服务器，vps服务器解包后得到原始的IP数据包，通过C&#x2F;C++写进网卡文件，然后把IP数据包发送出去(为啥不用java,因为java只能操作tcp&#x2F;udp的socket api，无法直接把IP数据包写入网卡，并发送出去)</p><p>通过Udp传输的原因是，Udp（用户数据报）是ip数据报的简单包裹，不像tcp数据包那样，增加了很复杂的东西，也不进行失败重传等操作。要清楚，我们这里传输的是较底层的ip数据报，在ip数据报的上层，可能是UDP，也可能是TCP，不管传输层是什么协议，消息的正确性，失败重传等等，都有人在传输层做过了，我们只要传就好了，所以用UDP是最好的。</p><p>数据报文封包和UDP隧道相对来说还是比较容易理解的概念。试想一个进入隧道的TCP数据包：</p><p><img src="/../images/image-20220621103458154.png" alt="image-20220621103458154"></p><p>这个数据报有正常的IP和TCP头，后面是用户要发送的数据。封包的过程如下：</p><p><img src="/../images/image-20220621103514564.png" alt="image-20220621103514564"></p><p>这样，这个数据包就是一个UDP数据包，里面装的是TCP数据包。系统可以将他想普通的UDP数据包一样发送；在接收端，额外的UDP头部被去掉后，原始的包含tcp消息的ip数据报经修改后（修改源ip地址）继续进入网络堆栈进行处理。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基本原理&quot;&gt;&lt;a href=&quot;#基本原理&quot; class=&quot;headerlink&quot; title=&quot;基本原理&quot;&gt;&lt;/a&gt;基本原理&lt;/h2&gt;&lt;p&gt;android设备上，如果已经使用了VpnService框架，建立起了一条从设备到远端的VPN链接，那么数据包在设备上大致经</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>c++-类的定义、运算符重载</title>
    <link href="http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-1/"/>
    <id>http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD-1/</id>
    <published>2022-06-19T05:15:31.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><blockquote><p>class A:[private&#x2F;protected&#x2F;public] B</p><p>默认为private继承 </p><p>A是基类，B称为子类或者派生类 </p></blockquote><table><thead><tr><th>方式</th><th>说明</th></tr></thead><tbody><tr><td>public</td><td>基类的public、protected成员也是派生类相应的成员，基类的private成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。</td></tr><tr><td>protected</td><td>基类的公有和保护成员将成为派生类的保护成员</td></tr><tr><td>private</td><td>基类的公有和保护成员将成为派生类的私有成员</td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span>   Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// 调用父类 方法</span></span><br><span class="line">Parent::<span class="built_in">test</span>();</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;child&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>多继承</strong></p><blockquote><p>一个子类可以有多个父类，它继承了多个父类的特性。</p><p>class &lt;派生类名&gt;:&lt;继承方式1&gt;&lt;基类名1&gt;,&lt;继承方式2&gt;&lt;基类名2&gt;,…</p></blockquote><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><blockquote><p>多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。</p><p>静态多态（静态联编）是指在编译期间就可以确定函数的调用地址，通过<strong>函数重载</strong>和<strong>模版（泛型编程）</strong>实现 </p><p>动态多态（动态联编）是指函数调用的地址不能在编译器期间确定，必须需要在运行时才确定 ,通过<strong>继承+虚函数</strong> 实现</p></blockquote><h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;child&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Parent *c = <span class="keyword">new</span> <span class="built_in">Child</span>();</span><br><span class="line"><span class="comment">// 编译期间 确定c 为 parent 调用parent的test方法</span></span><br><span class="line">c-&gt;<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改Parent为virtual 虚函数 动态链接,告诉编译器不要静态链接到该函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;parent&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//动态多态 调用Child的test方法</span></span><br><span class="line">c-&gt;<span class="built_in">test</span>();</span><br></pre></td></tr></table></figure><blockquote><p>构造函数任何时候都不可以声明为虚函数</p><p>析构函数一般都是虚函数,释放先执行子类再执行父类</p></blockquote><p><strong>纯虚函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//纯虚函数 继承自这个类需要实现 抽象类型</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><blockquote><p>模板是泛型编程的基础</p></blockquote><h3 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h3><blockquote><p>函数模板能够用来创建一个通用的函数。以支持多种不同的形參。避免重载函数的函数体反复设计。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </span><br><span class="line"><span class="function">T <span class="title">max</span><span class="params">(T a,T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 函数的主体</span></span><br><span class="line"><span class="keyword">return</span>  a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代替了</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">float</span> a,<span class="keyword">float</span> b)</span></span></span><br></pre></td></tr></table></figure><h3 id="类模板-泛型类"><a href="#类模板-泛型类" class="headerlink" title="类模板(泛型类)"></a>类模板(泛型类)</h3><blockquote><p>为类定义一种模式。使得类中的某些数据成员、默写成员函数的參数、某些成员函数的返回值，能够取随意类型</p><p>常见的 容器比如 向量 vector <int> 或 vector <string> 就是模板类</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">E</span>,<span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">T <span class="title">add</span><span class="params">(E e,T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> e+t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Queue&lt;<span class="keyword">int</span>,<span class="keyword">float</span>&gt; q;</span><br><span class="line">q.<span class="built_in">add</span>(<span class="number">1</span>,<span class="number">1.1f</span>) = <span class="number">2.1f</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;继承&quot;&gt;&lt;a href=&quot;#继承&quot; class=&quot;headerlink&quot; title=&quot;继承&quot;&gt;&lt;/a&gt;继承&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;class A:[private&amp;#x2F;protected&amp;#x2F;public] B&lt;/p&gt;
&lt;p&gt;默认为</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c++-类的定义、运算符重载</title>
    <link href="http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>http://example.com/2022/06/19/c-%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89%E3%80%81%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2022-06-19T04:24:30.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><blockquote><p>C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，用户定义的类型。    </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;    <span class="comment">//默认 private</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> k):<span class="built_in">i</span>(i),<span class="built_in">j</span>(j),<span class="built_in">k</span>(k);<span class="comment">//构造方法 </span></span><br><span class="line">~<span class="built_in">Student</span>();<span class="comment">//析构方法 </span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Student <span class="title">student</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span></span>; <span class="comment">//调用构造方法 栈</span></span><br><span class="line"><span class="comment">//出方法释放student 调用析构方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态内存(堆)</span></span><br><span class="line">Student *student = <span class="keyword">new</span> <span class="built_in">Student</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//释放</span></span><br><span class="line"><span class="keyword">delete</span> student;</span><br><span class="line">student = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行(不需要手动调用)。</p><p>private：可以被该类中的函数、友元函数访问。 不能被任何其他访问，该类的对象也不能访问。 </p><p>protected：可以被该类中的函数、子类的函数、友元函数访问。 但不能被该类的对象访问。</p><p>public：可以被该类中的函数、子类的函数、友元函数访问，也可以被该类的对象访问。 </p></blockquote><p>Student.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现函数，要使用域作用符::</span></span><br><span class="line"><span class="comment">//构造方法  i(i) 前面的是成员属性 后面是传参的i 只有构造函数可以这么写 这是一种给成员属性赋值的方法</span></span><br><span class="line">Student::<span class="built_in">Student</span>(<span class="keyword">int</span> i,<span class="keyword">int</span> j):<span class="built_in">i</span>(i),<span class="built_in">j</span>(j) &#123;</span><br><span class="line">  <span class="comment">//由动态申请内存来的，没调用 free会泄漏</span></span><br><span class="line">  <span class="comment">//xx = malloc(100);</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以跟java一样，这么给成员属性赋值</span></span><br><span class="line">  <span class="keyword">this</span>-&gt;i = i;</span><br><span class="line">  <span class="keyword">this</span>-&gt;j = j;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;构造方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于释放动态申请的内存</span></span><br><span class="line">Student::~<span class="built_in">Student</span>() &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;析构方法&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>对应Student的实现，可以直接在h类中，也可以放在cpp中，放在cpp中要注意 使用Student::域作用符加函数名，如果是有返回值的void 的的要在域作用符之前 </p></blockquote><h2 id="常量函数"><a href="#常量函数" class="headerlink" title="常量函数"></a>常量函数</h2><blockquote><p>函数后写上const，表示不会也不允许修改类中的成员。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="comment">// 常量函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span> <span class="keyword">const</span>  </span>&#123;</span><br><span class="line"><span class="comment">//错误 不能修改name 去掉const之后可以</span></span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><blockquote><p>类的友元函数是定义在类外部，但有权访问类的所有私有（private）成员和保护（protected）成员</p><p>友元可以是一个函数，该函数被称为友元函数；友元也可以是一个类，该类被称为友元类，在这种情况下，整个类及其所有成员都是友元。</p></blockquote><h3 id="友元函数"><a href="#友元函数" class="headerlink" title="友元函数"></a>友元函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span>  </span>&#123;</span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//友元函数</span></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//能够使用student中私有的name属性</span></span><br><span class="line">cout &lt;&lt; student-&gt;name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student *student = <span class="keyword">new</span> Student;</span><br><span class="line">student-&gt;<span class="built_in">setName</span>(<span class="string">&quot;Lance&quot;</span>);</span><br><span class="line"><span class="built_in">printName</span>(student);</span><br></pre></td></tr></table></figure><h3 id="友元类"><a href="#友元类" class="headerlink" title="友元类"></a>友元类</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="keyword">char</span>* _name)</span>  </span>&#123;</span><br><span class="line">name = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">(Student *student)</span></span>;</span><br><span class="line">    <span class="comment">//友元类</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Student *student)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//能够使用student中私有的name属性</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;call:&quot;</span> &lt;&lt; student-&gt;name &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h2><blockquote><p>和Java一样，可以使用static来声明类成员为静态的</p><p>当我们使用静态成员属性或者函数时候 需要使用 域运算符 :: </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Instance.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> INSTANCE_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INSTANCE_H</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instance</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">static</span> Instance* <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">static</span> Instance *instance;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Instance.cpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Instance.h&quot;</span></span></span><br><span class="line">Instance* Instance::instance = <span class="number">0</span>;</span><br><span class="line"><span class="function">Instance* <span class="title">Instance::getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//C++11以后，编译器保证内部静态变量的线程安全性</span></span><br><span class="line"><span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">instance = <span class="keyword">new</span> Instance;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重载函数"><a href="#重载函数" class="headerlink" title="重载函数"></a>重载函数</h2><blockquote><p>C++ 允许在同一作用域中的某个<strong>函数</strong>和<strong>运算符</strong>指定多个定义，分为<strong>函数重载</strong>和<strong>运算符重载</strong>。 </p></blockquote><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;整数为: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span>  f)</span> </span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;浮点数为: &quot;</span> &lt;&lt; f &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h3><blockquote><p>C++允许重定义或重载大部分 C++ 内置的运算符 </p><p>函数名是由关键字 operator 和其后要重载的运算符符号构成的 </p><p>重载运算符可被定义为普通的非成员函数或者被定义为类成员函数 </p></blockquote><p><strong>成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test1</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Test1</span>()&#123;&#125;</span><br><span class="line"><span class="comment">//定义成员函数进行重载</span></span><br><span class="line">    <span class="comment">//返回对象   调用拷贝构造函数  释放函数内 t 对象</span></span><br><span class="line">    <span class="comment">//引用类型(Test1&amp;) 没有复制对象 返回的是 t 对象本身 t会被释放 所以会出现问题(数据释放不彻底就不一定)</span></span><br><span class="line">    <span class="comment">// 可以输出 t 与 t3 地址查看</span></span><br><span class="line">Test1 <span class="keyword">operator</span>+(<span class="keyword">const</span> Test1&amp; t1) &#123;</span><br><span class="line">Test1 t;</span><br><span class="line">t.i = <span class="keyword">this</span>-&gt;i + t1.i;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//拷贝构造函数 (有默认的) </span></span><br><span class="line">    <span class="built_in">Test1</span>(<span class="keyword">const</span> Test1&amp; t)&#123;</span><br><span class="line">        <span class="comment">//浅拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;i = t.i;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;拷贝&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="comment">//如果动态申请内存 需要深拷贝</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test1 t1;</span><br><span class="line">Test1 t2;</span><br><span class="line">t1.i = <span class="number">100</span>;</span><br><span class="line">t2.i = <span class="number">200</span>;</span><br><span class="line"><span class="comment">//发生两次拷贝</span></span><br><span class="line"><span class="comment">// C++真正的临时对象是不可见的匿名对象</span></span><br><span class="line"><span class="comment">//1、拷贝构造一个无名的临时对象，并返回这个临时对象</span></span><br><span class="line"><span class="comment">//2、由临时对象拷贝构造对象 t3</span></span><br><span class="line"><span class="comment">//语句结束析构临时对象</span></span><br><span class="line">Test1 t3 = t1 + t2;</span><br><span class="line">cout &lt;&lt; t3.i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><blockquote><p>Xcode上玩，使用的g++编译器会进行 <strong>返回值优化(RVO、NRVO)</strong> 从而看不到拷贝构造函数的调用。</p><p>可以加入 “-fno-elide-constructors” 取消GNU g++优化</p><p><u>对windows vs编译器cl.exe无效，VS Debug执行RVO，Release执行NRVO</u></p><p>RVO（Return Value Optimization）:消除函数返回时创建的临时对象 </p><p>NRVO(Named Return Value Optimization)：属于 RVO 的一种技术, 直接将要初始化的对象替代掉返回的局部对象进行操作。</p></blockquote><p><img src="/../images/%E8%BF%94%E5%9B%9E%E5%80%BC%E4%BC%98%E5%8C%96.jpg" alt="返回值优化"></p><p><strong>非成员函数</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//定义非成员函数进行 + 重载</span></span><br><span class="line">Test2 <span class="keyword">operator</span>+(<span class="keyword">const</span> Test2&amp; t21, <span class="keyword">const</span> Test2&amp; t22) &#123;</span><br><span class="line">Test2 t;</span><br><span class="line">t.i = t21.i + t22.i;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test2 t21;</span><br><span class="line">Test2 t22;</span><br><span class="line">t21.i = <span class="number">100</span>;</span><br><span class="line">t22.i = <span class="number">200</span>;</span><br><span class="line">Test2 t23 = t21 + t22;</span><br><span class="line">cout &lt;&lt; t23.i &lt;&lt; endl;</span><br></pre></td></tr></table></figure><blockquote><p>允许重载的运算符</p></blockquote><table><thead><tr><th>类型</th><th>运算符</th></tr></thead><tbody><tr><td>关系运算符</td><td>&#x3D;&#x3D;(等于)，!&#x3D; (不等于)，&lt; (小于)，&gt; (大于&gt;，&lt;&#x3D;(小于等于)，&gt;&#x3D;(大于等于)</td></tr><tr><td>逻辑运算符</td><td>||(逻辑或)，&amp;&amp;(逻辑与)，!(逻辑非)</td></tr><tr><td>单目运算符</td><td>+ (正)，-(负)，*(指针)，&amp;(取地址)</td></tr><tr><td>自增自减运算符</td><td>++(自增)，–(自减)</td></tr><tr><td>位运算符</td><td>| (按位或)，&amp; (按位与)，~(按位取反)，^(按位异或),，&lt;&lt; (左移)，&gt;&gt;(右移)</td></tr><tr><td>赋值运算符</td><td>&#x3D;, +&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D; , % &#x3D; , &amp;&#x3D;, |&#x3D;, ^&#x3D;, &lt;&lt;&#x3D;, &gt;&gt;&#x3D;</td></tr><tr><td>空间申请与释放</td><td>new, delete, new[ ] , delete[]</td></tr><tr><td>其他运算符</td><td>()(函数调用)，-&gt;(成员访问)，,(逗号)，<a href="%E4%B8%8B%E6%A0%87"></a></td></tr></tbody></table><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> *<span class="keyword">operator</span> <span class="title">new</span> <span class="params">(<span class="keyword">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新的new:&quot;</span> &lt;&lt; size &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="keyword">void</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//释放由p指向的存储空间</span></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;新的delete&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;类&quot;&gt;&lt;a href=&quot;#类&quot; class=&quot;headerlink&quot; title=&quot;类&quot;&gt;&lt;/a&gt;类&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;C++ 在 C 语言的基础上增加了面向对象编程，C++ 支持面向对象程序设计。类是 C++ 的核心特性，用户定义的类型。 </summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c++-c++基础</title>
    <link href="http://example.com/2022/06/19/c-c-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/06/19/c-c-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-06-18T23:59:28.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c与c-兼容"><a href="#c与c-兼容" class="headerlink" title="c与c++兼容"></a>c与c++兼容</h2><p><strong>c当中大部分代码都可以在c++中使用</strong></p><p><strong>在c++中调用c代码，要使用extern “C”{}</strong></p><p>为什么？</p><p>写两个一样内容的一个是c文件一个是cpp文件</p><p>a.c文件</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>a.cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc a.c -o ac.o</span><br><span class="line">gcc a.cpp -o acpp.o</span><br></pre></td></tr></table></figure><p>分别进行编译</p><p>得到ac.o 和acpp.o两个文件</p><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -A ac.o</span><br></pre></td></tr></table></figure><p><img src="/../images/image-20220619094731846.png" alt="image-20220619094731846"></p><p>我们看到 test编译后的符号表 还是test</p><p>然后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -A acpp.o</span><br></pre></td></tr></table></figure><p>看下按cpp的方式编译后的符号</p><p><img src="/../images/image-20220619094852760.png" alt="image-20220619094852760"></p><p>发现cpp会把参数的类型合并到test上 如果有test(int x,int y) 就是 _Z4testii</p><p>那么在cpp中使用c就出现问题了，如图所示</p><p><img src="/../images/image-20220619095933631.png" alt="image-20220619095933631"></p><p>这就是为什么c++中一旦使用c函数，要使用extern “C” 把头文件进行修饰的原因，统一采用C编码方式</p><h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">change</span>(<span class="keyword">int</span>&amp; j)&#123;</span><br><span class="line">  j = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//int&amp; 引用类型 和java很像</span></span><br><span class="line"><span class="comment">//10 这个内存地址 给了个别名j</span></span><br><span class="line"><span class="keyword">int</span>&amp; j = i;</span><br><span class="line"><span class="comment">//调用change后 j的内存地址上存的值会改变 和指针很像</span></span><br><span class="line"><span class="built_in">change</span>(j);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="c中的字符串"><a href="#c中的字符串" class="headerlink" title="c中的字符串"></a>c中的字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//c 使用NULL \0结尾的一个字符数组</span></span><br><span class="line"><span class="keyword">char</span> str1[] = &#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> *str2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="comment">//默认给我们添加了\0 这两种都可以称为c风格的字符串</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>函数</th><th>描述</th></tr></thead><tbody><tr><td>strcpy(s1, s2);</td><td>复制字符串 s2 到字符串 s1。</td></tr><tr><td>strcat(s1, s2);</td><td>连接字符串 s2 到字符串 s1 的末尾。</td></tr><tr><td>strlen(s1);</td><td>返回字符串 s1 的长度。</td></tr><tr><td>strcmp(s1, s2);</td><td>如果 s1 和 s2 相同，则返回 0；如果 s1 &lt; s2 则返回小于0；如果 s1&gt;s2 则返回大于0</td></tr><tr><td>strchr(s1, ch);</td><td>返回指向字符串 s1 中字符 ch 的第一次出现的位置的指针。</td></tr><tr><td>strstr(s1, s2);</td><td>返回指向字符串 s1 中字符串 s2 的第一次出现的位置的指针。</td></tr></tbody></table><blockquote><p>说明：strcmp:两个字符串自左向右逐个字符相比（按ASCII值大小相比较） </p></blockquote><h2 id="c-string"><a href="#c-string" class="headerlink" title="c++ string"></a>c++ string</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//都会创建一个c++类型的对象</span></span><br><span class="line">string str1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(str1)</span></span>;</span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;天之道&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">//申请内存 调用 构造方法</span></span><br><span class="line">string *str4 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;88&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="keyword">delete</span> str4;</span><br><span class="line">str4 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">//malloc = free</span></span><br><span class="line"><span class="comment">//new = delete</span></span><br><span class="line"><span class="comment">//new 数组 = delete[]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拼接字符串</span></span><br><span class="line"><span class="comment">//+ 操作符重载：重新定义 + - * /的行为</span></span><br><span class="line">string str5 = str1 + str3;</span><br><span class="line"><span class="comment">//跟java一样，string是一个对象</span></span><br><span class="line">str1.<span class="built_in">append</span>(str3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//string是对象 不能直接打印 要先获得c风格的字符串</span></span><br><span class="line">cout &lt;&lt; str1.<span class="built_in">c_str</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">str1.<span class="built_in">size</span>();</span><br><span class="line">str1.<span class="built_in">empty</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//指针就不能用.了 要用-&gt;</span></span><br><span class="line"><span class="comment">//用指针有什么好处</span></span><br><span class="line"><span class="comment">//1.出方法，清理栈</span></span><br><span class="line"><span class="comment">//2.指针 占用字节小 指针是地址 用指针传输效率髚 </span></span><br><span class="line">str4-&gt;<span class="built_in">c_str</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p>相当于java的包</p><p>using namespace std;</p><p>不加这个就要</p><p>std::cout 要用域作用名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个自己的命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> A&#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> B&#123;</span><br><span class="line">  <span class="keyword">namespace</span> C&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//::域作用符</span></span><br><span class="line">A::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//就像包名一层层嵌套  using namespace A::B</span></span><br><span class="line">A::B::<span class="built_in">test</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ii;</span><br><span class="line"></span><br><span class="line"><span class="built_in">main</span>()&#123;</span><br><span class="line">  ii = <span class="number">11</span>;</span><br><span class="line">  <span class="keyword">int</span> ii = <span class="number">10</span>;</span><br><span class="line">  cout &lt;&lt; ii &lt;&lt; endl;s</span><br><span class="line">  <span class="comment">//操作重名的全局变量的时候 可以使用域作用符</span></span><br><span class="line">  cout &lt;&lt; ::ii &lt;&lt; endl;</span><br><span class="line">  ::ii = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>像java的包名一样，可以避免同名同参数的函数</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c与c-兼容&quot;&gt;&lt;a href=&quot;#c与c-兼容&quot; class=&quot;headerlink&quot; title=&quot;c与c++兼容&quot;&gt;&lt;/a&gt;c与c++兼容&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;c当中大部分代码都可以在c++中使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
  <entry>
    <title>c语言-结构体、共用体</title>
    <link href="http://example.com/2022/06/19/c%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E5%85%B1%E7%94%A8%E4%BD%93/"/>
    <id>http://example.com/2022/06/19/c%E8%AF%AD%E8%A8%80-%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E5%85%B1%E7%94%A8%E4%BD%93/</id>
    <published>2022-06-18T23:23:02.000Z</published>
    <updated>2022-10-29T11:29:48.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><p>类似于javabean</p><p>结构体当中默认都是public</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//struct 结构体 java class </span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Student</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">short</span> j;</span><br><span class="line">&#125;s1,s2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">People</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">&#125;People;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Student</span> <span class="title">student</span>;</span></span><br><span class="line"></span><br><span class="line">  student.i = <span class="number">10</span>;</span><br><span class="line">  student.j = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">  People people;</span><br><span class="line">  people.i = <span class="number">30</span>;</span><br><span class="line">  people.j = <span class="number">40</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>c++中结构体是一种类型，可以直接 Student student;这么定义，但在c中，要用struct关键字 </p><p>struct Student student;除非使用typedef</p></blockquote><h3 id="结构体字节对齐"><a href="#结构体字节对齐" class="headerlink" title="结构体字节对齐"></a>结构体字节对齐</h3><h4 id="自然对齐："><a href="#自然对齐：" class="headerlink" title="自然对齐："></a>自然对齐：</h4><p>1.某一个变量 保存的内存地址的开始位置需要相对于结构体开始位置的偏移是这个变量字节数的整数倍开发</p><p>比如</p><p>int 4  </p><p>保存4这个int 要以 0x00 0x04 0x08 开始</p><p>2.结构体所占的字节 是结构体中最长变量所占字节的整数倍</p><p>所以就算存出了10个字节的，如果里面有int 10不是4的整数倍，要补齐所以是12</p><h4 id="预处理器设置对齐"><a href="#预处理器设置对齐" class="headerlink" title="预处理器设置对齐"></a>预处理器设置对齐</h4><p>不同平台设置方式不同 只能传的是2的倍数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(2) <span class="comment">//windows</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct2</span>&#123;</span></span><br><span class="line"><span class="keyword">short</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">  <span class="keyword">short</span> k;</span><br><span class="line">&#125; __attribut__((aligned(<span class="number">2</span>),packed)) <span class="comment">//这是linux mac上的设置方式</span></span><br></pre></td></tr></table></figure><h2 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h2><p>内存复用，不再使用，节省内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在相同的内存位置存储不同的数据</span></span><br><span class="line"><span class="comment">//共用体 最大成员的字节大小</span></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">MyUnion</span>&#123;</span></span><br><span class="line">  <span class="keyword">short</span> i;</span><br><span class="line">  <span class="keyword">int</span> j;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">MyUnion</span> <span class="title">mu</span>;</span></span><br><span class="line">  mu.i = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//给j赋值，会覆盖i的值</span></span><br><span class="line">  mu.j = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;main i的地址:%#x,j的地址:%#x\n&quot;</span>,&amp;mu.i,&amp;mu.j);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>在内存中i和j的地址是一样的，所以  main i的地址:0xe8ee6640,j的地址:0xe8ee6640</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;结构体&quot;&gt;&lt;a href=&quot;#结构体&quot; class=&quot;headerlink&quot; title=&quot;结构体&quot;&gt;&lt;/a&gt;结构体&lt;/h2&gt;&lt;p&gt;类似于javabean&lt;/p&gt;
&lt;p&gt;结构体当中默认都是public&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;</summary>
      
    
    
    
    <category term="C语言" scheme="http://example.com/categories/C%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
</feed>
