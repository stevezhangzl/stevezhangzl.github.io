<!DOCTYPE html><html lang="zh-CN"><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=2"><meta name="theme-color" content="#222"><meta name="generator" content="Hexo 6.0.0"><link rel="apple-touch-icon" sizes="180x180" href="/images/apple-touch-icon-next.png"><link rel="icon" type="image/png" sizes="32x32" href="/images/favicon-32x32-next.png"><link rel="icon" type="image/png" sizes="16x16" href="/images/favicon-16x16-next.png"><link rel="mask-icon" href="/images/logo.svg" color="#222"><link rel="stylesheet" href="/css/main.css"><link rel="stylesheet" href="/lib/font-awesome/css/all.min.css"><script id="hexo-configurations">var NexT=window.NexT||{},CONFIG={hostname:"example.com",root:"/",scheme:"Pisces",version:"7.8.0",exturl:!1,sidebar:{position:"left",display:"post",padding:18,offset:12,onmobile:!1},copycode:{enable:!1,show_result:!1,style:null},back2top:{enable:!0,sidebar:!1,scrollpercent:!1},bookmark:{enable:!1,color:"#222",save:"auto"},fancybox:!1,mediumzoom:!1,lazyload:!1,pangu:!1,comments:{style:"tabs",active:null,storage:!0,lazyload:!1,nav:null},algolia:{hits:{per_page:10},labels:{input_placeholder:"Search for Posts",hits_empty:"We didn't find any results for the search: ${query}",hits_stats:"${hits} results found in ${time} ms"}},localsearch:{enable:!1,trigger:"auto",top_n_per_article:1,unescape:!1,preload:!1},motion:{enable:!0,async:!1,transition:{post_block:"fadeIn",post_header:"slideDownIn",post_body:"slideDownIn",coll_header:"slideLeftIn",sidebar:"slideUpIn"}}}</script><meta name="description" content="JVM运行时数据区  class文件通过ClassLoader被加载 字节码执行引擎会在运行时执行字节码 运行时数据区其实就是字节码在运行时的一个状态， 运行时数据区里最重要的一个地方就是堆，垃圾回收主要针对的就是这个部分 方法区就是存放字节码加载出来的类信息 堆和方法区是线程共享的 非线程共享区，程序计数器，虚拟机栈，本地方法栈  栈数据结构-栈：FILO（先进后出）   方法的调用是基于栈的，"><meta property="og:type" content="article"><meta property="og:title" content="Android平台的虚拟机是基于栈的吗？"><meta property="og:url" content="http://example.com/2022/10/26/Android%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E5%90%97"><meta property="og:site_name" content="SteveZhang博客"><meta property="og:description" content="JVM运行时数据区  class文件通过ClassLoader被加载 字节码执行引擎会在运行时执行字节码 运行时数据区其实就是字节码在运行时的一个状态， 运行时数据区里最重要的一个地方就是堆，垃圾回收主要针对的就是这个部分 方法区就是存放字节码加载出来的类信息 堆和方法区是线程共享的 非线程共享区，程序计数器，虚拟机栈，本地方法栈  栈数据结构-栈：FILO（先进后出）   方法的调用是基于栈的，"><meta property="og:locale" content="zh_CN"><meta property="og:image" content="http://example.com/images/image-20221026194958803.png"><meta property="og:image" content="http://example.com/images/image-20221026195511155.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221026200015206.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027075654379.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027075736745.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027075937265.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080104082.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080302150.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080402254.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080525495.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080718158.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080826308.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027080952871.png"><meta property="og:image" content="http://example.com/2022/10/images/image-20221027081102002.png"><meta property="og:image" content="http://example.com/images/image-20221031044438997.png"><meta property="og:image" content="http://example.com/images/image-20221031044700482.png"><meta property="og:image" content="http://example.com/images/image-20221031044757313.png"><meta property="og:image" content="http://example.com/images/image-20221031044838435.png"><meta property="og:image" content="http://example.com/images/image-20221031045047855.png"><meta property="og:image" content="http://example.com/images/image-20221031045146616.png"><meta property="article:published_time" content="2022-10-26T11:46:26.000Z"><meta property="article:modified_time" content="2022-11-17T07:51:48.000Z"><meta property="article:author" content="张龙"><meta name="twitter:card" content="summary"><meta name="twitter:image" content="http://example.com/images/image-20221026194958803.png"><link rel="canonical" href="http://example.com/2022/10/26/Android%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E5%90%97"><script id="page-configurations">CONFIG.page={sidebar:"",isHome:!1,isPost:!0,lang:"zh-CN"}</script><title>Android平台的虚拟机是基于栈的吗？ | SteveZhang博客</title><noscript><style>.sidebar-inner,.use-motion .brand,.use-motion .collection-header,.use-motion .comments,.use-motion .menu-item,.use-motion .pagination,.use-motion .post-block,.use-motion .post-body,.use-motion .post-header{opacity:initial}.use-motion .site-subtitle,.use-motion .site-title{opacity:initial;top:initial}.use-motion .logo-line-before i{left:initial}.use-motion .logo-line-after i{right:initial}</style></noscript><link rel="alternate" href="/atom.xml" title="SteveZhang博客" type="application/atom+xml"></head><body itemscope itemtype="http://schema.org/WebPage"><div class="container use-motion"><div class="headband"></div><header class="header" itemscope itemtype="http://schema.org/WPHeader"><div class="header-inner"><div class="site-brand-container"><div class="site-nav-toggle"><div class="toggle" aria-label="切换导航栏"><span class="toggle-line toggle-line-first"></span> <span class="toggle-line toggle-line-middle"></span> <span class="toggle-line toggle-line-last"></span></div></div><div class="site-meta"><a href="/" class="brand" rel="start"><span class="logo-line-before"><i></i></span><h1 class="site-title">SteveZhang博客</h1><span class="logo-line-after"><i></i></span></a></div><div class="site-nav-right"><div class="toggle popup-trigger"></div></div></div><nav class="site-nav"><ul id="menu" class="main-menu menu"><li class="menu-item menu-item-home"><a href="/" rel="section"><i class="fa fa-home fa-fw"></i>首页</a></li><li class="menu-item menu-item-archives"><a href="/archives/" rel="section"><i class="fa fa-archive fa-fw"></i>归档<span class="badge">47</span></a></li></ul></nav></div></header><div class="back-to-top"><i class="fa fa-arrow-up"></i> <span>0%</span></div><main class="main"><div class="main-inner"><div class="content-wrap"><div class="content post posts-expand"><article itemscope itemtype="http://schema.org/Article" class="post-block" lang="zh-CN"><link itemprop="mainEntityOfPage" href="http://example.com/2022/10/26/Android%E5%B9%B3%E5%8F%B0%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%98%AF%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E5%90%97?/"><span hidden itemprop="author" itemscope itemtype="http://schema.org/Person"><meta itemprop="image" content="/images/avatar.gif"><meta itemprop="name" content="张龙"><meta itemprop="description" content=""></span><span hidden itemprop="publisher" itemscope itemtype="http://schema.org/Organization"><meta itemprop="name" content="SteveZhang博客"></span><header class="post-header"><h1 class="post-title" itemprop="name headline">Android平台的虚拟机是基于栈的吗？</h1><div class="post-meta"><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-calendar"></i> </span><span class="post-meta-item-text">发表于</span> <time title="创建时间：2022-10-26 19:46:26" itemprop="dateCreated datePublished" datetime="2022-10-26T19:46:26+08:00">2022-10-26</time> </span><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-calendar-check"></i> </span><span class="post-meta-item-text">更新于</span> <time title="修改时间：2022-11-17 15:51:48" itemprop="dateModified" datetime="2022-11-17T15:51:48+08:00">2022-11-17</time> </span><span class="post-meta-item"><span class="post-meta-item-icon"><i class="far fa-folder"></i> </span><span class="post-meta-item-text">分类于</span> <span itemprop="about" itemscope itemtype="http://schema.org/Thing"><a href="/categories/Android%E5%9F%BA%E7%A1%80/" itemprop="url" rel="index"><span itemprop="name">Android基础</span></a></span></span></div></header><div class="post-body" itemprop="articleBody"><h2 id="JVM运行时数据区"><a href="#JVM运行时数据区" class="headerlink" title="JVM运行时数据区"></a>JVM运行时数据区</h2><p><img src="/../images/image-20221026194958803.png" alt="image-20221026194958803"></p><ul><li>class文件通过ClassLoader被加载</li><li>字节码执行引擎会在运行时执行字节码</li><li>运行时数据区其实就是字节码在运行时的一个状态， 运行时数据区里最重要的一个地方就是堆，垃圾回收主要针对的就是这个部分</li><li>方法区就是存放字节码加载出来的类信息</li><li>堆和方法区是线程共享的</li><li>非线程共享区，程序计数器，虚拟机栈，本地方法栈</li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>数据结构-栈：FILO（先进后出）</p><p><img src="/../images/image-20221026195511155.png" alt="image-20221026195511155"></p><ul><li>方法的调用是基于栈的，在一个方法中调用另一个方法，后被调用的方法最先结束，最早被调用的方法最后结束。</li><li>Android平台的Activity，同一时间只有最上层的activity是可见的，其他activity想要显示的话，就只有让最上层的activity出栈</li></ul><h2 id="运行时栈帧"><a href="#运行时栈帧" class="headerlink" title="运行时栈帧"></a>运行时栈帧</h2><h3 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h3><ul><li>记录线程内方法的执行状态</li></ul><h3 id="栈帧"><a href="#栈帧" class="headerlink" title="栈帧"></a>栈帧</h3><ul><li>栈中的元素，对应每一个方法执行情况</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  foo()</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><img src="../images/image-20221026200015206.png" alt="image-20221026200015206" style="zoom:50%"><p>先调用main()方法，main方法入栈，再调用foo方法，foo方法再入栈，foo方法就在栈顶，foo方法执行完，就会出线，并释放所有的局部变量，这就是为什么虚拟机栈部分不需要垃圾回收。而堆需要垃圾回收的原因。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">foo</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">val</span> a = <span class="number">1</span></span><br><span class="line">	<span class="keyword">val</span> b = <span class="number">2</span></span><br><span class="line">	<span class="keyword">val</span> c = (a + b)*<span class="number">9</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行时栈帧-1"><a href="#运行时栈帧-1" class="headerlink" title="运行时栈帧"></a>运行时栈帧</h3><img src="../images/image-20221027075654379.png" alt="image-20221027075654379" style="zoom:50%"><p>下面的东西都是线程私有的</p><ul><li>局部变量表：存放局部变量的区域，有4个 this,a,b,c</li><li>操作数栈：用于字节码执行时处理一些中间状态的一块内存区域，在这个例子里，操作数栈的容量是2个，为什么是2个呢？其实是在编译期间，根据代码的逻辑推算出来的，然后再把这个数值记录在字节码里，foo方法只需要2个容量的操作数栈就可以完成运算。<strong>所谓的基于栈实现的栈，并不是前面所说的虚拟机栈，而是操作数栈</strong></li><li>方法出口：方法该返回给谁，返回什么</li><li>程序计数器：它能帮助记录当前执行的字节码是哪一行</li></ul><p>我们看foo方法的字节码</p><img src="../images/image-20221027075736745.png" alt="image-20221027075736745" style="zoom:50%"><ul><li>字节码：每一个单元就是一个字节，有的指令是一个字节，有的指令是两个字节，比如第7行，占用两个单元。</li><li>助记符：帮助我们记住每个字节码的含义</li></ul><img src="../images/image-20221027075937265.png" alt="image-20221027075937265" style="zoom:50%"><p>1）当执行第0行的时候，把一个int型的1推送至栈顶，此时程序计数器指向第0行</p><img src="../images/image-20221027080104082.png" alt="image-20221027080104082" style="zoom:50%"><p>2）接下来看第1行，将栈顶的int型数据存入第1个本地变量(局部变量)，并弹出栈，然后程序计数器指向1</p><img src="../images/image-20221027080302150.png" alt="image-20221027080302150" style="zoom:50%"><p>3）第2行，同上，把int型的数据2推送至栈顶，程序计数器变为2</p><img src="../images/image-20221027080402254.png" alt="image-20221027080402254" style="zoom:50%"><p>4）第3行，把栈顶的int型存入第2个局部变量b，并出栈</p><img src="../images/image-20221027080525495.png" alt="image-20221027080525495" style="zoom:50%"><p>5）第4行，第5行都是iload 把两个局部变量中的值，放入在操作栈上分别是1，2 因为要开始计算了</p><img src="../images/image-20221027080718158.png" alt="image-20221027080718158" style="zoom:50%"><p>6）第6行，将栈顶的两个数相加，并压入栈顶，那么栈顶上就是一个int型数据3</p><img src="../images/image-20221027080826308.png" alt="image-20221027080826308" style="zoom:50%"><p>7）第7行，将单字节的常量，这里是一个9 压入栈顶，这一行占用了两个字节码，所以下一行的行号是9</p><img src="../images/image-20221027080952871.png" alt="image-20221027080952871" style="zoom:50%"><p>8）这一行将栈顶的两上元素相乘，并将结果压入栈顶，那现在栈顶的数值是27</p><img src="../images/image-20221027081102002.png" alt="image-20221027081102002" style="zoom:50%"><p>9）第a行，把栈顶的数据存入第三个本地变量，并出栈</p><p>10）最后执行return这个函数的执行就结束了。</p><blockquote><p>每初始化一个变量，每做一步运算，都要把数据放入操作数栈的栈顶，所有的指令都是操作这个操作数栈的，所以这个名字才叫做操作数栈，这就是基于栈的虚拟机的最基本的一个实现思路</p></blockquote><h2 id="Dalvik虚拟寄存器"><a href="#Dalvik虚拟寄存器" class="headerlink" title="Dalvik虚拟寄存器"></a>Dalvik虚拟寄存器</h2><p><img src="/../images/image-20221031044438997.png" alt="image-20221031044438997"></p><p>Dalvik虚拟寄存器，只有两个虚拟寄存器v0v1 和程序计数器，计数器的功能是一样的，记录程序执行的行号，同样的逻辑，指令条数就少了很多，字节码的单元增大了，变成了两个字节，让这段代码跑起来</p><p><img src="/../images/image-20221031044700482.png" alt="image-20221031044700482"></p><p>1）第0行，把指定的字面量int 1移动到指定的寄存器中</p><p><img src="/../images/image-20221031044757313.png" alt="image-20221031044757313"></p><p>2）第1行，指定的int 2 移动到指定的v1寄存器中</p><p><img src="/../images/image-20221031044838435.png" alt="image-20221031044838435"></p><p>2）第2行，对两个寄存器进行二元运算，是加法，并把结果存到第一个寄存器v0中</p><p><img src="/../images/image-20221031045047855.png" alt="image-20221031045047855"></p><p>3）第3行，指定int 9 并把两数相乘，并存储到寄存器v0中</p><blockquote><p>编译优化：发现a的值不见了，但不影响最终的结果，节约了内存，a在计算之后就没意义了。如果后面又用到了a 那么编译器会帮我们申请带3个插槽的虚拟寄存器</p></blockquote><p><img src="/../images/image-20221031045146616.png" alt="image-20221031045146616"></p><h2 id="各自特点"><a href="#各自特点" class="headerlink" title="各自特点"></a>各自特点</h2><table><thead><tr><th></th><th>基于于栈JVM</th><th>DALVIK(基于寄存器)</th></tr></thead><tbody><tr><td>字节码单元长度</td><td>8位（1字节）</td><td>16位（2字节）</td></tr><tr><td>单元指令长度</td><td>短</td><td>几乎翻倍</td></tr><tr><td>同样逻辑指令条数</td><td>多</td><td>少</td></tr><tr><td>同样逻辑数据移动次数</td><td>多</td><td>尽可能少</td></tr><tr><td>同样逻辑临时结果存储次数</td><td>多</td><td>尽可能少</td></tr></tbody></table><h2 id="如何看待基于栈的虚拟机设计？"><a href="#如何看待基于栈的虚拟机设计？" class="headerlink" title="如何看待基于栈的虚拟机设计？"></a>如何看待基于栈的虚拟机设计？</h2><ul><li>JVM基于栈设计的初衷之一，是压缩代码体积<ul><li>Java设计之初最重要的一个特性就是跨平台，支持嵌入式设备和手持设备（J2ME），这里的手持设备不是我们的现在的移动设备</li><li>Java设计之初，另一个特性是，支持远程传输执行字节码，要降低传输开销。</li></ul></li><li>基于栈的虚拟机，字节码实现简单。<ul><li>指的是生成字节码的过程简单，而不是虚拟机本身简单，或者说是编译器的实现简单。</li><li>操作时，不用去考虑寄存器的地址（绝对位置 ），只需要把想要操作的数据出栈，入栈，然后再实现如何针对栈进行操作就可以了。</li></ul></li><li>基于栈的虚拟机，可移植性高。<ul><li>为了提高效率，虚拟寄存器要映射到真实机器的寄存器，增加移植难度。</li><li>代码移植到其他硬件平台的时候，不用考虑真实机器寄存器的差异，因为操作栈的指令是通用的。</li></ul></li></ul><h2 id="如何看待Android平台基于寄存器的设计？"><a href="#如何看待Android平台基于寄存器的设计？" class="headerlink" title="如何看待Android平台基于寄存器的设计？"></a>如何看待Android平台基于寄存器的设计？</h2><ul><li>更快！更省内存！<ul><li>指令条数少</li><li>数据移动次数少、临时结果存放次数少</li><li>映射真实机器的寄存器</li></ul></li><li>Android不需要解决移植性问题<ul><li>Android平台的操作系统是统一的</li></ul></li><li>Android平台用其他方式解决了代码体积的问题<ul><li>dex文件优化</li></ul></li></ul></div><footer class="post-footer"><div class="post-nav"><div class="post-nav-item"><a href="/2022/10/25/%E7%94%B1%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98,%E8%AF%B4%E4%B8%80%E4%B8%8BJava%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B/" rel="prev" title="由一道面试题,说一下Java双亲委派模型"><i class="fa fa-chevron-left"></i> 由一道面试题,说一下Java双亲委派模型</a></div><div class="post-nav-item"><a href="/2022/11/04/apk%E5%8A%A0%E5%9B%BA-%E6%95%B4%E4%BD%93dex%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E7%A0%94%E7%A9%B6/" rel="next" title="apk加固-整体dex加密方式研究">apk加固-整体dex加密方式研究 <i class="fa fa-chevron-right"></i></a></div></div></footer></article></div><script>window.addEventListener("tabs:register",()=>{let e=CONFIG.comments["activeClass"];if(CONFIG.comments.storage&&(e=localStorage.getItem("comments_active")||e),e){let t=document.querySelector(`a[href="#comment-${e}"]`);t&&t.click()}}),CONFIG.comments.storage&&window.addEventListener("tabs:click",t=>{t.target.matches(".tabs-comment .tab-content .tab-pane")&&(t=t.target.classList[1],localStorage.setItem("comments_active",t))})</script></div><div class="toggle sidebar-toggle"><span class="toggle-line toggle-line-first"></span> <span class="toggle-line toggle-line-middle"></span> <span class="toggle-line toggle-line-last"></span></div><aside class="sidebar"><div class="sidebar-inner"><ul class="sidebar-nav motion-element"><li class="sidebar-nav-toc">文章目录</li><li class="sidebar-nav-overview">站点概览</li></ul><div class="post-toc-wrap sidebar-panel"><div class="post-toc motion-element"><ol class="nav"><li class="nav-item nav-level-2"><a class="nav-link" href="#JVM%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA"><span class="nav-number">1.</span> <span class="nav-text">JVM运行时数据区</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E6%A0%88"><span class="nav-number">2.</span> <span class="nav-text">栈</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7"><span class="nav-number">3.</span> <span class="nav-text">运行时栈帧</span></a><ol class="nav-child"><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%A0%88"><span class="nav-number">3.1.</span> <span class="nav-text">虚拟机栈</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E6%A0%88%E5%B8%A7"><span class="nav-number">3.2.</span> <span class="nav-text">栈帧</span></a></li><li class="nav-item nav-level-3"><a class="nav-link" href="#%E8%BF%90%E8%A1%8C%E6%97%B6%E6%A0%88%E5%B8%A7-1"><span class="nav-number">3.3.</span> <span class="nav-text">运行时栈帧</span></a></li></ol></li><li class="nav-item nav-level-2"><a class="nav-link" href="#Dalvik%E8%99%9A%E6%8B%9F%E5%AF%84%E5%AD%98%E5%99%A8"><span class="nav-number">4.</span> <span class="nav-text">Dalvik虚拟寄存器</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%90%84%E8%87%AA%E7%89%B9%E7%82%B9"><span class="nav-number">5.</span> <span class="nav-text">各自特点</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85%E5%9F%BA%E4%BA%8E%E6%A0%88%E7%9A%84%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%AE%BE%E8%AE%A1%EF%BC%9F"><span class="nav-number">6.</span> <span class="nav-text">如何看待基于栈的虚拟机设计？</span></a></li><li class="nav-item nav-level-2"><a class="nav-link" href="#%E5%A6%82%E4%BD%95%E7%9C%8B%E5%BE%85Android%E5%B9%B3%E5%8F%B0%E5%9F%BA%E4%BA%8E%E5%AF%84%E5%AD%98%E5%99%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%EF%BC%9F"><span class="nav-number">7.</span> <span class="nav-text">如何看待Android平台基于寄存器的设计？</span></a></li></ol></div></div><div class="site-overview-wrap sidebar-panel"><div class="site-author motion-element" itemprop="author" itemscope itemtype="http://schema.org/Person"><p class="site-author-name" itemprop="name">张龙</p><div class="site-description" itemprop="description"></div></div><div class="site-state-wrap motion-element"><nav class="site-state"><div class="site-state-item site-state-posts"><a href="/archives/"><span class="site-state-item-count">47</span> <span class="site-state-item-name">日志</span></a></div><div class="site-state-item site-state-categories"><a href="/categories/"><span class="site-state-item-count">11</span> <span class="site-state-item-name">分类</span></a></div><div class="site-state-item site-state-tags"><a href="/tags/"><span class="site-state-item-count">2</span> <span class="site-state-item-name">标签</span></a></div></nav></div></div></div></aside><div id="sidebar-dimmer"></div></div></main><footer class="footer"><div class="footer-inner"><div class="copyright">&copy; <span itemprop="copyrightYear">2022</span> <span class="with-love"><i class="fa fa-heart"></i> </span><span class="author" itemprop="copyrightHolder">张龙</span></div></div></footer></div><script src="/lib/anime.min.js"></script><script src="/lib/velocity/velocity.min.js"></script><script src="/lib/velocity/velocity.ui.min.js"></script><script src="/js/utils.js"></script><script src="/js/motion.js"></script><script src="/js/schemes/pisces.js"></script><script src="/js/next-boot.js"></script></body></html>